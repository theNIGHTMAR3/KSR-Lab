<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MassTransit</name>
    </assembly>
    <members>
        <member name="T:MassTransit.Agents.ActivePipeContext`1">
            <summary>
            An active reference to a pipe context, which is managed by an existing pipe context handle.
            </summary>
            <typeparam name="TContext"></typeparam>
        </member>
        <member name="M:MassTransit.Agents.ActivePipeContext`1.#ctor(MassTransit.PipeContextHandle{`0},System.Threading.Tasks.Task{`0})">
            <summary>
            Creates the active pipe context handle, which must have completed before this instance is created. Otherwise,
            it would create a pretty nasty async mess that wouldn't handle faults very well (actually, it should, but I haven't tested it).
            </summary>
            <param name="contextHandle">The context handle of the actual context which is being used</param>
            <param name="context">The actual context, which should be a completed Task</param>
        </member>
        <member name="M:MassTransit.Agents.ActivePipeContext`1.#ctor(MassTransit.PipeContextHandle{`0},`0)">
            <summary>
            Creates the active pipe context handle, which must have completed before this instance is created. Otherwise,
            it would create a pretty nasty async mess that wouldn't handle faults very well (actually, it should, but I haven't tested it).
            </summary>
            <param name="contextHandle">The context handle of the actual context which is being used</param>
            <param name="context">The actual context</param>
        </member>
        <member name="T:MassTransit.Agents.ActivePipeContextAgent`1">
            <summary>
            An Agent Provocateur that uses a context handle for the activate state of the agent
            </summary>
            <typeparam name="TContext"></typeparam>
        </member>
        <member name="M:MassTransit.Agents.ActivePipeContextAgent`1.StopAgent(MassTransit.StopContext)">
            <inheritdoc />
        </member>
        <member name="M:MassTransit.Agents.ActivePipeContextAgent`1.ToString">
            <inheritdoc />
        </member>
        <member name="T:MassTransit.Agents.ActivePipeContextHandle`1">
            <summary>
            An active, in-use reference to a pipe context.
            </summary>
            <typeparam name="TContext"></typeparam>
        </member>
        <member name="M:MassTransit.Agents.ActivePipeContextHandle`1.Faulted(System.Exception)">
            <summary>
            If the use of this context results in a fault which should cause the context to be disposed, this method signals that behavior to occur.
            </summary>
            <param name="exception">The bad thing that happened</param>
        </member>
        <member name="T:MassTransit.Agents.AsyncPipeContextAgent`1">
            <summary>
            A PipeContext, which as an agent can be Stopped, which disposes of the context making it unavailable
            </summary>
            <typeparam name="TContext"></typeparam>
        </member>
        <member name="M:MassTransit.Agents.AsyncPipeContextAgent`1.ToString">
            <inheritdoc />
        </member>
        <member name="T:MassTransit.Agents.AsyncPipeContextFilter`1">
            <summary>
            Completes the AsyncPipeContextAgent when the context is sent to the pipe, and doesn't return until the agent completes
            </summary>
            <typeparam name="TContext"></typeparam>
        </member>
        <member name="T:MassTransit.Agents.AsyncPipeContextHandle`1">
            <summary>
            An asynchronously pipe context handle, which can be completed.
            </summary>
            <typeparam name="TContext">The context type</typeparam>
        </member>
        <member name="M:MassTransit.Agents.AsyncPipeContextHandle`1.#ctor">
            <summary>
            Creates the handle
            </summary>
        </member>
        <member name="T:MassTransit.Agents.AsyncPipeContextPipe`1">
            <summary>
            Completes the AsyncPipeContextAgent when the context is sent to the pipe, and doesn't return until the agent completes
            </summary>
            <typeparam name="TContext"></typeparam>
        </member>
        <member name="T:MassTransit.Agents.IActivePipeContextAgent`1">
            <summary>
            An active use of a pipe context as an agent.
            </summary>
            <typeparam name="TContext"></typeparam>
        </member>
        <member name="T:MassTransit.Agents.IPipeContextFactory`1">
            <summary>
            Used to create the actual context, and the active context usages
            </summary>
            <typeparam name="TContext">The context type</typeparam>
        </member>
        <member name="M:MassTransit.Agents.IPipeContextFactory`1.CreateContext(MassTransit.ISupervisor)">
            <summary>
            Create the pipe context, which is the actual context, and not a copy of it
            </summary>
            <param name="supervisor">The supervisor containing the context</param>
            <returns>A handle to the pipe context</returns>
        </member>
        <member name="M:MassTransit.Agents.IPipeContextFactory`1.CreateActiveContext(MassTransit.ISupervisor,MassTransit.PipeContextHandle{`0},System.Threading.CancellationToken)">
            <summary>
            Create an active pipe context, which is a reference to the actual context
            </summary>
            <param name="supervisor">The supervisor containing the context</param>
            <param name="context">The actual context</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> use for the active context</param>
            <returns>A handle to the active context</returns>
        </member>
        <member name="T:MassTransit.Agents.PipeContextAgent`1">
            <summary>
            A PipeContext, which as an agent can be Stopped, which disposes of the context making it unavailable
            </summary>
            <typeparam name="TContext"></typeparam>
        </member>
        <member name="M:MassTransit.Agents.PipeContextAgent`1.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="M:MassTransit.Agents.PipeContextAgent`1.StopAgent(MassTransit.StopContext)">
            <inheritdoc />
        </member>
        <member name="T:MassTransit.Agents.PipeContextSupervisor`1">
            <summary>
            Maintains a cached context, which is created upon first use, and recreated whenever a fault is propagated to the usage.
            </summary>
            <typeparam name="TContext"></typeparam>
        </member>
        <member name="M:MassTransit.Agents.PipeContextSupervisor`1.#ctor(MassTransit.Agents.IPipeContextFactory{`0})">
            <summary>
            Create the cache
            </summary>
            <param name="contextFactory">Factory used to create the underlying and active contexts</param>
        </member>
        <member name="T:MassTransit.Audit.IMessageAuditStore">
            <summary>
            Used to store message audits that are observed
            </summary>
        </member>
        <member name="M:MassTransit.Audit.IMessageAuditStore.StoreMessage``1(``0,MassTransit.Audit.MessageAuditMetadata)">
            <summary>
            Store the message audit, with associated metadata
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="message">The message itself</param>
            <param name="metadata">The message metadata</param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Bus">
            <summary>
            used to get access to the bus factories
            </summary>
        </member>
        <member name="P:MassTransit.Bus.Factory">
            <summary>
            Access a bus factory from this main factory interface (easy extension method support)
            </summary>
        </member>
        <member name="M:MassTransit.BusControlExtensions.Stop(MassTransit.IBusControl)">
            <summary>
            Stop a bus, throwing an exception if the bus does not stop.
            It is a wrapper of the async method `StopAsync`
            </summary>
            <param name="busControl">The bus handle</param>
        </member>
        <member name="M:MassTransit.BusControlExtensions.Start(MassTransit.IBusControl)">
            <summary>
            Starts a bus, throwing an exception if the bus does not start
            It is a wrapper of the async method `StartAsync`
            </summary>
            <param name="busControl">The bus handle</param>
        </member>
        <member name="M:MassTransit.BusControlExtensions.Stop(MassTransit.IBusControl,System.TimeSpan)">
            <summary>
            Stop a bus, throwing an exception if the bus does not stop in the specified timeout
            </summary>
            <param name="bus">The bus handle</param>
            <param name="stopTimeout">The wait time before throwing an exception</param>
        </member>
        <member name="M:MassTransit.BusControlExtensions.Start(MassTransit.IBusControl,System.TimeSpan)">
            <summary>
            Start a bus, throwing an exception if the bus does not start in the specified timeout
            </summary>
            <param name="bus">The bus handle</param>
            <param name="startTimeout">The wait time before throwing an exception</param>
        </member>
        <member name="M:MassTransit.BusControlExtensions.StartAsync(MassTransit.IBusControl,System.TimeSpan)">
            <summary>
            Start a bus, throwing an exception if the bus does not start in the specified timeout
            </summary>
            <param name="bus">The bus handle</param>
            <param name="startTimeout">The wait time before throwing an exception</param>
        </member>
        <member name="M:MassTransit.BusControlExtensions.StopAsync(MassTransit.IBusControl,System.TimeSpan)">
            <summary>
            Stop a bus, throwing an exception if the bus does not stop in the specified timeout
            </summary>
            <param name="bus">The bus handle</param>
            <param name="stopTimeout">The wait time before throwing an exception</param>
        </member>
        <member name="M:MassTransit.BusControlExtensions.DeployAsync(MassTransit.IBusControl,System.Threading.CancellationToken)">
            <summary>
            This can be used to start and stop the bus when configured in a deploy topology only scenario. No messages should be consumed by it.
            </summary>
            <param name="bus"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:MassTransit.BusHandleExtensions.Stop(MassTransit.BusHandle)">
            <summary>
            Stop a bus, throwing an exception if the bus does not stop
            </summary>
            <param name="handle">The bus handle</param>
        </member>
        <member name="M:MassTransit.BusHandleExtensions.Stop(MassTransit.BusHandle,System.TimeSpan)">
            <summary>
            Stop a bus, throwing an exception if the bus does not stop in the specified timeout
            </summary>
            <param name="handle">The bus handle</param>
            <param name="stopTimeout">The wait time before throwing an exception</param>
        </member>
        <member name="M:MassTransit.BusHandleExtensions.StopAsync(MassTransit.BusHandle,System.TimeSpan)">
            <summary>
            Stop a bus, throwing an exception if the bus does not stop in the specified timeout
            </summary>
            <param name="handle">The bus handle</param>
            <param name="stopTimeout">The wait time before throwing an exception</param>
        </member>
        <member name="P:MassTransit.Caching.CacheSettings.Capacity">
            <summary>
            The number of items allowed in the cache. This isn't a hard limit, but the cache will shrink
            the cache size to be under the capacity when possible.
            </summary>
        </member>
        <member name="P:MassTransit.Caching.CacheSettings.MaxAge">
            <summary>
            The maximum length of time an unused item will remain in the cache
            </summary>
        </member>
        <member name="P:MassTransit.Caching.CacheSettings.MinAge">
            <summary>
            The minimum length of time an item will remain in the cache before it is eligible for removal
            </summary>
        </member>
        <member name="P:MassTransit.Caching.CacheSettings.NowProvider">
            <summary>
            Provides the current time, which is used to manage item lifetime. Replace this to allow unit
            tests to move time forward quickly.
            </summary>
        </member>
        <member name="P:MassTransit.Caching.CacheSettings.BucketCount">
            <summary>
            The number of buckets to create per time slot (do NOT change this unless you're very smart)
            </summary>
        </member>
        <member name="P:MassTransit.Caching.CacheSettings.TimeSlots">
            <summary>
            The number of time slots per bucket (do NOT change this unless you're very smart)
            </summary>
        </member>
        <member name="M:MassTransit.Caching.GreenCache`1.#ctor(MassTransit.Caching.CacheSettings)">
            <summary>
            Create a cache using the specified cache settings
            </summary>
            <param name="settings">The cache settings</param>
        </member>
        <member name="M:MassTransit.Caching.ICache`1.AddIndex``1(System.String,MassTransit.Caching.KeyProvider{``0,`0},MassTransit.Caching.MissingValueFactory{``0,`0})">
            <summary>
                Create an index on the cache for the specified key type
            </summary>
            <param name="name">A unique index name</param>
            <param name="keyProvider">The key factory for the value</param>
            <param name="missingValueFactory"></param>
            <typeparam name="TKey">The key type for the index</typeparam>
            <returns>The index, which can be used directly to access the cache</returns>
        </member>
        <member name="M:MassTransit.Caching.ICache`1.GetIndex``1(System.String)">
            <summary>
                Get an existing cache index by name
            </summary>
            <param name="name"></param>
            <typeparam name="TKey"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Caching.ICache`1.Add(`0)">
            <summary>
            Adds a value, updating indices, before returning
            </summary>
            <param name="value">The value to add</param>
        </member>
        <member name="M:MassTransit.Caching.ICache`1.GetAll">
            <summary>
                Returns all the values in the cache
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Caching.ICache`1.Clear">
            <summary>
                Forcibly clear the cache immediately (disposal of cached items may take some time, occurs asynchronously)
            </summary>
        </member>
        <member name="T:MassTransit.Caching.ICacheValueObserver`1">
            <summary>
            Observes behavior within the cache
            </summary>
            <typeparam name="TValue">The value type</typeparam>
        </member>
        <member name="M:MassTransit.Caching.ICacheValueObserver`1.ValueAdded(MassTransit.Caching.INode{`0},`0)">
            <summary>
            Called when a new node is added to the cache, after the node has resolved.
            </summary>
            <param name="node">The cached node</param>
            <param name="value">The cached value, to avoid awaiting</param>
            <returns>An awaitable task for the observer</returns>
        </member>
        <member name="M:MassTransit.Caching.ICacheValueObserver`1.ValueRemoved(MassTransit.Caching.INode{`0},`0)">
            <summary>
            Called when a node is removed from the cache.
            </summary>
            <param name="node">The cached node</param>
            <param name="value">The cached value, to avoid awaiting</param>
            <returns>An awaitable task for the observer</returns>
        </member>
        <member name="M:MassTransit.Caching.ICacheValueObserver`1.CacheCleared">
            <summary>
            Called when the cache is cleared of all nodes.
            </summary>
        </member>
        <member name="T:MassTransit.Caching.IIndex`2">
            <summary>
            An index is used to access items in the cache quickly
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:MassTransit.Caching.IIndex`2.Remove(`0)">
            <summary>
            Forcibly removes the item from the cache, but disposal may occur asynchronously.
            </summary>
            <param name="key">The value key</param>
        </member>
        <member name="P:MassTransit.Caching.INode`1.Value">
            <summary>
            The cached value
            </summary>
        </member>
        <member name="P:MassTransit.Caching.INode`1.HasValue">
            <summary>
            True if the node has a value, resolved, ready to rock
            </summary>
        </member>
        <member name="P:MassTransit.Caching.INode`1.IsValid">
            <summary>
            True if the node value is invalid
            </summary>
        </member>
        <member name="M:MassTransit.Caching.INode`1.GetValue(MassTransit.Caching.IPendingValue{`0})">
            <summary>
            Get the node's value, passing a pending value if for some
            reason the node's value has not yet been accepted or has
            expired.
            </summary>
            <param name="pendingValue"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Caching.INotifyValueUsed">
            <summary>
            If a cached value implments this interface, the cache will attach itself to the
            event so the value can signal usage to update the lifetime of the value.
            </summary>
        </member>
        <member name="E:MassTransit.Caching.INotifyValueUsed.Used">
            <summary>
            Should be raised by the value when used, to keep it alive in the cache.
            </summary>
        </member>
        <member name="M:MassTransit.Caching.Internals.Bucket`1.Clear">
            <summary>
            Clear the bucket, no node cleanup is performed
            </summary>
        </member>
        <member name="M:MassTransit.Caching.Internals.Bucket`1.Push(MassTransit.Caching.Internals.IBucketNode{`0})">
            <summary>
            Push a node to the front of the bucket, and set the node's bucket to this bucket
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Caching.Internals.Bucket`1.Used(MassTransit.Caching.Internals.IBucketNode{`0})">
            <summary>
            When a node is used, check and rebucket if necessary to keep it in the cache
            </summary>
            <param name="node"></param>
        </member>
        <member name="T:MassTransit.Caching.Internals.BucketCollection`1">
            <summary>
            An ordered collection of buckets, used by the node tracker to keep track of nodes
            </summary>
            <typeparam name="TValue">The value type</typeparam>
        </member>
        <member name="M:MassTransit.Caching.Internals.BucketCollection`1.Empty">
            <summary>
            Empties every bucket in the collection, evicting all the nodes
            </summary>
        </member>
        <member name="T:MassTransit.Caching.Internals.BucketNode`1">
            <summary>
            A bucket node has been stored in a bucket, and is a fully resolved value.
            </summary>
            <typeparam name="TValue">The value type</typeparam>
        </member>
        <member name="P:MassTransit.Caching.Internals.CacheStatistics.MaxAge">
            <summary>
            How long a value can live in the cache until being swept during the next cleanup
            </summary>
        </member>
        <member name="P:MassTransit.Caching.Internals.CacheStatistics.MinAge">
            <summary>
            The shortest time a value can live in the cache, even if it means blowing up the cache size
            </summary>
        </member>
        <member name="P:MassTransit.Caching.Internals.CacheStatistics.BucketSize">
            <summary>
            How many values each bucket should hold
            </summary>
        </member>
        <member name="P:MassTransit.Caching.Internals.CacheStatistics.BucketCount">
            <summary>
            How much buckets are maintained
            </summary>
        </member>
        <member name="P:MassTransit.Caching.Internals.CacheStatistics.OldestBucketIndex">
            <summary>
            The lowest bucket index with nodes in it
            </summary>
        </member>
        <member name="P:MassTransit.Caching.Internals.CacheStatistics.CurrentBucketIndex">
            <summary>
            The current bucket for nodes
            </summary>
        </member>
        <member name="P:MassTransit.Caching.Internals.CacheStatistics.Capacity">
            <summary>
            The value limit for the cache
            </summary>
            <remarks>
            The actual number of values can exceed the limit if items are being added quickly and take a while to reach the minimum age
            </remarks>
        </member>
        <member name="P:MassTransit.Caching.Internals.CacheStatistics.Count">
            <summary>
            Current value count
            </summary>
        </member>
        <member name="P:MassTransit.Caching.Internals.CacheStatistics.TotalCount">
            <summary>
            Total number of values added to the cache since it was created
            </summary>
        </member>
        <member name="P:MassTransit.Caching.Internals.CacheStatistics.Misses">
            <summary>
            Gets the number of times an item was requested from the cache which did not exist yet, since the cache
            was created.
            </summary>
        </member>
        <member name="P:MassTransit.Caching.Internals.CacheStatistics.Hits">
            <summary>
            Gets the number of times an existing item was requested from the cache since the cache
            was created.
            </summary>
        </member>
        <member name="P:MassTransit.Caching.Internals.CacheStatistics.CreateFaults">
            <summary>
            The number of node creates which faulted
            </summary>
        </member>
        <member name="M:MassTransit.Caching.Internals.CacheStatistics.Reset">
            <summary>
            Resets the statistics.
            </summary>
        </member>
        <member name="M:MassTransit.Caching.Internals.CacheValueObservable`1.Connect(MassTransit.Caching.ICacheValueObserver{`0})">
            <summary>
            Connect a connectable type
            </summary>
            <param name="connection">The connection to add</param>
            <returns>The connection handle</returns>
        </member>
        <member name="M:MassTransit.Caching.Internals.CacheValueObservable`1.ForEach(System.Action{MassTransit.Caching.ICacheValueObserver{`0}})">
            <summary>
            Enumerate the connections invoking the callback for each connection
            </summary>
            <param name="callback">The callback</param>
            <returns>An awaitable Task for the operation</returns>
        </member>
        <member name="T:MassTransit.Caching.Internals.FactoryNode`1">
            <summary>
            A factory node is a temporary node used by an index until the node has
            been resolved.
            </summary>
            <typeparam name="TValue">The value type</typeparam>
        </member>
        <member name="P:MassTransit.Caching.Internals.IBucketNode`1.Bucket">
            <summary>
            The node's bucket
            </summary>
        </member>
        <member name="P:MassTransit.Caching.Internals.IBucketNode`1.Next">
            <summary>
            Returns the next node in the bucket
            </summary>
        </member>
        <member name="M:MassTransit.Caching.Internals.IBucketNode`1.SetBucket(MassTransit.Caching.Internals.Bucket{`0},MassTransit.Caching.Internals.IBucketNode{`0})">
            <summary>
            Puts the node's bucket, once the value is resolved, so that the node
            can be tracked.
            </summary>
            <param name="bucket"></param>
            <param name="next"></param>
        </member>
        <member name="M:MassTransit.Caching.Internals.IBucketNode`1.AssignToBucket(MassTransit.Caching.Internals.Bucket{`0})">
            <summary>
            Assigns the node to a new bucket, but doesn't change the next node
            until it's cleaned up
            </summary>
            <param name="bucket"></param>
        </member>
        <member name="M:MassTransit.Caching.Internals.IBucketNode`1.Evict">
            <summary>
            Forcibly evicts the node by setting the internal state to
            nothing.
            </summary>
        </member>
        <member name="M:MassTransit.Caching.Internals.IBucketNode`1.Pop">
            <summary>
            Remove the node from the bucket, and return the next node
            </summary>
            <returns></returns>
        </member>
        <member name="P:MassTransit.Caching.Internals.ICacheIndex`1.KeyType">
            <summary>
            The key type for the index
            </summary>
        </member>
        <member name="M:MassTransit.Caching.Internals.ICacheIndex`1.Clear">
            <summary>
            Clear the index, removing all nodes, but leaving them unmodified
            </summary>
        </member>
        <member name="M:MassTransit.Caching.Internals.ICacheIndex`1.Add(MassTransit.Caching.INode{`0})">
            <summary>
            Adds a node to the index
            </summary>
            <param name="node">The node</param>
            <returns>True if the value was added, false if the value already existed in the index</returns>
        </member>
        <member name="M:MassTransit.Caching.Internals.ICacheIndex`1.TryGetExistingNode(`0,MassTransit.Caching.INode{`0}@)">
            <summary>
            Check if the value is in the index, and if found, return the node
            </summary>
            <param name="value">The value</param>
            <param name="node">The matching node</param>
            <returns>True if the value was found, otherwise false</returns>
        </member>
        <member name="P:MassTransit.Caching.Internals.INodeTracker`1.Statistics">
            <summary>
            Maintains statistics for the cache
            </summary>
        </member>
        <member name="M:MassTransit.Caching.Internals.INodeTracker`1.Add(MassTransit.Caching.Internals.INodeValueFactory{`0})">
            <summary>
            Adds a pending node to the cache, that once resolved, is published
            to the indices
            </summary>
            <param name="nodeValueFactory"></param>
        </member>
        <member name="M:MassTransit.Caching.Internals.INodeTracker`1.Add(`0)">
            <summary>
            Just add the value, straight up
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:MassTransit.Caching.Internals.INodeTracker`1.Rebucket(MassTransit.Caching.Internals.IBucketNode{`0})">
            <summary>
            Assigns the node to the current bucket, likely do it being touched.
            </summary>
            <param name="node"></param>
        </member>
        <member name="M:MassTransit.Caching.Internals.INodeTracker`1.Remove(MassTransit.Caching.INode{`0})">
            <summary>
            Remove a node from the cache, notifying all observers that it was removed
            (which updates the indices as well).
            </summary>
            <param name="existingNode">The node being removed</param>
        </member>
        <member name="M:MassTransit.Caching.Internals.INodeTracker`1.GetAll">
            <summary>
            Returns every known node in the cache from the valid buckets
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Caching.Internals.INodeTracker`1.Clear">
            <summary>
            Clear the cache, throw out the buckets, time to start over
            </summary>
        </member>
        <member name="T:MassTransit.Caching.Internals.INodeValueFactory`1">
            <summary>
            Holds a queue of pending values, attemping to resolve them in order until
            one of them completes, and then using the completing value for any pending
            values instead of calling their factory methods.
            </summary>
            <typeparam name="TValue">The value type</typeparam>
        </member>
        <member name="P:MassTransit.Caching.Internals.INodeValueFactory`1.Value">
            <summary>
            Returns the final value of the factory, either completed or faulted
            </summary>
        </member>
        <member name="M:MassTransit.Caching.Internals.INodeValueFactory`1.Add(MassTransit.Caching.IPendingValue{`0})">
            <summary>
            Add a pending value to the factory, which will either use a previously
            completed value or become the new factory method for the value.
            </summary>
            <param name="pendingValue">The factory method</param>
        </member>
        <member name="M:MassTransit.Caching.Internals.INodeValueFactory`1.CreateValue">
            <summary>
            Called by the node tracker to create the value, which is then redistributed to the indices.
            Should not be called by another as it's used to resolve the value.
            </summary>
            <returns>The ultimate value task, either completed or faulted</returns>
        </member>
        <member name="T:MassTransit.Caching.Internals.NodeValueFactory`1">
            <summary>
            A factory for a node which keeps track of subsequent attempts to create the
            same node, passing through until a valid node is created.
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:MassTransit.Caching.Internals.NodeValueFactory`1.#ctor(MassTransit.Caching.IPendingValue{`0},System.Int32)">
            <summary>
            Creates a node value factory, with the inital pending value
            </summary>
            <param name="initialPendingValue">The value that brought the node to the cache</param>
            <param name="timeoutInMilliseconds">The timeout to wait for additional factories before faulting</param>
        </member>
        <member name="T:MassTransit.Caching.Internals.PendingValue`2">
            <summary>
            This is used to store a pending value as a node, which will eventually be published to the indices
            once it resolves. If the pending value faults, it will be removed from the index, unless a subsequent
            factory completes successfully.
            </summary>
            <typeparam name="TKey">The key type</typeparam>
            <typeparam name="TValue">The value type</typeparam>
        </member>
        <member name="T:MassTransit.Caching.IPendingValue`1">
            <summary>
            A pending Get on an index, which has yet to be processed. Used by the
            node value factory to sequentially resolve the value for an index item
            which is then added to the cache.
            </summary>
            <typeparam name="TValue">The value type</typeparam>
        </member>
        <member name="M:MassTransit.Caching.IPendingValue`1.SetValue(System.Threading.Tasks.Task{`0})">
            <summary>
            Sets the pending value, eliminating the need for the factory method.
            </summary>
            <param name="value">The resolved value</param>
        </member>
        <member name="M:MassTransit.Caching.IPendingValue`1.CreateValue">
            <summary>
            Create the value using the missing value factory supplied to Get
            </summary>
            <returns>Either the value, or a faulted task.</returns>
        </member>
        <member name="T:MassTransit.Caching.KeyProvider`2">
            <summary>
            Returns the key for a value
            </summary>
            <param name="value"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="T:MassTransit.Caching.MissingValueFactory`2">
            <summary>
            Creates the value if it is not found in the index
            </summary>
            <param name="key">The missing key</param>
            <typeparam name="TKey">The key type</typeparam>
            <typeparam name="TValue">The value type</typeparam>
        </member>
        <member name="M:MassTransit.ClientFactoryExtensions.CreateRequestClient``1(MassTransit.IBus,System.Uri,MassTransit.RequestTimeout)">
            <summary>
            Create a request client from the bus, using the default bus endpoint for responses
            </summary>
            <param name="bus">The bus instance</param>
            <param name="destinationAddress">The request service address</param>
            <param name="timeout">The default request timeout</param>
            <typeparam name="TRequest">The request type</typeparam>
        </member>
        <member name="M:MassTransit.ClientFactoryExtensions.CreateRequestClient``1(MassTransit.IBus,MassTransit.RequestTimeout)">
            <summary>
            Create a request client from the bus, using the default bus endpoint for responses, and publishing the request versus sending it.
            </summary>
            <param name="bus">The bus instance</param>
            <param name="timeout">The default request timeout</param>
            <typeparam name="TRequest">The request type</typeparam>
        </member>
        <member name="M:MassTransit.ClientFactoryExtensions.CreateRequestClient``1(MassTransit.ConsumeContext,MassTransit.IBus,System.Uri,MassTransit.RequestTimeout)">
            <summary>
            Create a request client from the bus, using the default bus endpoint for responses
            </summary>
            <param name="consumeContext"></param>
            <param name="bus">The bus instance</param>
            <param name="destinationAddress">The request service address</param>
            <param name="timeout">The default request timeout</param>
            <typeparam name="TRequest">The request type</typeparam>
        </member>
        <member name="M:MassTransit.ClientFactoryExtensions.CreateRequestClient``1(MassTransit.ConsumeContext,MassTransit.IBus,MassTransit.RequestTimeout)">
            <summary>
            Create a request client from the bus, using the default bus endpoint for responses
            </summary>
            <param name="consumeContext"></param>
            <param name="bus">The bus instance</param>
            <param name="timeout">The default request timeout</param>
            <typeparam name="TRequest">The request type</typeparam>
        </member>
        <member name="M:MassTransit.ClientFactoryExtensions.CreateClientFactory(MassTransit.IBus,MassTransit.RequestTimeout)">
            <summary>
            Create a client factory from the bus, which uses the default bus endpoint for any response messages
            </summary>
            <param name="bus">THe bus instance</param>
            <param name="timeout">The default request timeout</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ClientFactoryExtensions.CreateClientFactory(MassTransit.ReceiveEndpointReady,MassTransit.RequestTimeout)">
            <summary>
            Connects a client factory to a host receive endpoint, using the bus as the send endpoint provider
            </summary>
            <param name="receiveEndpoint"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ClientFactoryExtensions.CreateClientFactory(MassTransit.HostReceiveEndpointHandle,MassTransit.RequestTimeout)">
            <summary>
            Connects a client factory to a host receive endpoint, using the bus as the send endpoint provider
            </summary>
            <param name="receiveEndpointHandle">
            A handle to the receive endpoint, which is stopped when the client factory is disposed
            </param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ClientFactoryExtensions.CreateClientFactory(MassTransit.IReceiveConnector,MassTransit.RequestTimeout)">
            <summary>
            Connects a new receive endpoint to the host, and creates a <see cref="T:MassTransit.IClientFactory" />.
            </summary>
            <param name="connector">The host to connect the new receive endpoint</param>
            <param name="timeout">The default request timeout</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ClientFactoryExtensions.ConnectClientFactory(MassTransit.IReceiveConnector,MassTransit.RequestTimeout)">
            <summary>
            Connects a new receive endpoint to the host, and creates a <see cref="T:MassTransit.IClientFactory" />.
            </summary>
            <param name="connector">The host to connect the new receive endpoint</param>
            <param name="timeout">The default request timeout</param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Clients.FaultHandlerConnectHandle">
            <summary>
            The fault handler for the request client
            </summary>
        </member>
        <member name="T:MassTransit.Clients.MessageResponse`1">
            <summary>
            A result from a request
            </summary>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="T:MassTransit.Clients.ResponseHandlerConfigurator`1">
            <summary>
            Connects a handler to the inbound pipe of the receive endpoint
            </summary>
            <typeparam name="TResponse"></typeparam>
        </member>
        <member name="T:MassTransit.Clients.ResponseHandlerConnectHandle`1">
            <summary>
            A connection to a request which handles a result, and completes the Task when it's received
            </summary>
            <typeparam name="TResponse"></typeparam>
        </member>
        <member name="M:MassTransit.ActivityObserverConfigurationExtensions.ConnectActivityObserver(MassTransit.IBusFactoryConfigurator,MassTransit.IActivityObserver)">
            <summary>
            Connect an activity observer that will be connected to all activity execute/compensate endpoints
            </summary>
            <param name="configurator"></param>
            <param name="observer"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ActivityObserverConfigurationExtensions.ConnectActivityObserver(MassTransit.IReceiveEndpointConfigurator,MassTransit.IActivityObserver)">
            <summary>
            Connect an activity observer that will be connected to all activity execute/compensate endpoints
            </summary>
            <param name="configurator"></param>
            <param name="observer"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.AuditConfigurationExtensions.ConnectSendAuditObservers``1(``0,MassTransit.Audit.IMessageAuditStore,System.Action{MassTransit.IMessageFilterConfigurator},MassTransit.Audit.ISendMetadataFactory)">
            <summary>
            Adds observers that will audit all published and sent messages, sending them to the message audit store after they are sent/published.
            </summary>
            <param name="connector">The bus</param>
            <param name="store">Audit store</param>
            <param name="configureFilter">Filter configuration delegate</param>
            <param name="metadataFactory">Message metadata factory. If omitted, the default one will be used.</param>
        </member>
        <member name="M:MassTransit.AuditConfigurationExtensions.ConnectConsumeAuditObserver(MassTransit.IConsumeObserverConnector,MassTransit.Audit.IMessageAuditStore,System.Action{MassTransit.IMessageFilterConfigurator},MassTransit.Audit.IConsumeMetadataFactory)">
            <summary>
            Add an observer that will audit consumed messages, sending them to the message audit store prior to consumption by the consumer
            </summary>
            <param name="connector">The bus or endpoint</param>
            <param name="store">The audit store</param>
            <param name="configureFilter">Filter configuration delegate</param>
            <param name="metadataFactory">Message metadata factory. If omitted, the default one will be used.</param>
        </member>
        <member name="M:MassTransit.BindConfigurationExtensions.UseBind``1(MassTransit.IPipeConfigurator{``0},System.Action{MassTransit.IBindConfigurator{``0}})">
            <summary>
            Adds a filter to the pipe which is of a different type than the native pipe context type
            </summary>
            <typeparam name="TLeft">The context type</typeparam>
            <param name="configurator">The pipe configurator</param>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.CircuitBreakerConfigurationExtensions.UseCircuitBreaker``1(MassTransit.IPipeConfigurator{``0},System.Action{MassTransit.ICircuitBreakerConfigurator{``0}})">
            <summary>
            Puts a circuit breaker in the pipe, which can automatically prevent the flow of messages to the consumer
            when the circuit breaker is opened.
            </summary>
            <typeparam name="T">The pipe context type</typeparam>
            <param name="configurator"></param>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.ConcurrencyLimitConfigurationExtensions.UseConcurrencyLimit``1(MassTransit.IPipeConfigurator{``0},System.Int32,MassTransit.Middleware.IPipeRouter)">
            <summary>
            Specify a concurrency limit for tasks executing through the filter. No more than the specified
            number of tasks will be allowed to execute concurrently.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configurator"></param>
            <param name="concurrencyLimit">The concurrency limit for the subsequent filters in the pipeline</param>
            <param name="router">A control pipe to support runtime adjustment</param>
        </member>
        <member name="M:MassTransit.ConcurrencyLimitConfigurationExtensions.UseConcurrencyLimit(MassTransit.IConsumePipeConfigurator,System.Int32)">
            <summary>
            Limits the number of concurrent messages consumed on the receive endpoint, regardless of message type.
            </summary>
            <param name="configurator"></param>
            <param name="concurrentMessageLimit">The concurrency limit for the subsequent filters in the pipeline</param>
        </member>
        <member name="M:MassTransit.ConcurrencyLimitConfigurationExtensions.UseConcurrencyLimit(MassTransit.IConsumePipeConfigurator,System.Int32,MassTransit.IReceiveEndpointConfigurator,System.String)">
            <summary>
            Limits the number of concurrent messages consumed on the receive endpoint, regardless of message type.
            </summary>
            <param name="configurator"></param>
            <param name="concurrentMessageLimit">The concurrency limit for the subsequent filters in the pipeline</param>
            <param name="managementEndpointConfigurator">A management endpoint configurator to support runtime adjustment</param>
            <param name="id">An identifier for the concurrency limit to allow selective adjustment</param>
        </member>
        <member name="M:MassTransit.ConcurrentMessageLimitExtensions.UseConcurrentMessageLimit``1(MassTransit.IConsumerConfigurator{``0},System.Int32)">
            <summary>
            Limits the number of concurrent messages consumed by the consumer, regardless of message type.
            </summary>
            <param name="configurator"></param>
            <param name="concurrentMessageLimit">The concurrent message limit for all message types for the consumer</param>
        </member>
        <member name="M:MassTransit.ConcurrentMessageLimitExtensions.UseConcurrentMessageLimit``1(MassTransit.IConsumerConfigurator{``0},System.Int32,MassTransit.IReceiveEndpointConfigurator,System.String)">
            <summary>
            Limits the number of concurrent messages consumed by the consumer, regardless of message type.
            </summary>
            <param name="configurator"></param>
            <param name="concurrentMessageLimit">The concurrent message limit for all message types for the consumer</param>
            <param name="managementEndpointConfigurator">A management endpoint configurator to support runtime adjustment</param>
            <param name="id">An identifier for the concurrency limit to allow selective adjustment</param>
        </member>
        <member name="M:MassTransit.ConcurrentMessageLimitExtensions.UseConcurrentMessageLimit``1(MassTransit.ISagaConfigurator{``0},System.Int32)">
            <summary>
            Limits the number of concurrent messages consumed by the saga, regardless of message type.
            </summary>
            <param name="configurator"></param>
            <param name="concurrentMessageLimit">The concurrent message limit for all message types for the saga</param>
        </member>
        <member name="M:MassTransit.ConcurrentMessageLimitExtensions.UseConcurrentMessageLimit``1(MassTransit.ISagaConfigurator{``0},System.Int32,MassTransit.IReceiveEndpointConfigurator,System.String)">
            <summary>
            Limits the number of concurrent messages consumed by the saga, regardless of message type.
            </summary>
            <param name="configurator"></param>
            <param name="concurrentMessageLimit">The concurrent message limit for all message types for the saga</param>
            <param name="managementEndpointConfigurator">A management endpoint configurator to support runtime adjustment</param>
            <param name="id">An identifier for the concurrency limit to allow selective adjustment</param>
        </member>
        <member name="M:MassTransit.ConcurrentMessageLimitExtensions.UseConcurrentMessageLimit``1(MassTransit.IHandlerConfigurator{``0},System.Int32)">
            <summary>
            Limits the number of concurrent messages consumed by the handler.
            </summary>
            <param name="configurator"></param>
            <param name="concurrentMessageLimit">The concurrent message limit for the handler message type</param>
        </member>
        <member name="M:MassTransit.ConcurrentMessageLimitExtensions.UseConcurrentMessageLimit``1(MassTransit.IHandlerConfigurator{``0},System.Int32,MassTransit.IReceiveEndpointConfigurator,System.String)">
            <summary>
            Limits the number of concurrent messages consumed by the handler.
            </summary>
            <param name="configurator"></param>
            <param name="concurrentMessageLimit">The concurrent message limit for the handler message type</param>
            <param name="managementEndpointConfigurator">A management endpoint configurator to support runtime adjustment</param>
            <param name="id">An identifier for the concurrency limit to allow selective adjustment</param>
        </member>
        <member name="M:MassTransit.ConcurrentMessageLimitExtensions.UseConcurrentMessageLimit``1(MassTransit.IPipeConfigurator{MassTransit.ConsumeContext{``0}},System.Int32)">
            <summary>
            Limits the number of concurrent messages consumed for the specified message type.
            </summary>
            <param name="configurator"></param>
            <param name="concurrentMessageLimit">The concurrent message limit for the message type</param>
        </member>
        <member name="M:MassTransit.ConcurrentMessageLimitExtensions.UseConcurrentMessageLimit``1(MassTransit.IPipeConfigurator{MassTransit.ConsumeContext{``0}},System.Int32,MassTransit.IReceiveEndpointConfigurator,System.String)">
            <summary>
            Limits the number of concurrent messages consumed for the specified message type.
            </summary>
            <param name="configurator"></param>
            <param name="concurrentMessageLimit">The concurrent message limit for the message type</param>
            <param name="managementEndpointConfigurator">A management endpoint configurator to support runtime adjustment</param>
            <param name="id">An identifier for the concurrency limit to allow selective adjustment</param>
        </member>
        <member name="T:MassTransit.Configuration.ConcurrencyLimitPipeSpecification`1">
            <summary>
            Configures a concurrency limit on the pipe. If the management endpoint is specified,
            the consumer and appropriate mediator is created to handle the adjustment of the limit.
            </summary>
            <typeparam name="T">The message type being limited</typeparam>
        </member>
        <member name="T:MassTransit.Configuration.ConcurrencyLimitConfigurationObserver">
            <summary>
            Adds a concurrency limit filter for each message type configured on the consume pipe
            </summary>
        </member>
        <member name="T:MassTransit.Configuration.ConcurrencyLimitConsumePipeSpecification`1">
            <summary>
            Adds a concurrency limit filter to the message pipe.
            </summary>
            <typeparam name="T">The message type</typeparam>
        </member>
        <member name="T:MassTransit.Configuration.ConcurrencyLimitConsumerConfigurationObserver`1">
            <summary>
            Configures a concurrency limit for a consumer, on the consumer configurator, which is constrained to
            the message types for that consumer, and only applies to the consumer prior to the consumer factory.
            </summary>
            <typeparam name="TConsumer">The consumer type</typeparam>
        </member>
        <member name="T:MassTransit.Configuration.ConcurrencyLimitHandlerConfigurationObserver">
            <summary>
            Configures a concurrency limit for a handler, on the handler configurator, which is constrained to
            the message type for that handler, and only applies to the handler.
            </summary>
        </member>
        <member name="T:MassTransit.Configuration.ConcurrencyLimitSagaConfigurationObserver`1">
            <summary>
            Configures a concurrency limit for a consumer, on the consumer configurator, which is constrained to
            the message types for that consumer, and only applies to the consumer prior to the consumer factory.
            </summary>
            <typeparam name="TSaga">The consumer type</typeparam>
        </member>
        <member name="T:MassTransit.Configuration.ConfigurationObserver">
            <summary>
            Combines the separate configuration observers into a single observer that is for each message type, called once, to configure each
            message pipeline only once. Only outputs the individual message events for configuring the pipeline.
            </summary>
        </member>
        <member name="T:MassTransit.Configuration.ForkPipeSpecification`1">
            <summary>
            Adds a fork to the pipe
            </summary>
            <typeparam name="TContext"></typeparam>
        </member>
        <member name="T:MassTransit.Configuration.IBusConfiguration">
            <summary>
            The configuration of a bus
            </summary>
        </member>
        <member name="P:MassTransit.Configuration.IHostConfiguration.DeployTopologyOnly">
            <summary>
            If true, only the broker topology will be deployed
            </summary>
        </member>
        <member name="P:MassTransit.Configuration.IHostConfiguration.DeployPublishTopology">
            <summary>
            If true, the publish topology will be deployed at startup
            </summary>
        </member>
        <member name="M:MassTransit.Configuration.IHostConfiguration.CreateReceiveEndpointConfiguration(System.String,System.Action{MassTransit.IReceiveEndpointConfigurator})">
            <summary>
            Create a receive endpoint configuration
            </summary>
            <param name="queueName"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Configuration.IHostConfiguration.ConnectReceiveEndpointContext(MassTransit.Transports.ReceiveEndpointContext)">
            <summary>
            Called by the base ReceiveEndpointContext constructor so that the observer collections are connected to the bus observer
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Configuration.IMessageDataRepositorySelector">
            <summary>
            Use one of the selector extension methods to create a <see cref="T:MassTransit.IMessageDataRepository" /> instance for the
            selected repository implementation.
            </summary>
        </member>
        <member name="T:MassTransit.Configuration.InlineFilterPipeSpecification`1">
            <summary>
            Adds an arbitrary filter to the pipe
            </summary>
            <typeparam name="TContext"></typeparam>
        </member>
        <member name="T:MassTransit.Configuration.InMemoryOutboxHandlerConfigurationObserver">
            <summary>
            Configures a message retry for a handler, on the handler configurator, which is constrained to
            the message types for that handler, and only applies to the handler.
            </summary>
        </member>
        <member name="T:MassTransit.Configuration.InterceptPipeSpecification`1">
            <summary>
            Adds a fork to the pipe
            </summary>
            <typeparam name="TContext"></typeparam>
        </member>
        <member name="P:MassTransit.Configuration.IReceiveEndpointConfiguration.DependenciesReady">
            <summary>
            Completed once the receive endpoint dependencies are ready
            </summary>
        </member>
        <member name="P:MassTransit.Configuration.IReceiveEndpointConfiguration.DependentsCompleted">
            <summary>
            Completed once the receive endpoint dependents are completed
            </summary>
        </member>
        <member name="M:MassTransit.Configuration.IReceiveEndpointConfiguration.CreateReceivePipe">
            <summary>
            Create the receive pipe, using the endpoint configuration
            </summary>
            <returns></returns>
        </member>
        <member name="P:MassTransit.Configuration.ISerializationConfiguration.DefaultContentType">
            <summary>
            When deserializing a message, if no ContentType is present on the receive context, use this as the default
            </summary>
        </member>
        <member name="P:MassTransit.Configuration.ISerializationConfiguration.SerializerContentType">
            <summary>
            When serializing a message, the content type of the serializer to use
            </summary>
        </member>
        <member name="M:MassTransit.Configuration.ISerializationConfiguration.Clear">
            <summary>
            Clear the configuration, removing all deserializers, serializers, and breaking the
            linkage to the bus serialization configuration.
            </summary>
        </member>
        <member name="M:MassTransit.Configuration.ISerializationConfiguration.CreateSerializerCollection">
            <summary>
            Compiles the configured serializers into a collection for use by the receive endpoint
            </summary>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Configuration.LatestPipeSpecification`1">
            <summary>
            Configures the Latest filter
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MassTransit.Configuration.DelayedRedeliveryConsumerConfigurationObserver`1">
            <summary>
            Configures scheduled message redelivery for a consumer, on the consumer configurator, which is constrained to
            the message types for that consumer, and only applies to the consumer prior to the consumer factory.
            </summary>
            <typeparam name="TConsumer">The consumer type</typeparam>
        </member>
        <member name="T:MassTransit.Configuration.DelayedRedeliveryHandlerConfigurationObserver">
            <summary>
            Configures a message retry for a handler, on the handler configurator, which is constrained to
            the message types for that handler, and only applies to the handler.
            </summary>
        </member>
        <member name="T:MassTransit.Configuration.DelayedRedeliverySagaConfigurationObserver`1">
            <summary>
            Configures scheduled message redelivery for a saga, on the saga configurator, which is constrained to
            the message types for that saga, and only applies to the saga prior to the saga repository.
            </summary>
            <typeparam name="TSaga">The saga type</typeparam>
        </member>
        <member name="T:MassTransit.Configuration.ScheduledRedeliveryConsumerConfigurationObserver`1">
            <summary>
            Configures scheduled message redelivery for a consumer, on the consumer configurator, which is constrained to
            the message types for that consumer, and only applies to the consumer prior to the consumer factory.
            </summary>
            <typeparam name="TConsumer">The consumer type</typeparam>
        </member>
        <member name="T:MassTransit.Configuration.ScheduledRedeliveryHandlerConfigurationObserver">
            <summary>
            Configures a message retry for a handler, on the handler configurator, which is constrained to
            the message types for that handler, and only applies to the handler.
            </summary>
        </member>
        <member name="T:MassTransit.Configuration.ScheduledRedeliverySagaConfigurationObserver`1">
            <summary>
            Configures scheduled message redelivery for a saga, on the saga configurator, which is constrained to
            the message types for that saga, and only applies to the saga prior to the saga repository.
            </summary>
            <typeparam name="TSaga">The saga type</typeparam>
        </member>
        <member name="T:MassTransit.Configuration.MessageRetryConsumerConfigurationObserver`1">
            <summary>
            Configures a message retry for a consumer, on the consumer configurator, which is constrained to
            the message types for that consumer, and only applies to the consumer prior to the consumer factory.
            </summary>
            <typeparam name="TConsumer">The consumer type</typeparam>
        </member>
        <member name="T:MassTransit.Configuration.MessageRetryHandlerConfigurationObserver">
            <summary>
            Configures a message retry for a handler, on the handler configurator, which is constrained to
            the message types for that handler, and only applies to the handler.
            </summary>
        </member>
        <member name="T:MassTransit.Configuration.MessageRetrySagaConfigurationObserver`1">
            <summary>
            Configures a message retry for a saga, on the saga configurator, which is constrained to
            the message types for that saga, and only applies to the saga prior to the saga repository.
            </summary>
            <typeparam name="TSaga">The saga type</typeparam>
        </member>
        <member name="T:MassTransit.Configuration.BatchConsumerMessageSpecification`2">
            <summary>
            Configures the pipe for a consumer/message combination within a consumer configuration
            block. Does not add any handlers to the message pipe standalone, everything is within
            the consumer pipe segment.
            </summary>
            <typeparam name="TConsumer"></typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Configuration.ConsumerMessageSpecification`2">
            <summary>
            Configures the pipe for a consumer/message combination within a consumer configuration
            block. Does not add any handlers to the message pipe standalone, everything is within
            the consumer pipe segment.
            </summary>
            <typeparam name="TConsumer"></typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Configuration.AsyncConsumerMessageConvention`1">
            <summary>
            A default convention that looks for IConsumerOfT message types
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MassTransit.Configuration.BatchConsumerInterfaceType">
            <summary>
            A batch consumer
            </summary>
        </member>
        <member name="T:MassTransit.Configuration.BatchConsumerMessageConvention`1">
            <summary>
            A convention that looks for IConsumerOfBatchOfT message types
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MassTransit.Configuration.ConsumerConventionCache.GetConventions``1">
            <summary>
            Returns the conventions registered for identifying message consumer types
            </summary>
            <typeparam name="T">The consumer type</typeparam>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Configuration.ConsumerInterfaceType">
            <summary>
            A standard asynchronous consumer message type, defined by IConsumer
            </summary>
        </member>
        <member name="T:MassTransit.Configuration.IConsumerConvention">
            <summary>
            A consumer convention is used to find message types inside a consumer class.
            </summary>
        </member>
        <member name="M:MassTransit.Configuration.IConsumerConvention.GetConsumerMessageConvention``1">
            <summary>
            Returns the message convention for the type of T
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Configuration.IConsumerMessageConvention">
            <summary>
            A convention that returns connectors for message types that are defined in the consumer
            type.
            </summary>
        </member>
        <member name="M:MassTransit.Configuration.IConsumerMessageConvention.GetMessageTypes">
            <summary>
            Returns the message types handled by the consumer class
            </summary>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Configuration.JobInterfaceType">
            <summary>
            A job consumer
            </summary>
        </member>
        <member name="T:MassTransit.Configuration.HandlerConfigurator`1">
            <summary>
            Connects a handler to the inbound pipe of the receive endpoint
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Configuration.HandlerConnector`1">
            <summary>
            Connects a message handler to a pipe
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Configuration.HandlerPipeSpecification`1">
            <summary>
            Adds a message handler to the consuming pipe builder
            </summary>
            <typeparam name="T">The message type</typeparam>
        </member>
        <member name="T:MassTransit.Configuration.IConsumerConnector">
            <summary>
            Interface implemented by objects that tie an inbound pipeline together with
            consumers (by means of calling a consumer factory).
            </summary>
        </member>
        <member name="M:MassTransit.Configuration.IConsumerMessageSpecification`2.BuildMessagePipe(System.Action{MassTransit.IPipeConfigurator{MassTransit.ConsumeContext{`1}}})">
            <summary>
            Configure the message pipe as it is built. Any previously configured filters will precede
            the configuration applied by the <paramref name="configure" /> callback.
            </summary>
            <param name="configure">Configure the message pipe</param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Configuration.IConsumerSpecification`1">
            <summary>
            A consumer specification, that can be modified
            </summary>
            <typeparam name="TConsumer"></typeparam>
        </member>
        <member name="M:MassTransit.Configuration.IConsumerSpecification`1.ConfigureMessagePipe``1(MassTransit.IPipeConfigurator{MassTransit.ConsumeContext{``0}})">
            <summary>
            Apply any consumer-wide configurations to the message pipe, such as concurrency limit, etc.
            </summary>
            <param name="pipeConfigurator"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MassTransit.Configuration.IHandlerConnector`1">
            <summary>
            Connects a message handler to the ConsumePipe
            </summary>
            <typeparam name="T">The message type</typeparam>
        </member>
        <member name="M:MassTransit.Configuration.IHandlerConnector`1.ConnectHandler(MassTransit.IConsumePipeConnector,MassTransit.MessageHandler{`0},MassTransit.Configuration.IBuildPipeConfigurator{MassTransit.ConsumeContext{`0}})">
            <summary>
            Connect a message handler for all messages of type T
            </summary>
        </member>
        <member name="M:MassTransit.Configuration.IHandlerConnector`1.ConnectRequestHandler(MassTransit.IRequestPipeConnector,System.Guid,MassTransit.MessageHandler{`0},MassTransit.Configuration.IBuildPipeConfigurator{MassTransit.ConsumeContext{`0}})">
            <summary>
            Connect a message handler for messages with the specified RequestId
            </summary>
        </member>
        <member name="T:MassTransit.Configuration.InstanceEndpointDefinition">
            <summary>
            Instance-specific address for a service endpoint
            </summary>
        </member>
        <member name="T:MassTransit.Configuration.InstanceMessageConnector`2">
            <summary>
            Connects a consumer instance to the inbound pipeline for the specified message type. The actual
            filter that invokes the consume method is passed to allow different types of message bindings,
            including the legacy bindings from v2.x
            </summary>
            <typeparam name="TConsumer">The consumer type</typeparam>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="M:MassTransit.Configuration.InstanceMessageConnector`2.#ctor(MassTransit.IFilter{MassTransit.ConsumerConsumeContext{`0,`1}})">
            <summary>
            Constructs the instance connector
            </summary>
            <param name="consumeFilter">The consume method invocation filter</param>
        </member>
        <member name="T:MassTransit.Configuration.IObserverConnector`1">
            <summary>
            Connects a message handler to the ConsumePipe
            </summary>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="M:MassTransit.Configuration.IObserverConnector`1.ConnectObserver(MassTransit.IConsumePipeConnector,System.IObserver{MassTransit.ConsumeContext{`0}},MassTransit.IFilter{MassTransit.ConsumeContext{`0}}[])">
            <summary>
            Connect a message handler for all messages of type T
            </summary>
            <param name="consumePipe"></param>
            <param name="observer"></param>
            <param name="filters"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Configuration.IObserverConnector`1.ConnectRequestObserver(MassTransit.IRequestPipeConnector,System.Guid,System.IObserver{MassTransit.ConsumeContext{`0}},MassTransit.IFilter{MassTransit.ConsumeContext{`0}}[])">
            <summary>
            Connect a message handler for messages with the specified RequestId
            </summary>
            <param name="consumePipe"></param>
            <param name="requestId"></param>
            <param name="observer"></param>
            <param name="filters"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Configuration.MessageObserverConnector`1">
            <summary>
            Connects a message handler to a pipe
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Configuration.ObserverPipeSpecification`1">
            <summary>
            Adds a message handler to the consuming pipe builder
            </summary>
            <typeparam name="T">The message type</typeparam>
        </member>
        <member name="T:MassTransit.Configuration.DefaultConsumerDefinition`1">
            <summary>
            A default consumer definition, used if no definition is found for the consumer type
            </summary>
            <typeparam name="TConsumer"></typeparam>
        </member>
        <member name="T:MassTransit.Configuration.DefaultEndpointDefinition">
            <summary>
            Base/Default endpoint definition, not used apparently
            </summary>
        </member>
        <member name="T:MassTransit.Configuration.IActivityRegistration">
            <summary>
            An activity, which must be configured on two separate receive endpoints
            </summary>
        </member>
        <member name="M:MassTransit.Configuration.IContainerRegistrar.GetOrAdd``1(System.Type,System.Func{System.Type,``0})">
            <summary>
            Gets or adds a registration from the service collection
            </summary>
            <param name="type"></param>
            <param name="missingRegistrationFactory"></param>
            <typeparam name="T">The registration type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Configuration.IContainerRegistrar.GetRegistrations``1">
            <summary>
            Returns registrations from the service collection, prior to container construction
            </summary>
            <typeparam name="T">The registration type</typeparam>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Configuration.IContainerSelector">
            <summary>
            Used to pull registrations from the container, scoped to the bus, multi-bus, or mediator
            </summary>
        </member>
        <member name="M:MassTransit.Configuration.IContainerSelector.TryGetValue``1(System.IServiceProvider,System.Type,``0@)">
            <summary>
            Returns the registration from the service provider, if it exists
            </summary>
            <param name="provider">The service provider</param>
            <param name="type">The registration target type (Consumer, Saga, Activity, etc.)</param>
            <param name="value"></param>
            <typeparam name="T">The registration type</typeparam>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Configuration.IExecuteActivityRegistration">
            <summary>
            An execute activity, which doesn't have compensation
            </summary>
        </member>
        <member name="P:MassTransit.Configuration.IHealthCheckOptions.Name">
            <summary>
            Set the health check name, overrides the default bus type name
            </summary>
        </member>
        <member name="P:MassTransit.Configuration.IHealthCheckOptions.FailureStatus">
            <summary>
            The <see cref="T:Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus" /> that should be reported when the health check fails.
            If null then the default status of <see cref="F:Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus.Unhealthy" /> will be reported.
            </summary>
        </member>
        <member name="P:MassTransit.Configuration.IHealthCheckOptions.Tags">
            <summary>
            A list of tags that can be used to filter sets of health checks
            </summary>
        </member>
        <member name="M:MassTransit.Configuration.ISagaRepositoryDecoratorRegistration`1.DecorateSagaRepository(MassTransit.ISagaRepository{`0})">
            <summary>
            Decorate the container-based saga repository, returning the saga repository that should be
            used for receive endpoint registration
            </summary>
            <param name="repository"></param>
            <returns></returns>
        </member>
        <member name="P:MassTransit.Configuration.MassTransitHealthCheckOptions`1.Name">
            <summary>
            The health check name. If null the type name of bus instance will be used
            </summary>
        </member>
        <member name="P:MassTransit.Configuration.MassTransitHealthCheckOptions`1.FailureStatus">
            <summary>
            The <see cref="T:Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus" /> that should be reported when the health check fails.
            If null then the default status of <see cref="F:Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus.Unhealthy" /> will be reported.
            </summary>
        </member>
        <member name="P:MassTransit.Configuration.MassTransitHealthCheckOptions`1.Tags">
            <summary>
            A list of tags that can be used to filter sets of health checks. If empty, the default tags
            will be used.
            </summary>
        </member>
        <member name="T:MassTransit.Configuration.RegistrationConfigurator">
            <summary>
            Used for registration of consumers and sagas
            </summary>
        </member>
        <member name="T:MassTransit.Configuration.ConstructorSagaInstanceFactory`1">
            <summary>
            Creates a saga instance using the constructor, via a compiled expression. This class
            is built asynchronously and hot-wrapped to replace the basic Activator style.
            </summary>
            <typeparam name="TSaga"></typeparam>
        </member>
        <member name="T:MassTransit.Configuration.CorrelatedSagaMessageConnector`2">
            <summary>
            Connects a message that has an exact CorrelationId to the saga instance
            to the saga repository.
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Configuration.DefaultSagaFactory`2">
            <summary>
            Creates a saga instance using the default factory method
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:MassTransit.Configuration.ISagaMessageSpecification`2.BuildConsumerPipe(MassTransit.IFilter{MassTransit.SagaConsumeContext{`0,`1}})">
            <summary>
            Build the consumer pipe, using the consume filter specified.
            </summary>
            <param name="consumeFilter"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Configuration.ISagaMessageSpecification`2.BuildMessagePipe(System.Action{MassTransit.IPipeConfigurator{MassTransit.ConsumeContext{`1}}})">
            <summary>
            Configure the message pipe as it is built. Any previously configured filters will precede
            the configuration applied by the <paramref name="configure" /> callback.
            </summary>
            <param name="configure">Configure the message pipe</param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Configuration.ISagaSpecification`1">
            <summary>
            A consumer specification, that can be modified
            </summary>
            <typeparam name="TSaga"></typeparam>
        </member>
        <member name="M:MassTransit.Configuration.ISagaSpecification`1.ConfigureMessagePipe``1(MassTransit.IPipeConfigurator{MassTransit.ConsumeContext{``0}})">
            <summary>
            Apply any saga-wide configurations to the message pipe, such as concurrency limit, etc.
            </summary>
            <param name="pipeConfigurator"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MassTransit.Configuration.PropertySagaInstanceFactory`1">
            <summary>
            Creates a saga instance using the constructor, via a compiled expression. This class
            is built asynchronously and hot-wrapped to replace the basic Activator style.
            </summary>
            <typeparam name="TSaga"></typeparam>
        </member>
        <member name="T:MassTransit.Configuration.SagaConnectorCache`1">
            <summary>
            Caches the saga connectors for the saga
            </summary>
            <typeparam name="TSaga">The saga type</typeparam>
        </member>
        <member name="M:MassTransit.Configuration.SagaMessageConnector`2.ConfigureMessagePipe(MassTransit.IPipeConfigurator{MassTransit.ConsumeContext{`1}},MassTransit.ISagaRepository{`0},MassTransit.IPipe{MassTransit.SagaConsumeContext{`0,`1}})">
            <summary>
            Configure the message pipe that is prior to the saga repository
            </summary>
            <param name="configurator">The pipe configurator</param>
            <param name="repository"></param>
            <param name="sagaPipe"></param>
        </member>
        <member name="T:MassTransit.Configuration.SagaMessageSpecification`2">
            <summary>
            Configures the pipe for a Saga/message combination within a Saga configuration
            block. Does not add any handlers to the message pipe standalone, everything is within
            the Saga pipe segment.
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:MassTransit.Configuration.SagaMetadataCache`1.GenerateFactoryMethodAsynchronously">
            <summary>
            Creates a task to generate a compiled saga factory method that is faster than the
            regular Activator, but doing this asynchronously ensures we don't slow down startup
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Configuration.SagaMetadataCache`1.GeneratePropertyFactoryMethodAsynchronously">
            <summary>
            Creates a task to generate a compiled saga factory method that is faster than the
            regular Activator, but doing this asynchronously ensures we don't slow down startup
            </summary>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Configuration.CorrelationIdSendTopologyConvention">
            <summary>
            Looks for a property that can be used as a CorrelationId message header, and
            applies a filter to set it on message send if available
            </summary>
        </member>
        <member name="M:MassTransit.Configuration.ICorrelationIdMessageSendTopologyConvention`1.TryGetMessageCorrelationId(MassTransit.IMessageCorrelationId{`0}@)">
            <summary>
            Tries to get the message correlation id
            </summary>
            <param name="messageCorrelationId"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Configuration.ITopologyConventionCache`1">
            <summary>
            A convention cache for type specified, which converts to the generic type requested
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MassTransit.Configuration.ITopologyConventionCache`1.GetOrAdd``2">
            <summary>
            Returns the cached item for the specified type key, creating a new value
            if one has not yet been created.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ConsumerPipeConfiguratorExtensions.UseFilter``2(MassTransit.IPipeConfigurator{MassTransit.ConsumerConsumeContext{``0,``1}},MassTransit.IFilter{MassTransit.ConsumerConsumeContext{``0}})">
            <summary>
            Adds a filter to the pipe
            </summary>
            <typeparam name="T">The context type</typeparam>
            <typeparam name="TConsumer"></typeparam>
            <param name="configurator">The pipe configurator</param>
            <param name="filter">The already built pipe</param>
        </member>
        <member name="M:MassTransit.ContextFilterConfigurationExtensions.UseContextFilter``1(MassTransit.IPipeConfigurator{``0},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Adds a content filter that uses a delegate to filter the context and only accept messages
            which pass the filter specification.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configurator"></param>
            <param name="filter">A filter method that returns true to accept the message, or false to discard it</param>
        </member>
        <member name="M:MassTransit.CorrelationIdConventionExtensions.UseCorrelationId``1(MassTransit.IMessageSendTopologyConfigurator{``0},System.Func{``0,System.Guid})">
            <summary>
            Specify for the message type that the delegate be used for setting the CorrelationId
            property of the message envelope.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configurator"></param>
            <param name="correlationIdSelector"></param>
        </member>
        <member name="M:MassTransit.CorrelationIdConventionExtensions.UseCorrelationId``1(MassTransit.IMessageSendTopologyConfigurator{``0},System.Func{``0,System.Nullable{System.Guid}})">
            <summary>
            Specify for the message type that the delegate be used for setting the CorrelationId
            property of the message envelope.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configurator"></param>
            <param name="correlationIdSelector"></param>
        </member>
        <member name="M:MassTransit.CorrelationIdConventionExtensions.UseCorrelationId``1(MassTransit.ISendTopology,System.Func{``0,System.Guid})">
            <summary>
            Specify for the message type that the delegate be used for setting the CorrelationId
            property of the message envelope.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configurator"></param>
            <param name="correlationIdSelector"></param>
        </member>
        <member name="M:MassTransit.CorrelationIdConventionExtensions.UseCorrelationId``1(MassTransit.ISendTopology,System.Func{``0,System.Nullable{System.Guid}})">
            <summary>
            Specify for the message type that the delegate be used for setting the CorrelationId
            property of the message envelope.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configurator"></param>
            <param name="correlationIdSelector"></param>
        </member>
        <member name="M:MassTransit.DeadLetterExtensions.UseDeadLetter(MassTransit.IPipeConfigurator{MassTransit.ReceiveContext},MassTransit.IPipe{MassTransit.ReceiveContext})">
            <summary>
            Rescue exceptions via the alternate pipe
            </summary>
            <param name="configurator"></param>
            <param name="rescuePipe"></param>
        </member>
        <member name="T:MassTransit.DefaultEndpointNameFormatter">
            <summary>
            The default endpoint name formatter, which simply trims the words Consumer, Activity, and Saga
            from the type name. If you need something more readable, consider the <see cref="T:MassTransit.SnakeCaseEndpointNameFormatter" />
            or the <see cref="T:MassTransit.KebabCaseEndpointNameFormatter" />.
            </summary>
        </member>
        <member name="P:MassTransit.DefaultEndpointNameFormatter.IncludeNamespace">
            <summary>
            Gets a value indicating whether the namespace is included in the name.
            </summary>
        </member>
        <member name="P:MassTransit.DefaultEndpointNameFormatter.Prefix">
            <summary>
            Gets the Prefix to start the name.
            </summary>
        </member>
        <member name="P:MassTransit.DefaultEndpointNameFormatter.JoinSeparator">
            <summary>
            Gets the join separator between the words
            </summary>
        </member>
        <member name="M:MassTransit.DefaultEndpointNameFormatter.#ctor(System.Boolean)">
            <summary>
            Default endpoint name formatter.
            </summary>
            <param name="includeNamespace">If true, the namespace is included in the name</param>
        </member>
        <member name="M:MassTransit.DefaultEndpointNameFormatter.#ctor(System.String,System.Boolean)">
            <summary>
            Default endpoint name formatter with prefix.
            </summary>
            <param name="prefix">Prefix to start the name, should match the casing of the formatter (such as Dev or PreProd)</param>
            <param name="includeNamespace">If true, the namespace is included in the name</param>
        </member>
        <member name="M:MassTransit.DefaultEndpointNameFormatter.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Default endpoint name formatter with join separator and prefix.
            </summary>
            <param name="joinSeparator">Define the join separator between the words</param>
            <param name="prefix">Prefix to start the name, should match the casing of the formatter (such as Dev or PreProd)</param>
            <param name="includeNamespace">If true, the namespace is included in the name</param>
        </member>
        <member name="M:MassTransit.DefaultEndpointNameFormatter.GetConsumerName(System.Type)">
            <summary>
            Gets the endpoint name for a consumer of the given type.
            </summary>
            <param name="type">The type of the consumer implementing <see cref="T:MassTransit.IConsumer"/></param>
            <returns>The fully formatted name as it will be provided via <see cref="M:MassTransit.DefaultEndpointNameFormatter.Consumer``1"/></returns>
        </member>
        <member name="M:MassTransit.DefaultEndpointNameFormatter.GetMessageName(System.Type)">
            <summary>
            Gets the endpoint name for a message of the given type.
            </summary>
            <param name="type">The type of the message</param>
            <returns>The fully formatted name as it will be provided via <see cref="M:MassTransit.DefaultEndpointNameFormatter.Message``1"/></returns>
        </member>
        <member name="M:MassTransit.DefaultEndpointNameFormatter.GetSagaName(System.Type)">
            <summary>
            Gets the endpoint name for a saga of the given type.
            </summary>
            <param name="type">The type of the saga implementing <see cref="T:MassTransit.ISaga"/></param>
            <returns>The fully formatted name as it will be provided via <see cref="M:MassTransit.DefaultEndpointNameFormatter.Saga``1"/></returns>
        </member>
        <member name="M:MassTransit.DefaultEndpointNameFormatter.GetActivityName(System.Type,System.Type)">
            <summary>
            Gets the name for an activity of the given type.
            </summary>
            <remarks>
            The activity name is used both for execution and compensation endpoint names.
            </remarks>
            <param name="activityType">The type of the activity implementing <see cref="T:MassTransit.IActivity"/></param>
            <param name="argumentType">
            For execution endpoints this is the activity arguments, for compensation this is the log type.
            </param>
            <returns>The formatted activity name further used in <see cref="M:MassTransit.DefaultEndpointNameFormatter.ExecuteActivity``2"/> and <see cref="M:MassTransit.DefaultEndpointNameFormatter.CompensateActivity``2"/>.</returns>
        </member>
        <member name="M:MassTransit.DefaultEndpointNameFormatter.FormatName(System.Type)">
            <summary>
            Does a basic formatting of the type respecting settings like <see cref="P:MassTransit.DefaultEndpointNameFormatter.IncludeNamespace"/>.
            </summary>
            <param name="type">The type to format.</param>
            <returns>A formatted type name, not yet sanitized via <see cref="M:MassTransit.DefaultEndpointNameFormatter.SanitizeName(System.String)"/>.</returns>
        </member>
        <member name="M:MassTransit.DelayedMessageSchedulerConfigurationExtensions.UseDelayedMessageScheduler(MassTransit.IBusFactoryConfigurator)">
            <summary>
            Use the built-in transport message delay to schedule messages
            </summary>
            <param name="configurator"></param>
        </member>
        <member name="M:MassTransit.DelayedRedeliveryExtensions.UseDelayedRedelivery``1(MassTransit.IPipeConfigurator{MassTransit.ConsumeContext{``0}},System.Action{MassTransit.IRedeliveryConfigurator})">
            <summary>
            Use the message scheduler to schedule redelivery of a specific message type based upon the retry policy, via
            the delayed exchange feature of ActiveMQ.
            </summary>
            <param name="configurator"></param>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.DelayedRedeliveryExtensions.UseDelayedRedelivery``1(MassTransit.IPipeConfigurator{MassTransit.ConsumeContext{``0}},MassTransit.IRetryPolicy)">
            <summary>
            Use the message scheduler to schedule redelivery of a specific message type based upon the retry policy.
            </summary>
            <param name="configurator"></param>
            <param name="retryPolicy"></param>
        </member>
        <member name="M:MassTransit.DelayedRedeliveryExtensions.UseDelayedRedelivery(MassTransit.IConsumePipeConfigurator,System.Action{MassTransit.IRedeliveryConfigurator})">
            <summary>
            For all configured messages type (handlers, consumers, and sagas), configures delayed redelivery using the retry configuration specified.
            Redelivery is configured once for each message type, and is added prior to the consumer factory or saga repository in the pipeline.
            </summary>
            <param name="configurator"></param>
            <param name="configureRetry"></param>
        </member>
        <member name="M:MassTransit.DelayedRedeliveryExtensions.UseDelayedRedelivery``1(MassTransit.IConsumerConfigurator{``0},System.Action{MassTransit.IRedeliveryConfigurator})">
            <summary>
            Configure scheduled redelivery for the consumer, regardless of message type.
            </summary>
            <param name="configurator"></param>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.DelayedRedeliveryExtensions.UseDelayedRedelivery``1(MassTransit.ISagaConfigurator{``0},System.Action{MassTransit.IRedeliveryConfigurator})">
            <summary>
            Configure scheduled redelivery for the saga, regardless of message type.
            </summary>
            <param name="configurator"></param>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.DelayedRedeliveryExtensions.UseDelayedRedelivery``1(MassTransit.IHandlerConfigurator{``0},System.Action{MassTransit.IRedeliveryConfigurator})">
            <summary>
            Configures the message retry for the handler, regardless of message type.
            </summary>
            <param name="configurator"></param>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.DelayedMessageSchedulerRegistrationExtensions.AddDelayedMessageScheduler(MassTransit.IRegistrationConfigurator)">
            <summary>
            Add a <see cref="T:MassTransit.IMessageScheduler" /> to the container that uses transport message delay to schedule messages
            </summary>
            <param name="configurator"></param>
        </member>
        <member name="M:MassTransit.DependencyInjectionExtensions.UseServiceScope(MassTransit.IConsumePipeConfigurator,System.IServiceProvider)">
            <summary>
            Creates a single scope for the receive endpoint that is used by all consumers, sagas, messages, etc.
            </summary>
            <param name="configurator"></param>
            <param name="serviceProvider"></param>
        </member>
        <member name="M:MassTransit.DependencyInjectionExtensions.UseMessageScope(MassTransit.IConsumePipeConfigurator,System.IServiceProvider)">
            <summary>
            Creates a scope for each message type, compatible with UseMessageRetry and UseInMemoryOutbox
            </summary>
            <param name="configurator"></param>
            <param name="serviceProvider"></param>
        </member>
        <member name="M:MassTransit.DependencyInjectionExtensions.RegisterInMemorySagaRepository``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Register the InMemory saga repository for the specified saga type
            </summary>
            <param name="collection"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MassTransit.DependencyInjectionExtensions.CreateRequestClient``1(System.IServiceProvider,MassTransit.RequestTimeout)">
            <summary>
            Create a request client, using the specified service address, using the <see cref="T:MassTransit.IClientFactory" /> from the container.
            </summary>
            <param name="provider"></param>
            <param name="timeout">The default timeout for requests</param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.DependencyInjectionExtensions.CreateRequestClient``1(System.IServiceProvider,System.Uri,MassTransit.RequestTimeout)">
            <summary>
            Create a request client, using the specified service address, using the <see cref="T:MassTransit.IClientFactory" /> from the container.
            </summary>
            <param name="provider"></param>
            <param name="destinationAddress">The destination service address</param>
            <param name="timeout">The default timeout for requests</param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.DependencyInjectionExtensions.AddGenericRequestClient(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registers a generic request client provider in the container, which will be used for any
            client that is not explicitly registered using AddRequestClient.
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:MassTransit.DependencyInjectionFilterExtensions.UseConsumeFilter(MassTransit.IConsumePipeConfigurator,System.Type,System.IServiceProvider)">
            <summary>
            Use scoped filter for <see cref="T:MassTransit.ConsumeContext`1" />
            </summary>
            <param name="configurator"></param>
            <param name="filterType">Filter type</param>
            <param name="provider">Configuration service provider</param>
        </member>
        <member name="M:MassTransit.DependencyInjectionFilterExtensions.UseConsumeFilter(MassTransit.IConsumePipeConfigurator,System.Type,System.IServiceProvider,System.Action{MassTransit.IMessageTypeFilterConfigurator})">
            <summary>
            Use scoped filter for <see cref="T:MassTransit.ConsumeContext`1" />
            </summary>
            <param name="configurator"></param>
            <param name="filterType">Filter type</param>
            <param name="provider">Configuration service provider</param>
            <param name="configureMessageTypeFilter">Message type to which apply the filter</param>
        </member>
        <member name="M:MassTransit.DependencyInjectionFilterExtensions.UseConsumeFilter``1(MassTransit.IConsumePipeConfigurator,System.IServiceProvider)">
            <summary>
            Use scoped filter for <see cref="T:MassTransit.ConsumeContext`1" />
            </summary>
            <param name="configurator"></param>
            <param name="provider">Configuration service provider</param>
        </member>
        <member name="M:MassTransit.DependencyInjectionFilterExtensions.UseSendFilter(MassTransit.ISendPipelineConfigurator,System.Type,System.IServiceProvider)">
            <summary>
            Use scoped filter for <see cref="T:MassTransit.SendContext`1" />
            </summary>
            <param name="configurator"></param>
            <param name="filterType">Filter type</param>
            <param name="provider">Configuration service provider</param>
        </member>
        <member name="M:MassTransit.DependencyInjectionFilterExtensions.UseSendFilter(MassTransit.ISendPipelineConfigurator,System.Type,System.IServiceProvider,System.Action{MassTransit.IMessageTypeFilterConfigurator})">
            <summary>
            Use scoped filter for <see cref="T:MassTransit.SendContext`1" />
            </summary>
            <param name="configurator"></param>
            <param name="filterType">Filter type</param>
            <param name="provider">Configuration service provider</param>
            <param name="configureMessageTypeFilter">Message type to which apply the filter</param>
        </member>
        <member name="M:MassTransit.DependencyInjectionFilterExtensions.UseSendFilter``1(MassTransit.ISendPipelineConfigurator,System.IServiceProvider)">
            <summary>
            Use scoped filter for <see cref="T:MassTransit.SendContext`1" />
            </summary>
            <param name="configurator"></param>
            <param name="provider">Configuration service provider</param>
        </member>
        <member name="M:MassTransit.DependencyInjectionFilterExtensions.UsePublishFilter(MassTransit.IPublishPipelineConfigurator,System.Type,System.IServiceProvider)">
            <summary>
            Use scoped filter for <see cref="T:MassTransit.PublishContext`1" />
            </summary>
            <param name="configurator"></param>
            <param name="filterType">Filter type</param>
            <param name="provider">Configuration service provider</param>
        </member>
        <member name="M:MassTransit.DependencyInjectionFilterExtensions.UsePublishFilter(MassTransit.IPublishPipelineConfigurator,System.Type,System.IServiceProvider,System.Action{MassTransit.IMessageTypeFilterConfigurator})">
            <summary>
            Use scoped filter for <see cref="T:MassTransit.PublishContext`1" />
            </summary>
            <param name="configurator"></param>
            <param name="filterType">Filter type</param>
            <param name="provider">Configuration service provider</param>
            <param name="configureMessageTypeFilter">Message type to which apply the filter</param>
        </member>
        <member name="M:MassTransit.DependencyInjectionFilterExtensions.UsePublishFilter``1(MassTransit.IPublishPipelineConfigurator,System.IServiceProvider)">
            <summary>
            Use scoped filter for <see cref="T:MassTransit.PublishContext`1" />
            </summary>
            <param name="configurator"></param>
            <param name="provider">Configuration service provider</param>
        </member>
        <member name="M:MassTransit.DependencyInjectionFilterExtensions.UseExecuteActivityFilter(MassTransit.IConsumePipeConfigurator,System.Type,System.IServiceProvider)">
            <summary>
            Use scoped filter for <see cref="T:MassTransit.ExecuteContext`1" />
            </summary>
            <param name="configurator"></param>
            <param name="filterType">Filter type</param>
            <param name="provider">Configuration service provider</param>
        </member>
        <member name="M:MassTransit.DependencyInjectionFilterExtensions.UseExecuteActivityFilter(MassTransit.IConsumePipeConfigurator,System.Type,System.IServiceProvider,System.Action{MassTransit.IMessageTypeFilterConfigurator})">
            <summary>
            Use scoped filter for <see cref="T:MassTransit.ExecuteContext`1" />
            </summary>
            <param name="configurator"></param>
            <param name="filterType">Filter type</param>
            <param name="provider">Configuration service provider</param>
            <param name="configureMessageTypeFilter">Message type to which apply the filter</param>
        </member>
        <member name="M:MassTransit.DependencyInjectionFilterExtensions.UseExecuteActivityFilter``1(MassTransit.IConsumePipeConfigurator,System.IServiceProvider)">
            <summary>
            Use scoped filter for <see cref="T:MassTransit.ExecuteContext`1" />
            </summary>
            <param name="configurator"></param>
            <param name="provider">Configuration service provider</param>
        </member>
        <member name="M:MassTransit.DependencyInjectionFilterExtensions.UseCompensateActivityFilter(MassTransit.IConsumePipeConfigurator,System.Type,System.IServiceProvider)">
            <summary>
            Use scoped filter for <see cref="T:MassTransit.CompensateContext`1" />
            </summary>
            <param name="configurator"></param>
            <param name="filterType">Filter type</param>
            <param name="provider">Configuration service provider</param>
        </member>
        <member name="M:MassTransit.DependencyInjectionFilterExtensions.UseCompensateActivityFilter(MassTransit.IConsumePipeConfigurator,System.Type,System.IServiceProvider,System.Action{MassTransit.IMessageTypeFilterConfigurator})">
            <summary>
            Use scoped filter for <see cref="T:MassTransit.CompensateContext`1" />
            </summary>
            <param name="configurator"></param>
            <param name="filterType">Filter type</param>
            <param name="provider">Configuration service provider</param>
            <param name="configureMessageTypeFilter">Message type to which apply the filter</param>
        </member>
        <member name="M:MassTransit.DependencyInjectionFilterExtensions.UseCompensateActivityFilter``1(MassTransit.IConsumePipeConfigurator,System.IServiceProvider)">
            <summary>
            Use scoped filter for <see cref="T:MassTransit.CompensateContext`1" />
            </summary>
            <param name="configurator"></param>
            <param name="provider">Configuration service provider</param>
        </member>
        <member name="M:MassTransit.DependencyInjectionHostingExtensions.UseMassTransit(Microsoft.Extensions.Hosting.IHostBuilder,System.Action{Microsoft.Extensions.Hosting.HostBuilderContext,MassTransit.IBusRegistrationConfigurator})">
            <summary>
            Adds MassTransit and its dependencies and allows consumers, sagas, and activities to be configured
            </summary>
            <param name="hostBuilder"></param>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.DependencyInjectionHostingExtensions.UseMassTransit``1(Microsoft.Extensions.Hosting.IHostBuilder,System.Action{Microsoft.Extensions.Hosting.HostBuilderContext,MassTransit.IBusRegistrationConfigurator{``0}})">
            <summary>
            Configure a MassTransit MultiBus instance, using the specified <typeparamref name="TBus" /> bus type, which must inherit directly from <see cref="T:MassTransit.IBus" />.
            A dynamic type will be created to support the bus instance, which will be initialized when the <typeparamref name="TBus" /> type is retrieved
            from the container.
            </summary>
            <param name="hostBuilder"></param>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.DependencyInjectionHostingExtensions.UseMassTransit``2(Microsoft.Extensions.Hosting.IHostBuilder,System.Action{Microsoft.Extensions.Hosting.HostBuilderContext,MassTransit.IBusRegistrationConfigurator{``0}})">
            <summary>
            Configure a MassTransit bus instance, using the specified <typeparamref name="TBus" /> bus type, which must inherit directly from <see cref="T:MassTransit.IBus" />.
            A type that implements <typeparamref name="TBus" /> is required, specified by the <typeparamref name="TBusInstance" /> parameter.
            </summary>
            <param name="hostBuilder"></param>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.DependencyInjectionHostingExtensions.UseMediator(Microsoft.Extensions.Hosting.IHostBuilder,System.Action{Microsoft.Extensions.Hosting.HostBuilderContext,MassTransit.IMediatorRegistrationConfigurator})">
            <summary>
            Adds the MassTransit Mediator to the host, and allows consumers, sagas, and activities (which are not supported
            by the Mediator) to be configured.
            </summary>
            <param name="hostBuilder"></param>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.DependencyInjectionReceiveEndpointExtensions.Consumer``1(MassTransit.IReceiveEndpointConfigurator,System.IServiceProvider,System.Action{MassTransit.IConsumerConfigurator{``0}})">
            <summary>
            Registers a consumer given the lifetime scope specified
            </summary>
            <typeparam name="T">The consumer type</typeparam>
            <param name="configurator">The service bus configurator</param>
            <param name="provider">The LifetimeScope of the provider</param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.DependencyInjectionReceiveEndpointExtensions.Consumer``2(MassTransit.IBatchConfigurator{``1},System.IServiceProvider,System.Action{MassTransit.IConsumerMessageConfigurator{``0,MassTransit.Batch{``1}}})">
            <summary>
            Connect a consumer with a consumer factory method
            </summary>
            <typeparam name="TConsumer"></typeparam>
            <typeparam name="TMessage"></typeparam>
            <param name="configurator"></param>
            <param name="provider"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.DependencyInjectionReceiveEndpointExtensions.ConnectConsumer``1(MassTransit.IConsumePipeConnector,System.IServiceProvider,MassTransit.Configuration.IPipeSpecification{MassTransit.ConsumerConsumeContext{``0}}[])">
            <summary>
            Connect a consumer to the bus/mediator
            </summary>
            <typeparam name="TConsumer"></typeparam>
            <param name="connector"></param>
            <param name="provider"></param>
            <param name="pipeSpecifications"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.DependencyInjectionReceiveEndpointExtensions.Saga``1(MassTransit.IReceiveEndpointConfigurator,System.IServiceProvider,System.Action{MassTransit.ISagaConfigurator{``0}})">
            <summary>
            Registers a saga using the container that has the repository resolved from the container
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configurator"></param>
            <param name="provider"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.DependencyInjectionReceiveEndpointExtensions.StateMachineSaga``1(MassTransit.IReceiveEndpointConfigurator,MassTransit.SagaStateMachine{``0},System.IServiceProvider,System.Action{MassTransit.ISagaConfigurator{``0}})">
            <summary>
            Subscribe a state machine saga to the endpoint
            </summary>
            <typeparam name="TInstance">The state machine instance type</typeparam>
            <param name="configurator"></param>
            <param name="stateMachine"></param>
            <param name="serviceProvider">The Container reference to resolve the repository</param>
            <param name="configure">Optionally configure the saga</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.DependencyInjectionReceiveEndpointExtensions.StateMachineSaga``1(MassTransit.IReceiveEndpointConfigurator,System.IServiceProvider,System.Action{MassTransit.ISagaConfigurator{``0}})">
            <summary>
            Subscribe a state machine saga to the endpoint
            </summary>
            <typeparam name="TInstance">The state machine instance type</typeparam>
            <param name="configurator"></param>
            <param name="provider">The Container reference to resolve the repository</param>
            <param name="configure">Optionally configure the saga</param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.DependencyInjectionRegistrationExtensions">
            <summary>
            Standard registration extensions, which are used to configure consumers, sagas, and activities on receive endpoints from a
            dependency injection container.
            </summary>
        </member>
        <member name="M:MassTransit.DependencyInjectionRegistrationExtensions.AddMassTransit(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{MassTransit.IBusRegistrationConfigurator})">
            <summary>
            Adds MassTransit and its dependencies to the <paramref name="collection" />, and allows consumers, sagas, and activities to be configured
            </summary>
            <param name="collection"></param>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.DependencyInjectionRegistrationExtensions.AddMediator(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{MassTransit.IMediatorRegistrationConfigurator})">
            <summary>
            Adds the MassTransit Mediator to the <paramref name="collection" />, and allows consumers, sagas, and activities (which are not supported
            by the Mediator) to be configured.
            </summary>
            <param name="collection"></param>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.DependencyInjectionRegistrationExtensions.AddMassTransit``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{MassTransit.IBusRegistrationConfigurator{``0}})">
            <summary>
            Configure a MassTransit bus instance, using the specified <typeparamref name="TBus" /> bus type, which must inherit directly from <see cref="T:MassTransit.IBus" />.
            A type that implements <typeparamref name="TBus" /> is required, specified by the <typeparamref name="TBusInstance" /> parameter.
            </summary>
            <param name="collection">The service collection</param>
            <param name="configure">Bus instance configuration method</param>
        </member>
        <member name="M:MassTransit.DependencyInjectionRegistrationExtensions.AddMassTransit``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{MassTransit.IBusRegistrationConfigurator{``0}})">
            <summary>
            Configure a MassTransit MultiBus instance, using the specified <typeparamref name="TBus" /> bus type, which must inherit directly from <see cref="T:MassTransit.IBus" />.
            A dynamic type will be created to support the bus instance, which will be initialized when the <typeparamref name="TBus" /> type is retrieved
            from the container.
            </summary>
            <param name="collection">The service collection</param>
            <param name="configure">Bus instance configuration method</param>
        </member>
        <member name="M:MassTransit.DependencyInjectionRegistrationExtensions.RemoveMassTransitHostedService(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            In some situations, it may be necessary to Remove the MassTransitHostedService from the container, such as
            when using older versions of the Azure Functions runtime.
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.DependencyInjectionRegistrationExtensions.RemoveHostedService``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Remove the specified hosted service from the service collection
            </summary>
            <param name="services"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.DependencyInjectionRegistrationExtensions.ReplaceScoped``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Replace a scoped service registration with a new one
            </summary>
            <typeparam name="TService"></typeparam>
            <typeparam name="TImplementation"></typeparam>
        </member>
        <member name="M:MassTransit.DependencyInjectionTestingExtensions.AddMassTransitTestHarness(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{MassTransit.IBusRegistrationConfigurator})">
            <summary>
            AddMassTransit, including the test harness, to the container.
            To specify a transport, add the appropriate UsingXxx method. If a transport is not specified, the
            default in-memory transport will be used, and ConfigureEndpoints will be called.
            If MassTransit has already been configured, the existing bus configuration will be replaced with an in-memory
            configuration (by default, unless another UsingXxx transport method is specified), and saga repositories are
            replaced with in-memory as well.
            </summary>
        </member>
        <member name="M:MassTransit.DependencyInjectionTestingExtensions.AddMassTransitTestHarness(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.IO.TextWriter,System.Action{MassTransit.IBusRegistrationConfigurator})">
            <summary>
            AddMassTransit, including the test harness, to the container.
            To specify a transport, add the appropriate UsingXxx method. If a transport is not specified, the
            default in-memory transport will be used, and ConfigureEndpoints will be called.
            If MassTransit has already been configured, the existing bus configuration will be replaced with an in-memory
            configuration (by default, unless another UsingXxx transport method is specified), and saga repositories are
            replaced with in-memory as well.
            </summary>
        </member>
        <member name="M:MassTransit.DependencyInjectionTestingExtensions.AddTelemetryListener(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Boolean)">
            <summary>
            Adds a telemetry listener to the test harness, which outputs a timeline view of the unit test
            </summary>
            <param name="services"></param>
            <param name="includeDetails">If true, additional details from each span are shown</param>
        </member>
        <member name="M:MassTransit.DependencyInjectionTestingExtensions.AddTelemetryListener(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.IO.TextWriter,System.Boolean)">
            <summary>
            Adds a telemetry listener to the test harness, which outputs a timeline view of the unit test
            </summary>
            <param name="services"></param>
            <param name="textWriter">Override the default Console.Out TextWriter</param>
            <param name="includeDetails">If true, additional details from each span are shown</param>
        </member>
        <member name="M:MassTransit.DependencyInjectionTestingExtensions.SetTestTimeouts(MassTransit.IBusRegistrationConfigurator,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
            Specify the test and/or the test inactivity timeouts that should be used by the test harness.
            </summary>
            <param name="configurator"></param>
            <param name="testTimeout">If specified, changes the test timeout</param>
            <param name="testInactivityTimeout">If specified, changes the test inactivity timeout</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.DependencyInjectionTestingExtensions.AddMassTransitInMemoryTestHarness(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{MassTransit.IBusRegistrationConfigurator})">
            <summary>
            Add the In-Memory test harness to the container, and configure it using the callback specified.
            </summary>
        </member>
        <member name="M:MassTransit.DependencyInjectionTestingExtensions.AddConsumerContainerTestHarness``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Add a consumer test harness for the specified consumer to the container
            </summary>
        </member>
        <member name="M:MassTransit.DependencyInjectionTestingExtensions.AddSagaContainerTestHarness``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Add a saga test harness for the specified saga to the container. The saga must be added separately, including
            a valid saga repository.
            </summary>
        </member>
        <member name="M:MassTransit.DependencyInjectionTestingExtensions.AddSagaStateMachineContainerTestHarness``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Add a saga state machine test harness for the specified saga to the container. The saga must be added separately, including
            a valid saga repository.
            </summary>
        </member>
        <member name="M:MassTransit.DependencyInjectionTestingExtensions.AddConsumerTestHarness``1(MassTransit.IBusRegistrationConfigurator)">
            <summary>
            Add a consumer test harness for the specified consumer to the container
            </summary>
        </member>
        <member name="M:MassTransit.DependencyInjectionTestingExtensions.AddSagaTestHarness``1(MassTransit.IBusRegistrationConfigurator)">
            <summary>
            Add a saga test harness for the specified saga to the container. The saga must be added separately, including
            a valid saga repository.
            </summary>
        </member>
        <member name="M:MassTransit.DependencyInjectionTestingExtensions.AddSagaStateMachineTestHarness``2(MassTransit.IBusRegistrationConfigurator)">
            <summary>
            Add a saga test harness for the specified saga to the container. The saga must be added separately, including
            a valid saga repository.
            </summary>
        </member>
        <member name="M:MassTransit.DependencyInjectionTransactionExtensions.AddTransactionalEnlistmentBus(MassTransit.IBusRegistrationConfigurator)">
            <summary>
            Adds <see cref="T:MassTransit.Transactions.ITransactionalBus" /> to the container with singleton lifetime, which can be used instead of <see cref="T:MassTransit.IBus" /> to enlist
            published/sent messages in the current transaction. It isn't truly transactional, but delays the messages until
            the transaction being to commit. This has a very limited purpose and is not meant for general use.
            </summary>
        </member>
        <member name="M:MassTransit.DependencyInjectionTransactionExtensions.AddTransactionalEnlistmentBus``1(MassTransit.IBusRegistrationConfigurator{``0})">
            <summary>
            Adds <see cref="T:MassTransit.Transactions.ITransactionalBus" /> to the container with singleton lifetime, which can be used instead of <see cref="T:MassTransit.IBus" /> to enlist
            published/sent messages in the current transaction. It isn't truly transactional, but delays the messages until
            the transaction being to commit. This has a very limited purpose and is not meant for general use.
            </summary>
        </member>
        <member name="M:MassTransit.DependencyInjectionTransactionExtensions.AddTransactionalBus(MassTransit.IBusRegistrationConfigurator)">
            <summary>
            Adds <see cref="T:MassTransit.Transactions.ITransactionalBus" /> to the container with scoped lifetime, which can be used to release the messages to the bus
            immediately after a transaction commit. This has a very limited purpose and is not meant for general use.
            It is recommended this is scoped within a unit of work (e.g. Http Request)
            </summary>
        </member>
        <member name="M:MassTransit.DependencyInjectionTransactionExtensions.AddTransactionalBus``1(MassTransit.IBusRegistrationConfigurator{``0})">
            <summary>
            Adds <see cref="T:MassTransit.Transactions.ITransactionalBus" /> to the container with scoped lifetime, which can be used to release the messages to the bus
            immediately after a transaction commit. This has a very limited purpose and is not meant for general use.
            It is recommended this is scoped within a unit of work (e.g. Http Request)
            </summary>
        </member>
        <member name="M:MassTransit.HandlerRegistrationConfiguratorExtensions.AddHandler``1(MassTransit.IRegistrationConfigurator,System.Func{MassTransit.ConsumeContext{``0},System.Threading.Tasks.Task})">
            <summary>
            Adds a method handler, using the first parameter to determine the message type
            </summary>
            <param name="configurator"></param>
            <param name="handler">An asynchronous method to handle the message</param>
        </member>
        <member name="M:MassTransit.HandlerRegistrationConfiguratorExtensions.AddHandler``2(MassTransit.IRegistrationConfigurator,System.Func{MassTransit.ConsumeContext{``0},System.Threading.Tasks.Task{``1}})">
            <summary>
            Adds a method handler, using the first parameter to determine the message type
            </summary>
            <param name="configurator"></param>
            <param name="handler">An asynchronous method to handle the message</param>
        </member>
        <member name="M:MassTransit.HandlerRegistrationConfiguratorExtensions.AddHandler``1(MassTransit.IRegistrationConfigurator,System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Adds a method handler, using the first parameter to determine the message type
            </summary>
            <param name="configurator"></param>
            <param name="handler">An asynchronous method to handle the message</param>
        </member>
        <member name="M:MassTransit.HandlerRegistrationConfiguratorExtensions.AddHandler``2(MassTransit.IRegistrationConfigurator,System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Adds a method handler, using the first parameter to determine the message type
            </summary>
            <param name="configurator"></param>
            <param name="handler">An asynchronous method to handle the message</param>
        </member>
        <member name="M:MassTransit.HandlerRegistrationConfiguratorExtensions.AddHandler``2(MassTransit.IRegistrationConfigurator,System.Func{MassTransit.ConsumeContext{``0},``1,System.Threading.Tasks.Task})">
            <summary>
            Adds a method handler, using the first parameter to determine the message type
            </summary>
            <param name="configurator"></param>
            <param name="handler">An asynchronous method to handle the message</param>
        </member>
        <member name="M:MassTransit.HandlerRegistrationConfiguratorExtensions.AddHandler``3(MassTransit.IRegistrationConfigurator,System.Func{MassTransit.ConsumeContext{``0},``1,System.Threading.Tasks.Task{``2}})">
            <summary>
            Adds a method handler, using the first parameter to determine the message type
            </summary>
            <param name="configurator"></param>
            <param name="handler">An asynchronous method to handle the message</param>
        </member>
        <member name="M:MassTransit.HandlerRegistrationConfiguratorExtensions.AddHandler``2(MassTransit.IRegistrationConfigurator,System.Func{``0,``1,System.Threading.Tasks.Task})">
            <summary>
            Adds a method handler, using the first parameter to determine the message type
            </summary>
            <param name="configurator"></param>
            <param name="handler">An asynchronous method to handle the message</param>
        </member>
        <member name="M:MassTransit.HandlerRegistrationConfiguratorExtensions.AddHandler``3(MassTransit.IRegistrationConfigurator,System.Func{``0,``1,System.Threading.Tasks.Task{``2}})">
            <summary>
            Adds a method handler, using the first parameter to determine the message type
            </summary>
            <param name="configurator"></param>
            <param name="handler">An asynchronous method to handle the message</param>
        </member>
        <member name="M:MassTransit.HandlerRegistrationConfiguratorExtensions.AddHandler``3(MassTransit.IRegistrationConfigurator,System.Func{MassTransit.ConsumeContext{``0},``1,``2,System.Threading.Tasks.Task})">
            <summary>
            Adds a method handler, using the first parameter to determine the message type
            </summary>
            <param name="configurator"></param>
            <param name="handler">An asynchronous method to handle the message</param>
        </member>
        <member name="M:MassTransit.HandlerRegistrationConfiguratorExtensions.AddHandler``4(MassTransit.IRegistrationConfigurator,System.Func{MassTransit.ConsumeContext{``0},``1,``2,System.Threading.Tasks.Task{``3}})">
            <summary>
            Adds a method handler, using the first parameter to determine the message type
            </summary>
            <param name="configurator"></param>
            <param name="handler">An asynchronous method to handle the message</param>
        </member>
        <member name="M:MassTransit.HandlerRegistrationConfiguratorExtensions.AddHandler``3(MassTransit.IRegistrationConfigurator,System.Func{``0,``1,``2,System.Threading.Tasks.Task})">
            <summary>
            Adds a method handler, using the first parameter to determine the message type
            </summary>
            <param name="configurator"></param>
            <param name="handler">An asynchronous method to handle the message</param>
        </member>
        <member name="M:MassTransit.HandlerRegistrationConfiguratorExtensions.AddHandler``4(MassTransit.IRegistrationConfigurator,System.Func{``0,``1,``2,System.Threading.Tasks.Task{``3}})">
            <summary>
            Adds a method handler, using the first parameter to determine the message type
            </summary>
            <param name="configurator"></param>
            <param name="handler">An asynchronous method to handle the message</param>
        </member>
        <member name="M:MassTransit.HandlerRegistrationConfiguratorExtensions.AddHandler``4(MassTransit.IRegistrationConfigurator,System.Func{MassTransit.ConsumeContext{``0},``1,``2,``3,System.Threading.Tasks.Task})">
            <summary>
            Adds a method handler, using the first parameter to determine the message type
            </summary>
            <param name="configurator"></param>
            <param name="handler">An asynchronous method to handle the message</param>
        </member>
        <member name="M:MassTransit.HandlerRegistrationConfiguratorExtensions.AddHandler``5(MassTransit.IRegistrationConfigurator,System.Func{MassTransit.ConsumeContext{``0},``1,``2,``3,System.Threading.Tasks.Task{``4}})">
            <summary>
            Adds a method handler, using the first parameter to determine the message type
            </summary>
            <param name="configurator"></param>
            <param name="handler">An asynchronous method to handle the message</param>
        </member>
        <member name="M:MassTransit.HandlerRegistrationConfiguratorExtensions.AddHandler``4(MassTransit.IRegistrationConfigurator,System.Func{``0,``1,``2,``3,System.Threading.Tasks.Task})">
            <summary>
            Adds a method handler, using the first parameter to determine the message type
            </summary>
            <param name="configurator"></param>
            <param name="handler">An asynchronous method to handle the message</param>
        </member>
        <member name="M:MassTransit.HandlerRegistrationConfiguratorExtensions.AddHandler``5(MassTransit.IRegistrationConfigurator,System.Func{``0,``1,``2,``3,System.Threading.Tasks.Task{``4}})">
            <summary>
            Adds a method handler, using the first parameter to determine the message type
            </summary>
            <param name="configurator"></param>
            <param name="handler">An asynchronous method to handle the message</param>
        </member>
        <member name="M:MassTransit.IBusOutboxConfigurator.DisableDeliveryService">
            <summary>
            Disable the outbox message delivery service, removing the hosted service from the service collection
            </summary>
        </member>
        <member name="T:MassTransit.IBusRegistrationConfigurator">
            <summary>
            Configures the container registration, and supports creation of a bus or a mediator.
            </summary>
        </member>
        <member name="M:MassTransit.IBusRegistrationConfigurator.AddBus(System.Func{MassTransit.IBusRegistrationContext,MassTransit.IBusControl})">
            <summary>
            This method is being deprecated. Use the transport-specific UsingRabbitMq, UsingActiveMq, etc. methods instead.
            </summary>
            <param name="busFactory"></param>
        </member>
        <member name="M:MassTransit.IBusRegistrationConfigurator.SetBusFactory``1(``0)">
            <summary>
            Sets the bus factory. This is used by the transport extension methods (such as UsingRabbitMq, Using ActiveMq, etc.) to
            specify the bus factory. The extension method approach is preferred (since v7) over the AddBus method.
            </summary>
            <param name="busFactory"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MassTransit.IBusRegistrationConfigurator.AddRider(System.Action{MassTransit.IRiderRegistrationConfigurator})">
            <summary>
            Add bus rider
            </summary>
            <param name="configure"></param>
        </member>
        <member name="T:MassTransit.IBusRegistrationConfigurator`1">
            <summary>
            Configures additional bus instances, configured via MultiBus
            </summary>
            <typeparam name="TBus">The additional bus interface type</typeparam>
        </member>
        <member name="M:MassTransit.IBusRegistrationConfigurator`1.AddRider(System.Action{MassTransit.IRiderRegistrationConfigurator{`0}})">
            <summary>
            Add bus rider
            </summary>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.IBusRegistrationContext.ConfigureEndpoints``1(MassTransit.IReceiveConfigurator{``0},MassTransit.IEndpointNameFormatter)">
            <summary>
            Configure the endpoints for all defined consumer, saga, and activity types using an optional
            endpoint name formatter. If no endpoint name formatter is specified and an <see cref="T:MassTransit.IEndpointNameFormatter" />
            is registered in the container, it is resolved from the container. Otherwise, the <see cref="T:MassTransit.DefaultEndpointNameFormatter" />
            is used.
            </summary>
            <param name="configurator">The <see cref="T:MassTransit.IBusFactoryConfigurator" /> for the bus being configured</param>
            <param name="endpointNameFormatter">Optional, the endpoint name formatter</param>
            <typeparam name="T">The bus factory type (depends upon the transport)</typeparam>
        </member>
        <member name="M:MassTransit.IBusRegistrationContext.ConfigureEndpoints``1(MassTransit.IReceiveConfigurator{``0},MassTransit.IEndpointNameFormatter,System.Action{MassTransit.DependencyInjection.Registration.IRegistrationFilterConfigurator})">
            <summary>
            Configure the endpoints for all defined consumer, saga, and activity types using an optional
            endpoint name formatter. If no endpoint name formatter is specified and an <see cref="T:MassTransit.IEndpointNameFormatter" />
            is registered in the container, it is resolved from the container. Otherwise, the <see cref="T:MassTransit.DefaultEndpointNameFormatter" />
            is used.
            </summary>
            <param name="configurator">The <see cref="T:MassTransit.IBusFactoryConfigurator" /> for the bus being configured</param>
            <param name="endpointNameFormatter">Optional, the endpoint name formatter</param>
            <param name="configureFilter">A filter for the endpoints to be configured</param>
            <typeparam name="T">The bus factory type (depends upon the transport)</typeparam>
        </member>
        <member name="M:MassTransit.IBusRegistrationContext.GetConfigureReceiveEndpoints">
            <summary>
            Returns the registered <see cref="T:MassTransit.IConfigureReceiveEndpoint" /> instances from the container. Used internally
            to apply configuration to every receive endpoint. This method should normally not be called.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MassTransit.IHealthCheckOptionsConfigurator.Name">
            <summary>
            Set the health check name, overrides the default bus type name
            </summary>
        </member>
        <member name="P:MassTransit.IHealthCheckOptionsConfigurator.FailureStatus">
            <summary>
            The <see cref="T:Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus" /> that should be reported when the health check fails.
            If null then the default status of <see cref="F:Microsoft.Extensions.Diagnostics.HealthChecks.HealthStatus.Unhealthy" /> will be reported.
            </summary>
        </member>
        <member name="P:MassTransit.IHealthCheckOptionsConfigurator.Tags">
            <summary>
            A list of tags that can be used to filter sets of health checks
            </summary>
        </member>
        <member name="M:MassTransit.IMediatorRegistrationConfigurator.ConfigureMediator(System.Action{MassTransit.IMediatorRegistrationContext,MassTransit.IMediatorConfigurator})">
            <summary>
            Optionally configure the pipeline used by the mediator
            </summary>
            <param name="configure"></param>
        </member>
        <member name="P:MassTransit.InboxCleanupServiceOptions.DuplicateDetectionWindow">
            <summary>
            The amount of time a message remaining in the Inbox
            </summary>
        </member>
        <member name="P:MassTransit.InboxCleanupServiceOptions.QueryMessageLimit">
            <summary>
            The maximum number of messages to load and remove at a time that meet the criteria
            </summary>
        </member>
        <member name="P:MassTransit.InboxCleanupServiceOptions.QueryTimeout">
            <summary>
            Database query timeout for loading/removing messages
            </summary>
        </member>
        <member name="P:MassTransit.InboxCleanupServiceOptions.QueryDelay">
            <summary>
            Delay between each database sweep to cleanup the inbox
            </summary>
        </member>
        <member name="M:MassTransit.InMemorySagaRepositoryRegistrationExtensions.InMemoryRepository``1(MassTransit.ISagaRegistrationConfigurator{``0})">
            <summary>
            Adds an in-memory saga repository to the registration
            </summary>
            <param name="configurator"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.InMemorySagaRepositoryRegistrationExtensions.SetInMemorySagaRepositoryProvider(MassTransit.IRegistrationConfigurator)">
            <summary>
            Use the InMemorySagaRepository for sagas configured by type (without a specific generic call to AddSaga/AddSagaStateMachine)
            </summary>
            <param name="configurator"></param>
        </member>
        <member name="P:MassTransit.IOutboxOptionsConfigurator.MessageDeliveryLimit">
            <summary>
            The number of messages to deliver at a time from the outbox to the broker
            </summary>
        </member>
        <member name="P:MassTransit.IOutboxOptionsConfigurator.MessageDeliveryTimeout">
            <summary>
            Transport Send timeout when delivering messages to the transport
            </summary>
        </member>
        <member name="M:MassTransit.IRegistrationConfigurator.AddConsumer``1(System.Action{MassTransit.IConsumerConfigurator{``0}})">
            <summary>
            Adds the consumer, allowing configuration when it is configured on an endpoint
            </summary>
            <param name="configure"></param>
            <typeparam name="T">The consumer type</typeparam>
        </member>
        <member name="M:MassTransit.IRegistrationConfigurator.AddConsumer``1(System.Type,System.Action{MassTransit.IConsumerConfigurator{``0}})">
            <summary>
            Adds the consumer, allowing configuration when it is configured on an endpoint
            </summary>
            <param name="consumerDefinitionType">The consumer definition type</param>
            <param name="configure"></param>
            <typeparam name="T">The consumer type</typeparam>
        </member>
        <member name="M:MassTransit.IRegistrationConfigurator.AddSaga``1(System.Action{MassTransit.ISagaConfigurator{``0}})">
            <summary>
            Adds the saga, allowing configuration when it is configured on the endpoint. This should not
            be used for state machine (Automatonymous) sagas.
            </summary>
            <param name="configure"></param>
            <typeparam name="T">The saga type</typeparam>
        </member>
        <member name="M:MassTransit.IRegistrationConfigurator.AddSaga``1(System.Type,System.Action{MassTransit.ISagaConfigurator{``0}})">
            <summary>
            Adds the saga, allowing configuration when it is configured on the endpoint. This should not
            be used for state machine (Automatonymous) sagas.
            </summary>
            <param name="sagaDefinitionType">The saga definition type</param>
            <param name="configure"></param>
            <typeparam name="T">The saga type</typeparam>
        </member>
        <member name="M:MassTransit.IRegistrationConfigurator.AddSagaStateMachine``2(System.Action{MassTransit.ISagaConfigurator{``1}})">
            <summary>
            Adds a SagaStateMachine to the registry, using the factory method, and updates the registrar prior to registering so that the default
            saga registrar isn't notified.
            </summary>
            <param name="configure"></param>
            <typeparam name="TStateMachine"></typeparam>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MassTransit.IRegistrationConfigurator.AddSagaStateMachine``2(System.Type,System.Action{MassTransit.ISagaConfigurator{``1}})">
            <summary>
            Adds a SagaStateMachine to the registry, using the factory method, and updates the registrar prior to registering so that the default
            saga registrar isn't notified.
            </summary>
            <param name="sagaDefinitionType"></param>
            <param name="configure"></param>
            <typeparam name="TStateMachine"></typeparam>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MassTransit.IRegistrationConfigurator.AddExecuteActivity``2(System.Action{MassTransit.IExecuteActivityConfigurator{``0,``1}})">
            <summary>
            Adds an execute activity (Courier), allowing configuration when it is configured on the endpoint.
            </summary>
            <param name="configure"></param>
            <typeparam name="TActivity">The activity type</typeparam>
            <typeparam name="TArguments">The argument type</typeparam>
        </member>
        <member name="M:MassTransit.IRegistrationConfigurator.AddExecuteActivity``2(System.Type,System.Action{MassTransit.IExecuteActivityConfigurator{``0,``1}})">
            <summary>
            Adds an execute activity (Courier), allowing configuration when it is configured on the endpoint.
            </summary>
            <param name="executeActivityDefinitionType"></param>
            <param name="configure"></param>
            <typeparam name="TActivity">The activity type</typeparam>
            <typeparam name="TArguments">The argument type</typeparam>
        </member>
        <member name="M:MassTransit.IRegistrationConfigurator.AddActivity``3(System.Action{MassTransit.IExecuteActivityConfigurator{``0,``1}},System.Action{MassTransit.ICompensateActivityConfigurator{``0,``2}})">
            <summary>
            Adds an activity (Courier), allowing configuration when it is configured on the endpoint.
            </summary>
            <param name="configureExecute">The execute configuration callback</param>
            <param name="configureCompensate">The compensate configuration callback</param>
            <typeparam name="TActivity">The activity type</typeparam>
            <typeparam name="TArguments">The argument type</typeparam>
            <typeparam name="TLog">The log type</typeparam>
        </member>
        <member name="M:MassTransit.IRegistrationConfigurator.AddActivity``3(System.Type,System.Action{MassTransit.IExecuteActivityConfigurator{``0,``1}},System.Action{MassTransit.ICompensateActivityConfigurator{``0,``2}})">
            <summary>
            Adds an activity (Courier), allowing configuration when it is configured on the endpoint.
            </summary>
            <param name="activityDefinitionType"></param>
            <param name="configureExecute">The execute configuration callback</param>
            <param name="configureCompensate">The compensate configuration callback</param>
            <typeparam name="TActivity">The activity type</typeparam>
            <typeparam name="TArguments">The argument type</typeparam>
            <typeparam name="TLog">The log type</typeparam>
        </member>
        <member name="M:MassTransit.IRegistrationConfigurator.AddEndpoint(System.Type)">
            <summary>
            Adds an endpoint definition, which will to used for consumers, sagas, etc. that are on that same endpoint. If a consumer, etc.
            specifies an endpoint without a definition, the default endpoint definition is used if one cannot be resolved from the configuration
            service provider (via generic registration).
            </summary>
            <param name="endpointDefinition">The endpoint definition to add</param>
        </member>
        <member name="M:MassTransit.IRegistrationConfigurator.AddRequestClient``1(MassTransit.RequestTimeout)">
            <summary>
            Add a request client, for the request type, which uses the <see cref="T:MassTransit.ConsumeContext" /> if present, otherwise
            uses the <see cref="T:MassTransit.IBus" />. The request is published, unless an endpoint convention is specified for the
            request type.
            </summary>
            <param name="timeout">The request timeout</param>
            <typeparam name="T">The request message type</typeparam>
        </member>
        <member name="M:MassTransit.IRegistrationConfigurator.AddRequestClient``1(System.Uri,MassTransit.RequestTimeout)">
            <summary>
            Add a request client, for the request type, which uses the <see cref="T:MassTransit.ConsumeContext" /> if present, otherwise
            uses the <see cref="T:MassTransit.IBus" />.
            </summary>
            <param name="destinationAddress">The destination address for the request</param>
            <param name="timeout">The request timeout</param>
            <typeparam name="T">The request message type</typeparam>
        </member>
        <member name="M:MassTransit.IRegistrationConfigurator.AddRequestClient(System.Type,MassTransit.RequestTimeout)">
            <summary>
            Add a request client, for the request type, which uses the <see cref="T:MassTransit.ConsumeContext" /> if present, otherwise
            uses the <see cref="T:MassTransit.IBus" />. The request is published, unless an endpoint convention is specified for the
            request type.
            </summary>
            <param name="requestType">The request message type</param>
            <param name="timeout">The request timeout</param>
        </member>
        <member name="M:MassTransit.IRegistrationConfigurator.AddRequestClient(System.Type,System.Uri,MassTransit.RequestTimeout)">
            <summary>
            Add a request client, for the request type, which uses the <see cref="T:MassTransit.ConsumeContext" /> if present, otherwise
            uses the <see cref="T:MassTransit.IBus" />.
            </summary>
            <param name="requestType">The request message type</param>
            <param name="destinationAddress">The destination address for the request</param>
            <param name="timeout">The request timeout</param>
        </member>
        <member name="M:MassTransit.IRegistrationConfigurator.SetEndpointNameFormatter(MassTransit.IEndpointNameFormatter)">
            <summary>
            Set the default endpoint name formatter used for endpoint names
            </summary>
            <param name="endpointNameFormatter"></param>
        </member>
        <member name="M:MassTransit.IRegistrationConfigurator.AddSagaRepository``1">
            <summary>
            Add a saga repository for the specified saga type, by specifying the repository type via method chaining. Using this
            method alone does nothing, it should be followed with the appropriate repository configuration method.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IRegistrationConfigurator.SetSagaRepositoryProvider(MassTransit.Configuration.ISagaRepositoryRegistrationProvider)">
            <summary>
            Specify a saga repository provider, that will be called when a saga is configured by type
            (without a specific generic call to AddSaga/AddSagaStateMachine)
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:MassTransit.IRegistrationConfigurator.AddFuture``1(System.Type)">
            <summary>
            Adds a future registration, along with an optional definition
            </summary>
            <param name="futureDefinitionType">The future definition type</param>
            <typeparam name="TFuture"></typeparam>
        </member>
        <member name="M:MassTransit.IRegistrationConfigurator.AddConfigureEndpointsCallback(MassTransit.ConfigureEndpointsCallback)">
            <summary>
            Adds a method that is called for each receive endpoint when it is configured, allowing additional
            configuration to be specified.
            </summary>
            <param name="callback">Callback invoked for each receive endpoint</param>
        </member>
        <member name="M:MassTransit.IRegistrationConfigurator.AddConfigureEndpointsCallback(MassTransit.ConfigureEndpointsProviderCallback)">
            <summary>
            Adds a method that is called for each receive endpoint when it is configured, allowing additional
            configuration to be specified.
            </summary>
            <param name="callback">Callback invoked for each receive endpoint</param>
        </member>
        <member name="T:MassTransit.IRegistrationContext">
            <summary>
            Registration contains the consumers and sagas that have been registered, allowing them to be configured on one or more
            receive endpoints.
            </summary>
        </member>
        <member name="M:MassTransit.IRegistrationContext.ConfigureConsumer(System.Type,MassTransit.IReceiveEndpointConfigurator)">
            <summary>
            Configure a consumer on the receive endpoint
            </summary>
            <param name="consumerType">The consumer type</param>
            <param name="configurator"></param>
        </member>
        <member name="M:MassTransit.IRegistrationContext.ConfigureConsumer``1(MassTransit.IReceiveEndpointConfigurator,System.Action{MassTransit.IConsumerConfigurator{``0}})">
            <summary>
            Configure a consumer on the receive endpoint, with an optional configuration action
            </summary>
            <param name="configurator"></param>
            <param name="configure"></param>
            <typeparam name="T">The consumer type</typeparam>
        </member>
        <member name="M:MassTransit.IRegistrationContext.ConfigureConsumers(MassTransit.IReceiveEndpointConfigurator)">
            <summary>
            Configure all registered consumers on the receive endpoint
            </summary>
            <param name="configurator"></param>
        </member>
        <member name="M:MassTransit.IRegistrationContext.ConfigureSaga(System.Type,MassTransit.IReceiveEndpointConfigurator)">
            <summary>
            Configure a saga on the receive endpoint
            </summary>
            <param name="sagaType">The saga type</param>
            <param name="configurator"></param>
        </member>
        <member name="M:MassTransit.IRegistrationContext.ConfigureSaga``1(MassTransit.IReceiveEndpointConfigurator,System.Action{MassTransit.ISagaConfigurator{``0}})">
            <summary>
            Configure a saga on the receive endpoint, with an optional configuration action
            </summary>
            <param name="configurator"></param>
            <param name="configure"></param>
            <typeparam name="T">The saga type</typeparam>
        </member>
        <member name="M:MassTransit.IRegistrationContext.ConfigureSagas(MassTransit.IReceiveEndpointConfigurator)">
            <summary>
            Configure all registered sagas on the receive endpoint
            </summary>
            <param name="configurator"></param>
        </member>
        <member name="M:MassTransit.IRegistrationContext.ConfigureExecuteActivity(System.Type,MassTransit.IReceiveEndpointConfigurator)">
            <summary>
            Configure the specified execute activity type
            </summary>
            <param name="activityType"></param>
            <param name="configurator"></param>
        </member>
        <member name="M:MassTransit.IRegistrationContext.ConfigureActivity(System.Type,MassTransit.IReceiveEndpointConfigurator,MassTransit.IReceiveEndpointConfigurator)">
            <summary>
            Configure the specified activity type
            </summary>
            <param name="activityType"></param>
            <param name="executeEndpointConfigurator">The configurator for the execute activity endpoint</param>
            <param name="compensateEndpointConfigurator">The configurator for the compensate activity endpoint</param>
        </member>
        <member name="M:MassTransit.IRegistrationContext.ConfigureActivityExecute(System.Type,MassTransit.IReceiveEndpointConfigurator,System.Uri)">
            <summary>
            Configure the specified activity type
            </summary>
            <param name="activityType"></param>
            <param name="executeEndpointConfigurator">The configurator for the execute activity endpoint</param>
            <param name="compensateAddress"></param>
        </member>
        <member name="M:MassTransit.IRegistrationContext.ConfigureActivityCompensate(System.Type,MassTransit.IReceiveEndpointConfigurator)">
            <summary>
            Configure the specified activity type
            </summary>
            <param name="activityType"></param>
            <param name="compensateEndpointConfigurator">The configurator for the compensate activity endpoint</param>
        </member>
        <member name="M:MassTransit.IRegistrationContext.ConfigureFuture(System.Type,MassTransit.IReceiveEndpointConfigurator)">
            <summary>
            Configure a future on the receive endpoint
            </summary>
            <param name="futureType">The saga type</param>
            <param name="configurator"></param>
        </member>
        <member name="M:MassTransit.IRegistrationContext.ConfigureFuture``1(MassTransit.IReceiveEndpointConfigurator)">
            <summary>
            Configure a future on the receive endpoint, with an optional configuration action
            </summary>
            <param name="configurator"></param>
            <typeparam name="T">The saga type</typeparam>
        </member>
        <member name="M:MassTransit.IRiderRegistrationConfigurator.SetRiderFactory``1(MassTransit.DependencyInjection.IRegistrationRiderFactory{``0})">
            <summary>
            Add the rider to the container, configured properly
            </summary>
            <param name="riderFactory"></param>
        </member>
        <member name="M:MassTransit.MassTransitHealthCheckOptionsExtensions.ConfigureHealthCheckOptions(MassTransit.IBusRegistrationConfigurator,System.Action{MassTransit.IHealthCheckOptionsConfigurator})">
            <summary>
            Configure the health check options for this bus
            </summary>
            <param name="configurator"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.MassTransitHealthCheckOptionsExtensions.ConfigureHealthCheckOptions``1(MassTransit.IBusRegistrationConfigurator{``0},System.Action{MassTransit.IHealthCheckOptionsConfigurator})">
            <summary>
            Configure the health check options for this bus
            </summary>
            <param name="configurator"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="P:MassTransit.OutboxDeliveryServiceOptions.MessageDeliveryLimit">
            <summary>
            The number of message to deliver at a time from an individual outbox
            </summary>
        </member>
        <member name="P:MassTransit.OutboxDeliveryServiceOptions.MessageDeliveryTimeout">
            <summary>
            Transport Send timeout when delivering messages to the transport
            </summary>
        </member>
        <member name="P:MassTransit.OutboxDeliveryServiceOptions.QueryDelay">
            <summary>
            Delay between each database sweep to load outbox messages
            </summary>
        </member>
        <member name="P:MassTransit.OutboxDeliveryServiceOptions.QueryMessageLimit">
            <summary>
            The number of outboxes to deliver concurrently (set to 1 if you need in-order delivery across multiple transactions)
            </summary>
        </member>
        <member name="P:MassTransit.OutboxDeliveryServiceOptions.QueryTimeout">
            <summary>
            Database query timeout for loading outbox messages
            </summary>
        </member>
        <member name="M:MassTransit.RegistrationConfiguratorExtensions.AddConsumer(MassTransit.IRegistrationConfigurator,System.Type,System.Type)">
            <summary>
            Adds the consumer, along with an optional consumer definition
            </summary>
            <param name="configurator"></param>
            <param name="consumerType">The consumer type</param>
            <param name="consumerDefinitionType">The consumer definition type</param>
        </member>
        <member name="M:MassTransit.RegistrationConfiguratorExtensions.AddSaga(MassTransit.IRegistrationConfigurator,System.Type,System.Type)">
            <summary>
            Adds the saga, along with an optional saga definition
            </summary>
            <param name="configurator"></param>
            <param name="sagaType">The saga type</param>
            <param name="sagaDefinitionType">The saga definition type</param>
        </member>
        <member name="M:MassTransit.RegistrationConfiguratorExtensions.AddSagaStateMachine(MassTransit.IRegistrationConfigurator,System.Type,System.Type)">
            <summary>
            Adds the state machine saga, along with an optional saga definition
            </summary>
            <param name="configurator"></param>
            <param name="sagaType">The saga type</param>
            <param name="sagaDefinitionType">The saga definition type</param>
        </member>
        <member name="M:MassTransit.RegistrationConfiguratorExtensions.AddActivity(MassTransit.IRegistrationConfigurator,System.Type,System.Type)">
            <summary>
            Adds an activity (Courier), along with an optional activity definition
            </summary>
            <param name="configurator"></param>
            <param name="activityType"></param>
            <param name="activityDefinitionType"></param>
        </member>
        <member name="M:MassTransit.RegistrationConfiguratorExtensions.AddExecuteActivity(MassTransit.IRegistrationConfigurator,System.Type,System.Type)">
            <summary>
            Adds an execute activity (Courier), along with an optional activity definition
            </summary>
            <param name="configurator"></param>
            <param name="activityType"></param>
            <param name="activityDefinitionType"></param>
        </member>
        <member name="M:MassTransit.RegistrationConfiguratorExtensions.AddFuture(MassTransit.IRegistrationConfigurator,System.Type,System.Type)">
            <summary>
            Adds a future registration, along with an optional definition
            </summary>
            <param name="configurator"></param>
            <param name="futureType"></param>
            <param name="futureDefinitionType">The future definition type</param>
        </member>
        <member name="M:MassTransit.DispatchConfigurationExtensions.UseDispatch``1(MassTransit.IPipeConfigurator{``0},MassTransit.Middleware.IPipeContextConverterFactory{``0},System.Action{MassTransit.IDispatchConfigurator{``0}})">
            <summary>
            Adds a dispatch filter to the pipe, which can be used to route traffic
            based on the type of the incoming context
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configurator"></param>
            <param name="pipeContextProviderFactory"></param>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.ForkConfigurationExtensions.UseFork``1(MassTransit.IPipeConfigurator{``0},MassTransit.IPipe{``0})">
            <summary>
            Adds a fork to the pipe, which invokes a separate pipe concurrently with the current pipe
            </summary>
            <typeparam name="T">The context type</typeparam>
            <param name="configurator">The pipe configurator</param>
            <param name="pipe">The filter to add</param>
        </member>
        <member name="T:MassTransit.BuildItineraryCallback`1">
            <summary>
            Called by the future to build the routing slip
            </summary>
            <param name="context">The input consume context</param>
            <param name="builder">The routing slip itinerary builder</param>
            <typeparam name="TInput">The input message type</typeparam>
        </member>
        <member name="P:MassTransit.FutureRequestHandle`4.Faulted">
            <summary>
            The Request Faulted event
            </summary>
        </member>
        <member name="M:MassTransit.FutureRequestHandle`4.OnResponseReceived``1(System.Action{MassTransit.IFutureResponseConfigurator{`1,``0}})">
            <summary>
            Handle the response type specified, and configure the response behavior
            </summary>
            <param name="configure"></param>
            <typeparam name="T">The response type</typeparam>
            <returns></returns>
        </member>
        <member name="P:MassTransit.FutureResponseHandle`5.Completed">
            <summary>
            The Response Completed event
            </summary>
        </member>
        <member name="P:MassTransit.FutureRoutingSlipHandle.Faulted">
            <summary>
            The fault state machine event
            </summary>
        </member>
        <member name="P:MassTransit.FutureRoutingSlipHandle.Completed">
            <summary>
            The response state machine event
            </summary>
        </member>
        <member name="M:MassTransit.IFutureFaultConfigurator`2.SetFaultedUsingFactory(MassTransit.EventMessageFactory{MassTransit.FutureState,`1,`0})">
            <summary>
            Fault the future using the specified factory method
            </summary>
            <param name="factoryMethod">Returns the result</param>
        </member>
        <member name="M:MassTransit.IFutureFaultConfigurator`2.SetFaultedUsingFactory(MassTransit.AsyncEventMessageFactory{MassTransit.FutureState,`1,`0})">
            <summary>
            Fault the future using the specified factory method
            </summary>
            <param name="factoryMethod">Returns the result</param>
        </member>
        <member name="M:MassTransit.IFutureFaultConfigurator`2.SetFaultedUsingInitializer(MassTransit.InitializerValueProvider{`1})">
            <summary>
            Fault the future using the a message initializer. The initiating command is also used to initialize
            result properties prior to apply the values specified.
            </summary>
            <param name="valueProvider">Returns an object of values to initialize the result</param>
        </member>
        <member name="M:MassTransit.IFutureFaultConfigurator`1.SetFaultedUsingFactory(MassTransit.EventMessageFactory{MassTransit.FutureState,`0})">
            <summary>
            Fault the future using the specified factory method
            </summary>
            <param name="factoryMethod">Returns the result</param>
        </member>
        <member name="M:MassTransit.IFutureFaultConfigurator`1.SetFaultedUsingFactory(MassTransit.AsyncEventMessageFactory{MassTransit.FutureState,`0})">
            <summary>
            Fault the future using the specified factory method
            </summary>
            <param name="factoryMethod">Returns the result</param>
        </member>
        <member name="M:MassTransit.IFutureFaultConfigurator`1.SetFaultedUsingInitializer(MassTransit.InitializerValueProvider)">
            <summary>
            Fault the future using the a message initializer. The initiating command is also used to initialize
            result properties prior to apply the values specified.
            </summary>
            <param name="valueProvider">Returns an object of values to initialize the result</param>
        </member>
        <member name="P:MassTransit.IFutureRequestConfigurator`3.RequestAddress">
            <summary>
            Set the request destination address. If not specified, the request will be published.
            </summary>
        </member>
        <member name="M:MassTransit.IFutureRequestConfigurator`3.SetRequestAddressProvider(MassTransit.RequestAddressProvider{`1})">
            <summary>
            Set the request destination address dynamically using the provider
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:MassTransit.IFutureRequestConfigurator`3.UsingRequestFactory(MassTransit.EventMessageFactory{MassTransit.FutureState,`1,`2})">
            <summary>
            Create the request using a factory method.
            </summary>
            <param name="factoryMethod">Returns the request message</param>
        </member>
        <member name="M:MassTransit.IFutureRequestConfigurator`3.UsingRequestFactory(MassTransit.AsyncEventMessageFactory{MassTransit.FutureState,`1,`2})">
            <summary>
            Create the request using an asynchronous factory method.
            </summary>
            <param name="factoryMethod">Returns the request message</param>
        </member>
        <member name="M:MassTransit.IFutureRequestConfigurator`3.UsingRequestInitializer(MassTransit.InitializerValueProvider{`1})">
            <summary>
            Create the request using a message initializer. The initiating command is also used to initialize
            request properties prior to apply the values specified.
            </summary>
            <param name="valueProvider">Returns an object of values to initialize the request</param>
        </member>
        <member name="M:MassTransit.IFutureRequestConfigurator`3.TrackPendingRequest(MassTransit.PendingFutureIdProvider{`2})">
            <summary>
            If specified, the request is added to the pending results, using the identifier returned by the
            provider. A subsequent result with a matching identifier will complete the pending result.
            </summary>
            <param name="provider">Provides the identifier from the request</param>
        </member>
        <member name="M:MassTransit.IFutureRequestConfigurator`3.OnRequestFaulted(System.Action{MassTransit.IFutureFaultConfigurator{`0,MassTransit.Fault{`2}}})">
            <summary>
            Configure what happens when the request faults
            </summary>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.IFutureRequestConfigurator`3.WhenFaulted(System.Func{MassTransit.EventActivityBinder{MassTransit.FutureState,MassTransit.Fault{`2}},MassTransit.EventActivityBinder{MassTransit.FutureState,MassTransit.Fault{`2}}})">
            <summary>
            Add activities to the state machine that are executed when the request faults
            </summary>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.IFutureResponseConfigurator`2.CompletePendingRequest(MassTransit.PendingFutureIdProvider{`1})">
            <summary>
            If specified, the identifier is used to complete a pending result and the result will be stored
            in the future.
            </summary>
            <param name="provider">Provides the identifier from the request</param>
        </member>
        <member name="M:MassTransit.IFutureResponseConfigurator`2.WhenReceived(System.Func{MassTransit.EventActivityBinder{MassTransit.FutureState,`1},MassTransit.EventActivityBinder{MassTransit.FutureState,`1}})">
            <summary>
            Add activities to the state machine that are executed when the response is received
            </summary>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.IFutureResultConfigurator`2.SetCompletedUsingFactory(MassTransit.EventMessageFactory{MassTransit.FutureState,`1,`0})">
            <summary>
            Complete the future using the specified factory method
            </summary>
            <param name="factoryMethod">Returns the result</param>
        </member>
        <member name="M:MassTransit.IFutureResultConfigurator`2.SetCompletedUsingFactory(MassTransit.AsyncEventMessageFactory{MassTransit.FutureState,`1,`0})">
            <summary>
            Complete the future using the specified factory method
            </summary>
            <param name="factoryMethod">Returns the result</param>
        </member>
        <member name="M:MassTransit.IFutureResultConfigurator`2.SetCompletedUsingInitializer(MassTransit.InitializerValueProvider{`1})">
            <summary>
            Complete the future using the a message initializer. The initiating command is also used to initialize
            result properties prior to apply the values specified.
            </summary>
            <param name="valueProvider">Returns an object of values to initialize the result</param>
        </member>
        <member name="M:MassTransit.IFutureResultConfigurator`1.SetCompletedUsingFactory(MassTransit.EventMessageFactory{MassTransit.FutureState,`0})">
            <summary>
            Complete the future using the specified factory method
            </summary>
            <param name="factoryMethod">Returns the result</param>
        </member>
        <member name="M:MassTransit.IFutureResultConfigurator`1.SetCompletedUsingFactory(MassTransit.AsyncEventMessageFactory{MassTransit.FutureState,`0})">
            <summary>
            Complete the future using the specified factory method
            </summary>
            <param name="factoryMethod">Returns the result</param>
        </member>
        <member name="M:MassTransit.IFutureResultConfigurator`1.SetCompletedUsingInitializer(MassTransit.InitializerValueProvider)">
            <summary>
            Complete the future using the a message initializer. The initiating command is also used to initialize
            result properties prior to apply the values specified.
            </summary>
            <param name="valueProvider">Returns an object of values to initialize the result</param>
        </member>
        <member name="M:MassTransit.IFutureRoutingSlipConfigurator`3.TrackPendingRoutingSlip">
            <summary>
            If specified, the routing slip is added to the pending results, using the routing slip tracking
            number. When the routing slip completes or faults, the pending result is completed or faulted.
            </summary>
        </member>
        <member name="M:MassTransit.IFutureRoutingSlipConfigurator`3.BuildItinerary(MassTransit.BuildItineraryCallback{`2})">
            <summary>
            Builds the routing slip itinerary when the command is received. The routing slip builder
            is passed, along with the <see cref="T:MassTransit.BehaviorContext`2" />. The tracking numbers,
            subscriptions, and FutureId variables are already initialized.
            </summary>
            <param name="buildItinerary"></param>
        </member>
        <member name="M:MassTransit.IFutureRoutingSlipConfigurator`3.BuildUsingItineraryPlanner">
            <summary>
            Builds the routing slip itinerary when the command is received using a container-registered
            <see cref="T:MassTransit.IItineraryPlanner`1" />.
            </summary>
        </member>
        <member name="M:MassTransit.IFutureRoutingSlipConfigurator`3.OnRoutingSlipCompleted(System.Action{MassTransit.IFutureResultConfigurator{`0,MassTransit.Courier.Contracts.RoutingSlipCompleted}})">
            <summary>
            Configure the behavior when the routing slip completes.
            </summary>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.IFutureRoutingSlipConfigurator`3.OnRoutingSlipFaulted(System.Action{MassTransit.IFutureFaultConfigurator{`1,MassTransit.Courier.Contracts.RoutingSlipFaulted}})">
            <summary>
            Configure what happens when the routing slip faults
            </summary>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.IFutureRoutingSlipConfigurator`3.WhenRoutingSlipCompleted(System.Func{MassTransit.EventActivityBinder{MassTransit.FutureState,MassTransit.Courier.Contracts.RoutingSlipCompleted},MassTransit.EventActivityBinder{MassTransit.FutureState,MassTransit.Courier.Contracts.RoutingSlipCompleted}})">
            <summary>
            Add activities to the state machine that are executed when the routing slip is completed
            </summary>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.IFutureRoutingSlipConfigurator`3.WhenRoutingSlipFaulted(System.Func{MassTransit.EventActivityBinder{MassTransit.FutureState,MassTransit.Courier.Contracts.RoutingSlipFaulted},MassTransit.EventActivityBinder{MassTransit.FutureState,MassTransit.Courier.Contracts.RoutingSlipFaulted}})">
            <summary>
            Add activities to the state machine that are executed when the routing slip is faulted
            </summary>
            <param name="configure"></param>
        </member>
        <member name="T:MassTransit.HostedServiceConfigurationExtensions">
            <summary>
            These are the updated extensions compatible with the container registration code. They should be used, for real.
            </summary>
        </member>
        <member name="M:MassTransit.HostedServiceConfigurationExtensions.AddMassTransitHostedService(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds the MassTransit <see cref="T:Microsoft.Extensions.Hosting.IHostedService" />, which includes a bus and endpoint health check.
            </summary>
            <param name="services"></param>
        </member>
        <member name="M:MassTransit.HostedServiceConfigurationExtensions.AddMassTransitHostedService(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Boolean)">
            <summary>
            Adds the MassTransit <see cref="T:Microsoft.Extensions.Hosting.IHostedService" />, which includes a bus and endpoint health check.
            </summary>
            <param name="services"></param>
            <param name="waitUntilStarted">Await until bus fully started. (It will block application until bus becomes ready)</param>
        </member>
        <member name="M:MassTransit.HostedServiceConfigurationExtensions.AddMassTransitHostedService(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Boolean,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
            <summary>
            Adds the MassTransit <see cref="T:Microsoft.Extensions.Hosting.IHostedService" />, which includes a bus and endpoint health check.
            Use it together with UseHealthCheck to get more detailed diagnostics.
            </summary>
            <param name="services"></param>
            <param name="waitUntilStarted">Await until bus fully started. (It will block application until bus becomes ready)</param>
            <param name="startTimeout">
            The timeout for starting the bus. The bus start process will not respond to the hosted service's cancellation token.
            In other words, if host shutdown is triggered during bus startup, the startup will still complete (subject to the specified timeout).
            </param>
            <param name="stopTimeout">
            The timeout for stopping the bus. The bus stop process will not respond to the hosted service's cancellation token.
            In other words, bus shutdown will complete gracefully (subject to the specified timeout) even if instructed by ASP.NET Core
            to no longer be graceful.
            </param>
        </member>
        <member name="M:MassTransit.IBindConfigurator`1.Source``1(MassTransit.IPipeContextSource{``0,`0},System.Action{MassTransit.IBindConfigurator{`0,``0}})">
            <summary>
            Specifies a pipe context source which is used to create the PipeContext bound to the BindContext.
            </summary>
            <param name="source"></param>
            <param name="configureTarget"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MassTransit.IBindConfigurator`2">
            <summary>
            Configures a binding using the specified pipe context source
            </summary>
            <typeparam name="TLeft"></typeparam>
            <typeparam name="TRight"></typeparam>
        </member>
        <member name="P:MassTransit.IBindConfigurator`2.ContextPipe">
            <summary>
            Configure a filter on the context pipe, versus the bound pipe
            </summary>
        </member>
        <member name="M:MassTransit.IBusFactory.CreateBusEndpointConfiguration(System.Action{MassTransit.IReceiveEndpointConfigurator})">
            <summary>
            Create the bus endpoint configuration, which is used to create the bus
            </summary>
            <returns></returns>
        </member>
        <member name="T:MassTransit.IBusFactorySelector">
            <summary>
            Use one of the selector extension methods to create a bus instance for the
            selected transport.
            </summary>
        </member>
        <member name="T:MassTransit.ICircuitBreakerConfigurator`1">
            <summary>
            Configure the settings on the circuit breaker
            </summary>
            <typeparam name="TContext"></typeparam>
        </member>
        <member name="P:MassTransit.ICircuitBreakerConfigurator`1.TrackingPeriod">
            <summary>
            The period after which the attempt/failure counts are reset.
            </summary>
        </member>
        <member name="P:MassTransit.ICircuitBreakerConfigurator`1.TripThreshold">
            <summary>
            The percentage of attempts that must fail before the circuit breaker trips into
            an open state.
            </summary>
        </member>
        <member name="P:MassTransit.ICircuitBreakerConfigurator`1.ActiveThreshold">
            <summary>
            The number of attempts that must occur before the circuit breaker becomes active. Until the
            breaker activates, it will not open on failure
            </summary>
        </member>
        <member name="P:MassTransit.ICircuitBreakerConfigurator`1.ResetInterval">
            <summary>
            Sets a specific reset interval for the circuit to attempt to close after being tripped.
            By default, this is an incrementing scale up to one minute.
            </summary>
            <value></value>
        </member>
        <member name="P:MassTransit.ICircuitBreakerConfigurator`1.Router">
            <summary>
            Configure a router for sending events from the circuit breaker
            </summary>
        </member>
        <member name="P:MassTransit.IJobServiceConfigurator.Repository">
            <summary>
            Sets the job saga repository (default is in-memory, which is not recommended for production).
            The job repository is used to keep track of all job types, and tracking running jobs.
            </summary>
        </member>
        <member name="P:MassTransit.IJobServiceConfigurator.JobRepository">
            <summary>
            Sets the job state saga repository (default is in-memory, which is not recommended for production).
            Used to keep track of every job that was run.
            </summary>
        </member>
        <member name="P:MassTransit.IJobServiceConfigurator.JobAttemptRepository">
            <summary>
            Sets the job attempt state saga repository (default is in-memory, which is not recommended for production).
            Used to keep track of each job attempt, which may be retried based upon a retry policy.
            </summary>
        </member>
        <member name="P:MassTransit.IJobServiceConfigurator.JobServiceStateEndpointName">
            <summary>
            Override the default turnout state endpoint name (defaults to TurnoutState, turnout_state, or turnout-state)
            </summary>
        </member>
        <member name="P:MassTransit.IJobServiceConfigurator.JobServiceJobStateEndpointName">
            <summary>
            Override the default turnout state endpoint name (defaults to TurnoutJobState, turnout_job_state, or turnout-job-state)
            </summary>
        </member>
        <member name="P:MassTransit.IJobServiceConfigurator.JobServiceJobAttemptStateEndpointName">
            <summary>
            Override the default turnout state endpoint name (defaults to TurnoutJobAttemptState, turnout_job_attempt_state, or turnout-job-attempt-state)
            </summary>
        </member>
        <member name="P:MassTransit.IJobServiceConfigurator.SlotWaitTime">
            <summary>
            The time to wait before attempting to allocate a job slot when no slots are available
            </summary>
        </member>
        <member name="P:MassTransit.IJobServiceConfigurator.StatusCheckInterval">
            <summary>
            Time to wait before checking the status of a job to ensure it is still running (not dead)
            </summary>
        </member>
        <member name="P:MassTransit.IJobServiceConfigurator.SlotRequestTimeout">
            <summary>
            Timeout on request to allocate a job slot
            </summary>
        </member>
        <member name="P:MassTransit.IJobServiceConfigurator.StartJobTimeout">
            <summary>
            Timeout to wait for a job to start
            </summary>
        </member>
        <member name="P:MassTransit.IJobServiceConfigurator.SuspectJobRetryCount">
            <summary>
            The number of times to retry a suspect job before it is faulted. Defaults to zero.
            </summary>
        </member>
        <member name="P:MassTransit.IJobServiceConfigurator.SuspectJobRetryDelay">
            <summary>
            The delay before retrying a suspect job
            </summary>
        </member>
        <member name="P:MassTransit.IJobServiceConfigurator.SagaPartitionCount">
            <summary>
            If specified, overrides the default saga partition count to reduce conflicts when using optimistic concurrency.
            If using a saga repository with pessimistic concurrency, this is not recommended.
            </summary>
        </member>
        <member name="P:MassTransit.IJobServiceConfigurator.FinalizeCompleted">
            <summary>
            If true, completed jobs are finalized, removing them from the saga repository
            </summary>
        </member>
        <member name="M:MassTransit.InlineFilterConfigurationExtensions.UseInlineFilter``1(MassTransit.IPipeConfigurator{``0},MassTransit.InlineFilterMethod{``0})">
            <summary>
            Creates an inline filter using a simple async method
            </summary>
            <typeparam name="T">The context type</typeparam>
            <param name="configurator">The pipe configurator</param>
            <param name="inlineFilterMethod">The inline filter delegate</param>
        </member>
        <member name="M:MassTransit.InMemoryOutboxConfigurationExtensions.UseInMemoryOutbox``1(MassTransit.IPipeConfigurator{MassTransit.ConsumeContext{``0}},System.Action{MassTransit.IOutboxConfigurator})">
            <summary>
            Includes an outbox in the consume filter path, which delays outgoing messages until the return path
            of the pipeline returns to the outbox filter. At this point, the message execution pipeline should be
            nearly complete with only the ack remaining. If an exception is thrown, the messages are not sent/published.
            </summary>
            <param name="configurator">The pipe configurator</param>
            <param name="configure">Configure the outbox</param>
        </member>
        <member name="M:MassTransit.InMemoryOutboxConfigurationExtensions.UseInMemoryOutbox(MassTransit.IConsumePipeConfigurator,System.Action{MassTransit.IOutboxConfigurator})">
            <summary>
            Includes an outbox in the consume filter path, which delays outgoing messages until the return path
            of the pipeline returns to the outbox filter. At this point, the message execution pipeline should be
            nearly complete with only the ack remaining. If an exception is thrown, the messages are not sent/published.
            </summary>
            <param name="configurator">The pipe configurator</param>
            <param name="configure">Configure the outbox</param>
        </member>
        <member name="M:MassTransit.InMemoryOutboxConfigurationExtensions.UseInMemoryOutbox``1(MassTransit.IConsumerConfigurator{``0},System.Action{MassTransit.IOutboxConfigurator})">
            <summary>
            Includes an outbox in the consume filter path, which delays outgoing messages until the return path
            of the pipeline returns to the outbox filter. At this point, the message execution pipeline should be
            nearly complete with only the ack remaining. If an exception is thrown, the messages are not sent/published.
            </summary>
            <param name="configurator"></param>
            <param name="configure">Configure the outbox</param>
        </member>
        <member name="M:MassTransit.InMemoryOutboxConfigurationExtensions.UseInMemoryOutbox``1(MassTransit.ISagaConfigurator{``0},System.Action{MassTransit.IOutboxConfigurator})">
            <summary>
            Includes an outbox in the consume filter path, which delays outgoing messages until the return path
            of the pipeline returns to the outbox filter. At this point, the message execution pipeline should be
            nearly complete with only the ack remaining. If an exception is thrown, the messages are not sent/published.
            </summary>
            <param name="configurator"></param>
            <param name="configure">Configure the outbox</param>
        </member>
        <member name="M:MassTransit.InMemoryOutboxConfigurationExtensions.UseInMemoryOutbox``1(MassTransit.IHandlerConfigurator{``0},System.Action{MassTransit.IOutboxConfigurator})">
            <summary>
            Includes an outbox in the consume filter path, which delays outgoing messages until the return path
            of the pipeline returns to the outbox filter. At this point, the message execution pipeline should be
            nearly complete with only the ack remaining. If an exception is thrown, the messages are not sent/published.
            </summary>
            <param name="configurator"></param>
            <param name="configure">Configure the outbox</param>
        </member>
        <member name="M:MassTransit.InMemoryOutboxConfigurationExtensions.AddInMemoryInboxOutbox(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds the required components to support the in-memory version of the InboxOutbox, which is intended for
            testing purposes only.
            </summary>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.InMemoryOutboxConfigurationExtensions.UseInMemoryInboxOutbox(MassTransit.IReceiveEndpointConfigurator,System.IServiceProvider)">
            <summary>
            Includes a combination inbox/outbox in the consume pipeline, which stores outgoing messages in memory until
            the message consumer completes.
            </summary>
            <param name="configurator"></param>
            <param name="provider">Configuration service provider</param>
        </member>
        <member name="M:MassTransit.InstrumentationConfigurationExtensions.UseInstrumentation(MassTransit.IBusFactoryConfigurator,System.Action{MassTransit.Monitoring.InstrumentationOptions},System.String)">
            <summary>
            Enables instrumentation using the built-in .NET Meter class, which can be collected by OpenTelemetry.
            See https://docs.microsoft.com/en-us/dotnet/core/diagnostics/metrics for details.
            </summary>
            <param name="configurator"></param>
            <param name="configureOptions"></param>
            <param name="serviceName">
            The service name for metrics reporting, defaults to the current process main module filename
            </param>
        </member>
        <member name="M:MassTransit.InterceptConfigurationExtensions.UseIntercept``1(MassTransit.IPipeConfigurator{``0},MassTransit.IPipe{``0})">
            <summary>
            Adds a fork to the pipe, which invokes a separate pipe before passing to the next filter.
            </summary>
            <typeparam name="T">The context type</typeparam>
            <param name="configurator">The pipe configurator</param>
            <param name="pipe">The filter to add</param>
        </member>
        <member name="P:MassTransit.IOutboxConfigurator.ConcurrentMessageDelivery">
            <summary>
            Set to true if messages can be delivered to the broker concurrently. Concurrent delivery is faster, but does not match the order of the
            original publish/respond/send calls. Defaults to false to match existing behavior.
            </summary>
        </member>
        <member name="P:MassTransit.IRedeliveryConfigurator.ReplaceMessageId">
            <summary>
            Generate a new MessageId for each redelivered message, replacing the original
            MessageId. This is commonly done when using transport-level de-duplication
            with Azure Service Bus or Amazon SQS.
            </summary>
        </member>
        <member name="P:MassTransit.IRescueConfigurator`2.ContextPipe">
            <summary>
            Configure a filter on the context pipe, versus the rescue pipe
            </summary>
        </member>
        <member name="P:MassTransit.ITransactionConfigurator.Timeout">
            <summary>
            Sets the transaction timeout
            </summary>
        </member>
        <member name="P:MassTransit.ITransactionConfigurator.IsolationLevel">
            <summary>
            Sets the isolation level of the transaction
            </summary>
        </member>
        <member name="P:MassTransit.ITransformConfigurator`1.Replace">
            <summary>
            Specifies if the message should be replaced, meaning modified in-place, instead of creating a new message
            </summary>
        </member>
        <member name="M:MassTransit.ITransformConfigurator`1.Default``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Set the specified message property to the default value (ignoring the input value)
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="propertyExpression"></param>
        </member>
        <member name="M:MassTransit.ITransformConfigurator`1.Set``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},``0)">
            <summary>
            Set the specified property to a constant value
            </summary>
            <param name="propertyExpression"></param>
            <param name="value"></param>
            <typeparam name="TProperty"></typeparam>
        </member>
        <member name="M:MassTransit.ITransformConfigurator`1.Set``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{MassTransit.Transformation.TransformPropertyContext{``0,`0},``0})">
            <summary>
            Set the property to the value, using the source context to create/select the value
            </summary>
            <typeparam name="TProperty">The property type</typeparam>
            <param name="propertyExpression">The property select expression</param>
            <param name="valueProvider">The method to return the property</param>
        </member>
        <member name="M:MassTransit.ITransformConfigurator`1.Set``1(System.Reflection.PropertyInfo,MassTransit.Initializers.IPropertyProvider{`0,``0})">
            <summary>
            Set the property to the value, using the property provider specified
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="property"></param>
            <param name="propertyProvider"></param>
        </member>
        <member name="M:MassTransit.ITransformConfigurator`1.Transform``1(System.Reflection.PropertyInfo,MassTransit.Initializers.IPropertyProvider{`0,``0})">
            <summary>
            Transform the property, but leave it unchanged on the input
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="property"></param>
            <param name="propertyProvider"></param>
        </member>
        <member name="M:MassTransit.ITransformSpecificationConfigurator`1.Get``1">
            <summary>
            Get a transform specification using the default constructor
            </summary>
            <typeparam name="T">The transform specification type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ITransformSpecificationConfigurator`1.Get``1(System.Func{``0})">
            <summary>
            Get a transform specification using the factory method
            </summary>
            <typeparam name="T">The transform specification type</typeparam>
            <param name="transformFactory">The transform specification factory method</param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.JobOptions`1">
            <summary>
            JobOptions contains the options used to configure the job consumer and related components
            </summary>
            <typeparam name="TJob">The Job Type</typeparam>
        </member>
        <member name="P:MassTransit.JobOptions`1.JobTimeout">
            <summary>
            The maximum allowed time for the job to execute, per attempt
            </summary>
        </member>
        <member name="P:MassTransit.JobOptions`1.ConcurrentJobLimit">
            <summary>
            Limits the concurrent number of job executing
            </summary>
        </member>
        <member name="M:MassTransit.JobServiceConfigurationExtensions.ConfigureJobServiceEndpoints``1(MassTransit.IServiceInstanceConfigurator{``0},System.Action{MassTransit.IJobServiceConfigurator})">
            <summary>
            Configures support for job consumers on the service instance, which supports executing long-running jobs without blocking the consumer pipeline.
            Job consumers use multiple state machines to track jobs, each of which runs on its own dedicated receive endpoint. Multiple service
            instances will use the competing consumer pattern, so a shared saga repository should be configured.
            </summary>
            <typeparam name="T">The transport receive endpoint configurator type</typeparam>
            <param name="configurator">The service instance</param>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.JobServiceConfigurationExtensions.ConfigureJobServiceEndpoints``1(MassTransit.IServiceInstanceConfigurator{``0},MassTransit.JobServiceOptions,System.Action{MassTransit.IJobServiceConfigurator})">
            <summary>
            Configures support for job consumers on the service instance, which supports executing long-running jobs without blocking the consumer pipeline.
            Job consumers use multiple state machines to track jobs, each of which runs on its own dedicated receive endpoint. Multiple service
            instances will use the competing consumer pattern, so a shared saga repository should be configured.
            </summary>
            <typeparam name="T">The transport receive endpoint configurator type</typeparam>
            <param name="configurator">The service instance</param>
            <param name="options"></param>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.JobServiceConfigurationExtensions.ConfigureJobService``1(MassTransit.IServiceInstanceConfigurator{``0},System.Action{MassTransit.IJobServiceConfigurator})">
            <summary>
            Configures support for job consumers on the service instance, which supports executing long-running jobs without blocking the consumer pipeline.
            Job consumers use multiple state machines to track jobs, each of which runs on its own dedicated receive endpoint. Multiple service
            instances will use the competing consumer pattern, so a shared saga repository should be configured.
            This method does not configure the state machine endpoints required to use the job service, and should only be used for services where another
            service has the job service endpoints configured.
            </summary>
            <typeparam name="T">The transport receive endpoint configurator type</typeparam>
            <param name="configurator">The service instance</param>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.JobServiceConfigurationExtensions.ConfigureJobService``1(MassTransit.IServiceInstanceConfigurator{``0},MassTransit.JobServiceOptions,System.Action{MassTransit.IJobServiceConfigurator})">
            <summary>
            Configures support for job consumers on the service instance, which supports executing long-running jobs without blocking the consumer pipeline.
            Job consumers use multiple state machines to track jobs, each of which runs on its own dedicated receive endpoint. Multiple service
            instances will use the competing consumer pattern, so a shared saga repository should be configured.
            This method does not configure the state machine endpoints required to use the job service, and should only be used for services where another
            service has the job service endpoints configured.
            </summary>
            <typeparam name="T">The transport receive endpoint configurator type</typeparam>
            <param name="configurator">The service instance</param>
            <param name="options"></param>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.JobServiceContainerConfigurationExtensions.ConfigureSagaRepositories(MassTransit.IJobServiceConfigurator,System.IServiceProvider)">
            <summary>
            Configure the job server saga repositories to resolve from the container.
            </summary>
            <param name="configurator"></param>
            <param name="provider">The bus registration context provided during configuration</param>
            <returns></returns>
        </member>
        <member name="P:MassTransit.JobServiceOptions.JobSagaEndpointAddress">
            <summary>
            The endpoint for the JobAttemptStateMachine
            </summary>
        </member>
        <member name="P:MassTransit.JobServiceOptions.JobTypeSagaEndpointAddress">
            <summary>
            The endpoint for the JobAttemptStateMachine
            </summary>
        </member>
        <member name="P:MassTransit.JobServiceOptions.JobAttemptSagaEndpointAddress">
            <summary>
            The endpoint for the JobAttemptStateMachine
            </summary>
        </member>
        <member name="P:MassTransit.JobServiceOptions.JobService">
            <summary>
            The job service for the endpoint
            </summary>
        </member>
        <member name="P:MassTransit.JobServiceOptions.SlotRequestTimeout">
            <summary>
            Timeout for the Allocate Job Slot Request
            </summary>
        </member>
        <member name="P:MassTransit.JobServiceOptions.SlotWaitTime">
            <summary>
            The time to wait for a job slot when one is unavailable
            </summary>
        </member>
        <member name="P:MassTransit.JobServiceOptions.StartJobTimeout">
            <summary>
            The time to wait for a job to start
            </summary>
        </member>
        <member name="P:MassTransit.JobServiceOptions.StatusCheckInterval">
            <summary>
            The time after which the status of a job should be checked
            </summary>
        </member>
        <member name="P:MassTransit.JobServiceOptions.HeartbeatInterval">
            <summary>
            How often a job instance should send a heartbeat
            </summary>
        </member>
        <member name="P:MassTransit.JobServiceOptions.HeartbeatTimeout">
            <summary>
            The time after which an instance will automatically be purged from the instance list
            </summary>
        </member>
        <member name="P:MassTransit.JobServiceOptions.SuspectJobRetryCount">
            <summary>
            The number of times to retry a suspect job before it is faulted. Defaults to zero.
            </summary>
        </member>
        <member name="P:MassTransit.JobServiceOptions.SuspectJobRetryDelay">
            <summary>
            The delay before retrying a suspect job
            </summary>
        </member>
        <member name="P:MassTransit.JobServiceOptions.SagaPartitionCount">
            <summary>
            If specified, overrides the default saga partition count to reduce conflicts when using optimistic concurrency.
            If using a saga repository with pessimistic concurrency, this is not recommended.
            </summary>
        </member>
        <member name="P:MassTransit.JobServiceOptions.FinalizeCompleted">
            <summary>
            If true, completed jobs will be finalized, removing the saga from the repository
            </summary>
        </member>
        <member name="M:MassTransit.JsonSerializerConfigurationExtensions.UseJsonSerializer(MassTransit.IBusFactoryConfigurator)">
            <summary>
            Serialize messages using the raw JSON message serializer
            </summary>
            <param name="configurator"></param>
        </member>
        <member name="M:MassTransit.JsonSerializerConfigurationExtensions.UseJsonDeserializer(MassTransit.IBusFactoryConfigurator,System.Boolean)">
            <summary>
            Serialize messages using the raw JSON message serializer
            </summary>
            <param name="configurator"></param>
            <param name="isDefault">If true, set the default content type to the content type of the deserializer</param>
        </member>
        <member name="M:MassTransit.JsonSerializerConfigurationExtensions.UseJsonSerializer(MassTransit.IReceiveEndpointConfigurator)">
            <summary>
            Serialize messages using the raw JSON message serializer
            </summary>
            <param name="configurator"></param>
        </member>
        <member name="M:MassTransit.JsonSerializerConfigurationExtensions.UseJsonDeserializer(MassTransit.IReceiveEndpointConfigurator,System.Boolean)">
            <summary>
            Serialize messages using the raw JSON message serializer
            </summary>
            <param name="configurator"></param>
            <param name="isDefault">If true, set the default content type to the content type of the deserializer</param>
        </member>
        <member name="M:MassTransit.JsonSerializerConfigurationExtensions.ConfigureJsonSerializerOptions(MassTransit.IBusFactoryConfigurator,System.Func{System.Text.Json.JsonSerializerOptions,System.Text.Json.JsonSerializerOptions})">
            <summary>
            Configure the global shared options for the default System.Text.Json serializer
            </summary>
            <param name="configurator"></param>
            <param name="configure"></param>
        </member>
        <member name="T:MassTransit.KebabCaseEndpointNameFormatter">
            <summary>
            Formats the endpoint names using kebab-case (dashed snake case)
            SubmitOrderConsumer -> submit-order
            OrderState -> order-state
            UpdateCustomerActivity -> update-customer-execute, update-customer-compensate
            </summary>
        </member>
        <member name="M:MassTransit.KebabCaseEndpointNameFormatter.#ctor(System.Boolean)">
            <summary>
            Kebab case endpoint formatter, which uses dashes between words
            </summary>
            <param name="includeNamespace">If true, the namespace is included in the name</param>
        </member>
        <member name="M:MassTransit.KebabCaseEndpointNameFormatter.#ctor(System.String,System.Boolean)">
            <summary>
            Kebab case endpoint formatter, which uses dashes between words
            </summary>
            <param name="prefix">Prefix to start the name, should match the casing of the formatter (such as Dev or PreProd)</param>
            <param name="includeNamespace">If true, the namespace is included in the name</param>
        </member>
        <member name="M:MassTransit.KillSwitchConfigurationExtensions.UseKillSwitch(MassTransit.IBusFactoryConfigurator,System.Action{MassTransit.Transports.Components.KillSwitchOptions})">
            <summary>
            A Kill Switch monitors a receive endpoint and automatically stops and restarts the endpoint in the presence of consumer faults. The options
            can be configured to adjust the trip threshold, restart timeout, and exceptions that are observed by the kill switch. When configured on the bus,
            a kill switch is installed on every receive endpoint.
            </summary>
            <param name="configurator">The bus factory configurator</param>
            <param name="configure">Configure the kill switch options</param>
        </member>
        <member name="M:MassTransit.KillSwitchConfigurationExtensions.UseKillSwitch(MassTransit.IReceiveEndpointConfigurator,System.Action{MassTransit.Transports.Components.KillSwitchOptions})">
            <summary>
            A Kill Switch monitors a receive endpoint and automatically stops and restarts the endpoint in the presence of consumer faults. The options
            can be configured to adjust the trip threshold, restart timeout, and exceptions that are observed by the kill switch. When configured on a
            receive endpoint, a kill switch is installed on that receive endpoint only.
            </summary>
            <param name="configurator">The bus factory configurator</param>
            <param name="configure">Configure the kill switch options</param>
        </member>
        <member name="M:MassTransit.LatestConfigurationExtensions.UseLatest``1(MassTransit.IPipeConfigurator{``0},System.Action{MassTransit.ILatestConfigurator{``0}})">
            <summary>
            Adds a latest value filter to the pipe
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configurator"></param>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.MediatorConfigurationExtensions.CreateMediator(MassTransit.IBusFactorySelector,System.Action{MassTransit.IMediatorConfigurator})">
            <summary>
            Create a mediator, which sends messages to consumers, handlers, and sagas. Messages are dispatched to the consumers asynchronously.
            Consumers are not directly coupled to the sender. Can be used entirely in-memory without a broker.
            </summary>
            <param name="selector"></param>
            <param name="configure"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:MassTransit.MessageDataConfiguratorExtensions.UseMessageData(MassTransit.IBusFactoryConfigurator,MassTransit.IMessageDataRepository)">
            <summary>
            Enable the loading of message data for the any message type that includes a MessageData property.
            </summary>
            <param name="configurator"></param>
            <param name="repository"></param>
        </member>
        <member name="M:MassTransit.MessageDataConfiguratorExtensions.UseMessageData(MassTransit.IBusFactoryConfigurator,System.Func{MassTransit.Configuration.IMessageDataRepositorySelector,MassTransit.IMessageDataRepository})">
            <summary>
            Enable the loading of message data for the any message type that includes a MessageData property.
            </summary>
            <param name="configurator">The bus factory configurator.</param>
            <param name="selector">
            The repository selector.
            See extension methods, e.g. <see cref="M:MassTransit.MessageData.Configuration.MessageDataRepositorySelectorExtensions.FileSystem(MassTransit.Configuration.IMessageDataRepositorySelector,System.String)" />.
            </param>
        </member>
        <member name="M:MassTransit.MessageRetryConfigurationExtensions.UseMessageRetry(MassTransit.IConsumePipeConfigurator,System.Action{MassTransit.IRetryConfigurator})">
            <summary>
            For all configured messages type (handlers, consumers, and sagas), configures message retry using the retry configuration specified.
            Retry is configured once for each message type, and is added prior to the consumer factory or saga repository in the pipeline.
            </summary>
            <param name="configurator"></param>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.MessageRetryConfigurationExtensions.UseMessageRetry(MassTransit.IConsumePipeConfigurator,MassTransit.IBusFactoryConfigurator,System.Action{MassTransit.IRetryConfigurator})">
            <summary>
            For all configured messages type (handlers, consumers, and sagas), configures message retry using the retry configuration specified.
            Retry is configured once for each message type, and is added prior to the consumer factory or saga repository in the pipeline.
            </summary>
            <param name="configurator"></param>
            <param name="connector">
            The bus factory configurator, to connect the observer, to cancel retries if the bus is stopped
            </param>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.MessageRetryConfigurationExtensions.UseMessageRetry``1(MassTransit.IConsumerConfigurator{``0},System.Action{MassTransit.IRetryConfigurator})">
            <summary>
            Configures the message retry for the consumer consumer, regardless of message type.
            </summary>
            <param name="configurator"></param>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.MessageRetryConfigurationExtensions.UseMessageRetry``1(MassTransit.IConsumerConfigurator{``0},MassTransit.IBusFactoryConfigurator,System.Action{MassTransit.IRetryConfigurator})">
            <summary>
            Configures the message retry for the consumer consumer, regardless of message type.
            </summary>
            <param name="configurator"></param>
            <param name="busFactoryConfigurator">
            The bus factory configurator, to connect the observer, to cancel retries if the bus is stopped
            </param>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.MessageRetryConfigurationExtensions.UseMessageRetry``1(MassTransit.ISagaConfigurator{``0},System.Action{MassTransit.IRetryConfigurator})">
            <summary>
            Configures the message retry for the consumer consumer, regardless of message type.
            </summary>
            <param name="configurator"></param>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.MessageRetryConfigurationExtensions.UseMessageRetry``1(MassTransit.ISagaConfigurator{``0},MassTransit.IBusFactoryConfigurator,System.Action{MassTransit.IRetryConfigurator})">
            <summary>
            Configures the message retry for the consumer consumer, regardless of message type.
            </summary>
            <param name="configurator"></param>
            <param name="busFactoryConfigurator">
            The bus factory configurator, to connect the observer, to cancel retries if the bus is stopped
            </param>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.MessageRetryConfigurationExtensions.UseMessageRetry``1(MassTransit.IHandlerConfigurator{``0},System.Action{MassTransit.IRetryConfigurator})">
            <summary>
            Configures the message retry for the consumer consumer, regardless of message type.
            </summary>
            <param name="configurator"></param>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.MessageRetryConfigurationExtensions.UseMessageRetry``1(MassTransit.IHandlerConfigurator{``0},MassTransit.IBusFactoryConfigurator,System.Action{MassTransit.IRetryConfigurator})">
            <summary>
            Configures the message retry for the consumer consumer, regardless of message type.
            </summary>
            <param name="configurator"></param>
            <param name="busFactoryConfigurator">
            The bus factory configurator, to connect the observer, to cancel retries if the bus is stopped
            </param>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.MessageSchedulerBusExtensions.CreateMessageScheduler(MassTransit.IBus,System.Uri)">
            <summary>
            Create a message scheduler that uses an external message scheduler, such as Quartz.NET or Hangfire, to
            schedule messages. This should not be used with the broker-specific message schedulers.
            NOTE that this should only be used to schedule messages outside of a message consumer. Consumers should
            use the ScheduleSend extensions on ConsumeContext.
            </summary>
            <param name="bus"></param>
            <param name="schedulerEndpointAddress">The endpoint address of the scheduler service</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.MessageSchedulerBusExtensions.CreateMessageScheduler(MassTransit.ISendEndpointProvider,MassTransit.IBusTopology,System.Uri)">
            <summary>
            Create a message scheduler that uses an external message scheduler, such as Quartz.NET or Hangfire, to
            schedule messages. This should not be used with the broker-specific message schedulers.
            NOTE that this should only be used to schedule messages outside of a message consumer. Consumers should
            use the ScheduleSend extensions on ConsumeContext.
            </summary>
            <param name="busTopology"></param>
            <param name="schedulerEndpointAddress">The endpoint address of the scheduler service</param>
            <param name="sendEndpointProvider"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.MessageSchedulerBusExtensions.CreateMessageScheduler(MassTransit.IBus)">
            <summary>
            Create a message scheduler that uses an external message scheduler, such as Quartz.NET or Hangfire, to
            schedule messages. This should not be used with the broker-specific message schedulers. Scheduled messages
            are published to the external message scheduler, rather than uses a preconfigured endpoint address.
            NOTE that this should only be used to schedule messages outside of a message consumer. Consumers should
            use the ScheduleSend extensions on ConsumeContext.
            </summary>
            <param name="bus"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.MessageSchedulerBusExtensions.CreateMessageScheduler(MassTransit.IPublishEndpoint,MassTransit.IBusTopology)">
            <summary>
            Create a message scheduler that uses an external message scheduler, such as Quartz.NET or Hangfire, to
            schedule messages. This should not be used with the broker-specific message schedulers. Scheduled messages
            are published to the external message scheduler, rather than uses a preconfigured endpoint address.
            NOTE that this should only be used to schedule messages outside of a message consumer. Consumers should
            use the ScheduleSend extensions on ConsumeContext.
            </summary>
            <param name="publishEndpoint"></param>
            <param name="busTopology"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.MessageSchedulerBusExtensions.CreateDelayedMessageScheduler(MassTransit.IBus)">
            <summary>
            Create a message scheduler that uses the built-in transport message delay to schedule messages.
            NOTE that this should only be used to schedule messages outside of a message consumer. Consumers should
            use the ScheduleSend extensions on ConsumeContext.
            </summary>
            <param name="bus"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.MessageSchedulerBusExtensions.CreateDelayedMessageScheduler(MassTransit.ISendEndpointProvider,MassTransit.IBusTopology)">
            <summary>
            Create a message scheduler that uses the built-in transport message delay to schedule messages.
            NOTE that this should only be used to schedule messages outside of a message consumer. Consumers should
            use the ScheduleSend extensions on ConsumeContext.
            </summary>
            <param name="sendEndpointProvider"></param>
            <param name="busTopology"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.MessageSchedulerExtensions.UseMessageScheduler(MassTransit.IConsumePipeConfigurator,System.Uri)">
            <summary>
            Specify an endpoint to use for message scheduling
            </summary>
            <param name="configurator"></param>
            <param name="schedulerAddress"></param>
        </member>
        <member name="M:MassTransit.MessageSchedulerExtensions.UsePublishMessageScheduler(MassTransit.IConsumePipeConfigurator)">
            <summary>
            Uses Publish (instead of Send) to schedule messages via the Quartz message scheduler. For this to work, a single
            queue should be used to schedule all messages. If multiple instances are running, they should be on the same Quartz
            cluster.
            </summary>
            <param name="configurator"></param>
        </member>
        <member name="M:MassTransit.MessageSchedulerRegistrationExtensions.AddMessageScheduler(MassTransit.IRegistrationConfigurator,System.Uri)">
            <summary>
            Add a <see cref="T:MassTransit.IMessageScheduler" /> to the container that sends <see cref="T:MassTransit.Scheduling.ScheduleMessage" />
            to an external message scheduler on the specified endpoint address, such as Quartz or Hangfire.
            </summary>
            <param name="configurator"></param>
            <param name="schedulerEndpointAddress">The endpoint address where the scheduler is running</param>
        </member>
        <member name="M:MassTransit.MessageSchedulerRegistrationExtensions.AddPublishMessageScheduler(MassTransit.IRegistrationConfigurator)">
            <summary>
            Add a <see cref="T:MassTransit.IMessageScheduler" /> to the container that publishes <see cref="T:MassTransit.Scheduling.ScheduleMessage" />
            to an external message scheduler, such as Quartz or Hangfire.
            </summary>
            <param name="configurator"></param>
        </member>
        <member name="M:MassTransit.ObserverExtensions.Observer``1(MassTransit.IReceiveEndpointConfigurator,System.IObserver{MassTransit.ConsumeContext{``0}},System.Action{MassTransit.IObserverConfigurator{``0}})">
            <summary>
            Subscribes an observer instance to the bus
            </summary>
            <param name="configurator">
            Service Bus Service Configurator
            - the item that is passed as a parameter to
            the action that is calling the configurator.
            </param>
            <param name="observer">The observer to connect to the endpoint</param>
            <param name="configureCallback"></param>
            <returns>An instance subscription configurator.</returns>
        </member>
        <member name="M:MassTransit.ObserverExtensions.ConnectObserver``1(MassTransit.IBus,System.IObserver{MassTransit.ConsumeContext{``0}})">
            <summary>
            Adds a message observer to the service bus for handling a specific type of message
            </summary>
            <typeparam name="T">The message type to handle, often inferred from the callback specified</typeparam>
            <param name="bus"></param>
            <param name="observer">
            The callback to invoke when messages of the specified type arrive on the service bus
            </param>
        </member>
        <member name="M:MassTransit.ObserverExtensions.ConnectRequestObserver``1(MassTransit.IBus,System.Guid,System.IObserver{MassTransit.ConsumeContext{``0}})">
            <summary>
            Subscribe a request observer to the bus's endpoint
            </summary>
            <typeparam name="T"></typeparam>
            <param name="bus"></param>
            <param name="requestId"></param>
            <param name="observer"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ObserverRegistrationExtensions.AddBusObserver``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Add a receive endpoint observer to the container, which will be resolved and connected to the bus by the container
            </summary>
            <param name="services"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ObserverRegistrationExtensions.AddBusObserver``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0})">
            <summary>
            Add a receive endpoint observer to the container, which will be resolved and connected to the bus by the container
            </summary>
            <param name="services"></param>
            <param name="factory"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ObserverRegistrationExtensions.AddReceiveEndpointObserver``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Add a receive endpoint observer to the container, which will be resolved and connected to the bus by the container
            </summary>
            <param name="services"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ObserverRegistrationExtensions.AddReceiveEndpointObserver``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0})">
            <summary>
            Add a receive endpoint observer to the container, which will be resolved and connected to the bus by the container
            </summary>
            <param name="services"></param>
            <param name="factory"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ObserverRegistrationExtensions.AddReceiveObserver``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Add a receive  observer to the container, which will be resolved and connected to the bus by the container
            </summary>
            <param name="services"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ObserverRegistrationExtensions.AddReceiveObserver``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0})">
            <summary>
            Add a receive  observer to the container, which will be resolved and connected to the bus by the container
            </summary>
            <param name="services"></param>
            <param name="factory"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ObserverRegistrationExtensions.AddConsumeObserver``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Add a consume observer to the container, which will be resolved and connected to the bus by the container
            </summary>
            <param name="services"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ObserverRegistrationExtensions.AddConsumeObserver``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0})">
            <summary>
            Add a consume observer to the container, which will be resolved and connected to the bus by the container
            </summary>
            <param name="services"></param>
            <param name="factory"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ObserverRegistrationExtensions.AddSendObserver``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Add a send observer to the container, which will be resolved and connected to the bus by the container
            </summary>
            <param name="services"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ObserverRegistrationExtensions.AddSendObserver``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0})">
            <summary>
            Add a send observer to the container, which will be resolved and connected to the bus by the container
            </summary>
            <param name="services"></param>
            <param name="factory"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ObserverRegistrationExtensions.AddPublishObserver``1(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Add a publish observer to the container, which will be resolved and connected to the bus by the container
            </summary>
            <param name="services"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ObserverRegistrationExtensions.AddPublishObserver``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0})">
            <summary>
            Add a publish observer to the container, which will be resolved and connected to the bus by the container
            </summary>
            <param name="services"></param>
            <param name="factory"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ObserverRegistrationExtensions.AddEventObserver``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Add a saga state machine event observer to the container, which will be resolved and connected to the state machine by the container
            </summary>
            <param name="services"></param>
            <typeparam name="T">The event observer type</typeparam>
            <typeparam name="TInstance">The saga state machine instance type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ObserverRegistrationExtensions.AddEventObserver``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``1})">
            <summary>
            Add a saga state machine event observer to the container, which will be resolved and connected to the state machine by the container
            </summary>
            <param name="services"></param>
            <param name="factory"></param>
            <typeparam name="T">The event observer type</typeparam>
            <typeparam name="TInstance">The saga state machine instance type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ObserverRegistrationExtensions.AddStateObserver``2(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Add a saga state machine state observer to the container, which will be resolved and connected to the state machine by the container
            </summary>
            <param name="services"></param>
            <typeparam name="T">The event observer type</typeparam>
            <typeparam name="TInstance">The saga state machine instance type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ObserverRegistrationExtensions.AddStateObserver``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``1})">
            <summary>
            Add a saga state machine state observer to the container, which will be resolved and connected to the state machine by the container
            </summary>
            <param name="services"></param>
            <param name="factory"></param>
            <typeparam name="T">The event observer type</typeparam>
            <typeparam name="TInstance">The saga state machine instance type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.PartitionerConfigurationExtensions.UseMessagePartitioner(MassTransit.IConsumePipeConfigurator,System.Int32)">
            <summary>
            Adds partitioning to the consume pipeline, with a number of partitions handling all message types on the receive endpoint. Endpoints must have
            a CorrelationId provider available, which can be specified using GlobalTopology.Send.UseCorrelationId&lt;T&gt;(x => x.SomeId);
            </summary>
            <param name="configurator">The pipe configurator</param>
            <param name="partitionCount">The number of partitions</param>
        </member>
        <member name="M:MassTransit.PartitionerConfigurationExtensions.UsePartitioner``1(MassTransit.IConsumePipeConfigurator,MassTransit.IPartitioner,System.Func{MassTransit.ConsumeContext{``0},System.Guid})">
            <summary>
            Adds a partition filter, which also limits concurrency by the partition count.
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="configurator"></param>
            <param name="partitioner">An existing partitioner that is shared</param>
            <param name="keyProvider">Provides the key from the message</param>
        </member>
        <member name="M:MassTransit.PartitionerConfigurationExtensions.UsePartitioner``1(MassTransit.IPipeConfigurator{MassTransit.ConsumeContext{``0}},MassTransit.IPartitioner,System.Func{MassTransit.ConsumeContext{``0},System.Guid})">
            <summary>
            Adds a partition filter, which also limits concurrency by the partition count.
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="configurator"></param>
            <param name="partitioner">An existing partitioner that is shared</param>
            <param name="keyProvider">Provides the key from the message</param>
        </member>
        <member name="M:MassTransit.PartitionerConfigurationExtensions.UsePartitioner``1(MassTransit.IPipeConfigurator{MassTransit.ConsumeContext{``0}},System.Int32,System.Func{MassTransit.ConsumeContext{``0},System.Guid})">
            <summary>
            Adds a partition filter, which also limits concurrency by the partition count.
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="configurator"></param>
            <param name="partitionCount">The number of partitions to use when distributing message delivery</param>
            <param name="keyProvider">Provides the key from the message</param>
        </member>
        <member name="M:MassTransit.PartitionerConfigurationExtensions.UsePartitioner``1(MassTransit.IPipeConfigurator{MassTransit.ConsumerConsumeContext{``0}},System.Int32,System.Func{MassTransit.ConsumerConsumeContext{``0},System.Guid})">
            <summary>
            Adds a partition filter, which also limits concurrency by the partition count.
            </summary>
            <typeparam name="TConsumer"></typeparam>
            <param name="configurator"></param>
            <param name="partitionCount">The number of partitions to use when distributing message delivery</param>
            <param name="keyProvider">Provides the key from the message</param>
        </member>
        <member name="M:MassTransit.PartitionerConfigurationExtensions.UsePartitioner``1(MassTransit.IPipeConfigurator{MassTransit.ConsumerConsumeContext{``0}},System.Int32,System.Func{MassTransit.ConsumerConsumeContext{``0},System.String},System.Text.Encoding)">
            <summary>
            Adds a partition filter, which also limits concurrency by the partition count.
            </summary>
            <typeparam name="TConsumer"></typeparam>
            <param name="configurator"></param>
            <param name="partitionCount">The number of partitions to use when distributing message delivery</param>
            <param name="keyProvider">Provides the key from the message</param>
            <param name="encoding"></param>
        </member>
        <member name="M:MassTransit.PartitionerConfigurationExtensions.UsePartitioner``1(MassTransit.IPipeConfigurator{MassTransit.SagaConsumeContext{``0}},System.Int32,System.Func{MassTransit.SagaConsumeContext{``0},System.Guid})">
            <summary>
            Adds a partition filter, which also limits concurrency by the partition count.
            </summary>
            <typeparam name="TSaga"></typeparam>
            <param name="configurator"></param>
            <param name="partitionCount">The number of partitions to use when distributing message delivery</param>
            <param name="keyProvider">Provides the key from the message</param>
        </member>
        <member name="M:MassTransit.PartitionerConfigurationExtensions.UsePartitioner``1(MassTransit.IPipeConfigurator{MassTransit.SagaConsumeContext{``0}},System.Int32,System.Func{MassTransit.SagaConsumeContext{``0},System.String},System.Text.Encoding)">
            <summary>
            Adds a partition filter, which also limits concurrency by the partition count.
            </summary>
            <typeparam name="TSaga"></typeparam>
            <param name="configurator"></param>
            <param name="partitionCount">The number of partitions to use when distributing message delivery</param>
            <param name="keyProvider">Provides the key from the message</param>
            <param name="encoding"></param>
        </member>
        <member name="M:MassTransit.PartitionerConfigurationExtensions.UsePartitioner``2(MassTransit.IPipeConfigurator{MassTransit.ExecuteActivityContext{``0,``1}},System.Int32,System.Func{MassTransit.ExecuteActivityContext{``0,``1},System.Guid})">
            <summary>
            Adds a partition filter, which also limits concurrency by the partition count.
            </summary>
            <typeparam name="TActivity"></typeparam>
            <typeparam name="TArguments"></typeparam>
            <param name="configurator"></param>
            <param name="partitionCount">The number of partitions to use when distributing message delivery</param>
            <param name="keyProvider">Provides the key from the message</param>
        </member>
        <member name="M:MassTransit.PartitionerConfigurationExtensions.UsePartitioner``2(MassTransit.IPipeConfigurator{MassTransit.ExecuteActivityContext{``0,``1}},MassTransit.IPartitioner,System.Func{MassTransit.ExecuteActivityContext{``0,``1},System.Guid})">
            <summary>
            Adds a partition filter, which also limits concurrency by the partition count.
            </summary>
            <typeparam name="TActivity"></typeparam>
            <typeparam name="TArguments"></typeparam>
            <param name="configurator"></param>
            <param name="partitioner">An existing partitioner to share</param>
            <param name="keyProvider">Provides the key from the message</param>
        </member>
        <member name="M:MassTransit.PartitionerConfigurationExtensions.UsePartitioner``2(MassTransit.IPipeConfigurator{MassTransit.ExecuteActivityContext{``0,``1}},System.Int32,System.Func{MassTransit.ExecuteActivityContext{``0,``1},System.String},System.Text.Encoding)">
            <summary>
            Adds a partition filter, which also limits concurrency by the partition count.
            </summary>
            <typeparam name="TActivity"></typeparam>
            <typeparam name="TArguments"></typeparam>
            <param name="configurator"></param>
            <param name="partitionCount">The number of partitions to use when distributing message delivery</param>
            <param name="keyProvider">Provides the key from the message</param>
            <param name="encoding">The text encoding to use to convert the string to byte[] (defaults to UTF8)</param>
        </member>
        <member name="M:MassTransit.PartitionerConfigurationExtensions.UsePartitioner``2(MassTransit.IPipeConfigurator{MassTransit.ExecuteActivityContext{``0,``1}},MassTransit.IPartitioner,System.Func{MassTransit.ExecuteActivityContext{``0,``1},System.String},System.Text.Encoding)">
            <summary>
            Adds a partition filter, which also limits concurrency by the partition count.
            </summary>
            <typeparam name="TActivity"></typeparam>
            <typeparam name="TArguments"></typeparam>
            <param name="configurator"></param>
            <param name="partitioner">An existing partitioner to share</param>
            <param name="keyProvider">Provides the key from the message</param>
            <param name="encoding">The text encoding to use to convert the string to byte[] (defaults to UTF8)</param>
        </member>
        <member name="M:MassTransit.PartitionerConfigurationExtensions.UsePartitioner``2(MassTransit.IPipeConfigurator{MassTransit.CompensateActivityContext{``0,``1}},System.Int32,System.Func{MassTransit.CompensateActivityContext{``0,``1},System.Guid})">
            <summary>
            Adds a partition filter, which also limits concurrency by the partition count.
            </summary>
            <typeparam name="TActivity"></typeparam>
            <typeparam name="TLog"></typeparam>
            <param name="configurator"></param>
            <param name="partitionCount">The number of partitions to use when distributing message delivery</param>
            <param name="keyProvider">Provides the key from the message</param>
        </member>
        <member name="M:MassTransit.PartitionerConfigurationExtensions.UsePartitioner``2(MassTransit.IPipeConfigurator{MassTransit.CompensateActivityContext{``0,``1}},MassTransit.IPartitioner,System.Func{MassTransit.CompensateActivityContext{``0,``1},System.Guid})">
            <summary>
            Adds a partition filter, which also limits concurrency by the partition count.
            </summary>
            <typeparam name="TActivity"></typeparam>
            <typeparam name="TLog"></typeparam>
            <param name="configurator"></param>
            <param name="partitioner">An existing partitioner to share</param>
            <param name="keyProvider">Provides the key from the message</param>
        </member>
        <member name="M:MassTransit.PartitionerConfigurationExtensions.UsePartitioner``2(MassTransit.IPipeConfigurator{MassTransit.CompensateActivityContext{``0,``1}},System.Int32,System.Func{MassTransit.CompensateActivityContext{``0,``1},System.String},System.Text.Encoding)">
            <summary>
            Adds a partition filter, which also limits concurrency by the partition count.
            </summary>
            <typeparam name="TActivity"></typeparam>
            <typeparam name="TLog"></typeparam>
            <param name="configurator"></param>
            <param name="partitionCount">The number of partitions to use when distributing message delivery</param>
            <param name="keyProvider">Provides the key from the message</param>
            <param name="encoding">The text encoding to use to convert the string to byte[] (defaults to UTF8)</param>
        </member>
        <member name="M:MassTransit.PartitionerConfigurationExtensions.UsePartitioner``2(MassTransit.IPipeConfigurator{MassTransit.CompensateActivityContext{``0,``1}},MassTransit.IPartitioner,System.Func{MassTransit.CompensateActivityContext{``0,``1},System.String},System.Text.Encoding)">
            <summary>
            Adds a partition filter, which also limits concurrency by the partition count.
            </summary>
            <typeparam name="TActivity"></typeparam>
            <typeparam name="TLog"></typeparam>
            <param name="configurator"></param>
            <param name="partitioner">An existing partitioner to share</param>
            <param name="keyProvider">Provides the key from the message</param>
            <param name="encoding">The text encoding to use to convert the string to byte[] (defaults to UTF8)</param>
        </member>
        <member name="M:MassTransit.PartitionerConfigurationExtensions.CreatePartitioner``1(MassTransit.IPipeConfigurator{``0},System.Int32)">
            <summary>
            Create a partitioner which can be used across multiple partitioner filters
            </summary>
            <typeparam name="T"></typeparam>
            <param name="_"></param>
            <param name="partitionCount"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.PartitionerConfigurationExtensions.UsePartitioner``1(MassTransit.IPipeConfigurator{``0},System.Int32,System.Func{``0,System.Guid})">
            <summary>
            Adds a partition filter, which also limits concurrency by the partition count.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configurator"></param>
            <param name="partitionCount">The number of partitions to use when distributing message delivery</param>
            <param name="keyProvider">Provides the key from the message</param>
        </member>
        <member name="M:MassTransit.PartitionerConfigurationExtensions.UsePartitioner``1(MassTransit.IPipeConfigurator{``0},MassTransit.IPartitioner,System.Func{``0,System.Guid})">
            <summary>
            Adds a partition filter, which also limits concurrency by the partition count.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configurator"></param>
            <param name="partitioner">An existing partitioner that is shared</param>
            <param name="keyProvider">Provides the key from the message</param>
        </member>
        <member name="M:MassTransit.PartitionerConfigurationExtensions.UsePartitioner``1(MassTransit.IPipeConfigurator{``0},System.Int32,System.Func{``0,System.String},System.Text.Encoding)">
            <summary>
            Adds a partition filter, which also limits concurrency by the partition count.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configurator"></param>
            <param name="partitionCount">The number of partitions to use when distributing message delivery</param>
            <param name="keyProvider">Provides the key from the message</param>
            <param name="encoding"></param>
        </member>
        <member name="M:MassTransit.PartitionerConfigurationExtensions.UsePartitioner``1(MassTransit.IPipeConfigurator{``0},MassTransit.IPartitioner,System.Func{``0,System.String},System.Text.Encoding)">
            <summary>
            Adds a partition filter, which also limits concurrency by the partition count.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configurator"></param>
            <param name="partitioner">An existing partitioner that is shared</param>
            <param name="keyProvider">Provides the key from the message</param>
            <param name="encoding"></param>
        </member>
        <member name="M:MassTransit.PartitionerConfigurationExtensions.UsePartitioner``1(MassTransit.IPipeConfigurator{``0},System.Int32,System.Func{``0,System.Int64})">
            <summary>
            Adds a partition filter, which also limits concurrency by the partition count.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configurator"></param>
            <param name="partitionCount">The number of partitions to use when distributing message delivery</param>
            <param name="keyProvider">Provides the key from the message</param>
        </member>
        <member name="M:MassTransit.PartitionerConfigurationExtensions.UsePartitioner``1(MassTransit.IPipeConfigurator{``0},MassTransit.IPartitioner,System.Func{``0,System.Int64})">
            <summary>
            Adds a partition filter, which also limits concurrency by the partition count.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configurator"></param>
            <param name="partitioner">An existing partitioner that is shared</param>
            <param name="keyProvider">Provides the key from the message</param>
        </member>
        <member name="M:MassTransit.PartitionerConfigurationExtensions.UsePartitioner``1(MassTransit.IPipeConfigurator{``0},System.Int32,System.Func{``0,System.Byte[]})">
            <summary>
            Adds a partition filter, which also limits concurrency by the partition count.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configurator"></param>
            <param name="partitionCount">The number of partitions to use when distributing message delivery</param>
            <param name="keyProvider">Provides the key from the message</param>
        </member>
        <member name="M:MassTransit.PartitionerConfigurationExtensions.UsePartitioner``1(MassTransit.IPipeConfigurator{``0},MassTransit.IPartitioner,System.Func{``0,System.Byte[]})">
            <summary>
            Adds a partition filter, which also limits concurrency by the partition count.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configurator"></param>
            <param name="partitioner">An existing partitioner that is shared</param>
            <param name="keyProvider">Provides the key from the message</param>
        </member>
        <member name="M:MassTransit.RateLimitConfigurationExtensions.UseRateLimit``1(MassTransit.IPipeConfigurator{``0},System.Int32,MassTransit.Middleware.IPipeRouter)">
            <summary>
            Specify a rate limit for message processing, so that only the specified number of messages are allowed
            per interval.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configurator"></param>
            <param name="rateLimit">The number of messages allowed per interval</param>
            <param name="router">The control pipe used to adjust the rate limit dynamically</param>
        </member>
        <member name="M:MassTransit.RateLimitConfigurationExtensions.UseRateLimit``1(MassTransit.IPipeConfigurator{``0},System.Int32,System.TimeSpan,MassTransit.Middleware.IPipeRouter)">
            <summary>
            Specify a rate limit for message processing, so that only the specified number of messages are allowed
            per interval.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configurator"></param>
            <param name="rateLimit">The number of messages allowed per interval</param>
            <param name="interval">The reset interval for each set of messages</param>
            <param name="router">The control pipe used to adjust the rate limit dynamically</param>
        </member>
        <member name="M:MassTransit.RateLimitConfigurationExtensions.UseRateLimit(MassTransit.IConsumePipeConfigurator,System.Int32,System.TimeSpan)">
            <summary>
            Specify a rate limit for message processing, so that only the specified number of messages are allowed
            per interval.
            </summary>
            <param name="configurator"></param>
            <param name="rateLimit">The number of messages allowed per interval</param>
            <param name="interval">The reset interval for each set of messages</param>
        </member>
        <member name="M:MassTransit.RawJsonSerializerConfigurationExtensions.UseRawJsonSerializer(MassTransit.IBusFactoryConfigurator,MassTransit.Serialization.RawSerializerOptions,System.Boolean)">
            <summary>
            Serialize messages using the raw JSON message serializer
            </summary>
            <param name="configurator"></param>
            <param name="options">Options for the raw serializer behavior</param>
            <param name="isDefault">If true, set the default content type to the content type of the deserializer</param>
        </member>
        <member name="M:MassTransit.RawJsonSerializerConfigurationExtensions.AddRawJsonSerializer(MassTransit.IBusFactoryConfigurator,MassTransit.Serialization.RawSerializerOptions)">
            <summary>
            Add support for RAW JSON message serialization and deserialization (does not change the default serializer)
            </summary>
            <param name="configurator"></param>
            <param name="options">Options for the raw serializer behavior</param>
        </member>
        <member name="M:MassTransit.RawJsonSerializerConfigurationExtensions.UseRawJsonDeserializer(MassTransit.IBusFactoryConfigurator,MassTransit.Serialization.RawSerializerOptions,System.Boolean)">
            <summary>
            Serialize messages using the raw JSON message serializer
            </summary>
            <param name="configurator"></param>
            <param name="options">Options for the raw serializer behavior</param>
            <param name="isDefault">If true, set the default content type to the content type of the deserializer</param>
        </member>
        <member name="M:MassTransit.RawJsonSerializerConfigurationExtensions.UseRawJsonSerializer(MassTransit.IReceiveEndpointConfigurator,MassTransit.Serialization.RawSerializerOptions,System.Boolean)">
            <summary>
            Serialize messages using the raw JSON message serializer
            </summary>
            <param name="configurator"></param>
            <param name="options">Options for the raw serializer behavior</param>
            <param name="isDefault">If true, set the default content type to the content type of the deserializer</param>
        </member>
        <member name="M:MassTransit.RawJsonSerializerConfigurationExtensions.UseRawJsonDeserializer(MassTransit.IReceiveEndpointConfigurator,MassTransit.Serialization.RawSerializerOptions,System.Boolean)">
            <summary>
            Serialize messages using the raw JSON message serializer
            </summary>
            <param name="configurator"></param>
            <param name="options">Options for the raw serializer behavior</param>
            <param name="isDefault">If true, set the default content type to the content type of the deserializer</param>
        </member>
        <member name="M:MassTransit.ReceiveEndpointConfigurationExtensions.ReceiveEndpoint(MassTransit.IBusFactoryConfigurator,System.Action{MassTransit.IReceiveEndpointConfigurator})">
            <summary>
            Creates a temporary endpoint, with a dynamically generated name, that should be removed when the bus is stopped.
            </summary>
            <param name="configurator"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ReceiveEndpointConfigurationExtensions.ReceiveEndpoint(MassTransit.IBusFactoryConfigurator,MassTransit.IEndpointDefinition,System.Action{MassTransit.IReceiveEndpointConfigurator})">
            <summary>
            Creates a management endpoint which can be used by controllable filters on a bus instance
            </summary>
            <param name="configurator"></param>
            <param name="definition"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ReceivePipeConfigurationExtensions.ConfigureDefaultDeadLetterTransport(MassTransit.IReceivePipelineConfigurator)">
            <summary>
            Use the default _skipped transport for messages that are not consumed
            </summary>
            <param name="configurator"></param>
        </member>
        <member name="M:MassTransit.ReceivePipeConfigurationExtensions.DiscardSkippedMessages(MassTransit.IReceivePipelineConfigurator)">
            <summary>
            Messages that are not consumed should be discarded instead of being moved to _skipped queue
            </summary>
            <param name="configurator"></param>
        </member>
        <member name="M:MassTransit.ReceivePipeConfigurationExtensions.ConfigureDefaultErrorTransport(MassTransit.IReceivePipelineConfigurator)">
            <summary>
            Generate a <see cref="T:MassTransit.ReceiveFault" /> event and move the message to the _error transport.
            </summary>
            <param name="configurator"></param>
        </member>
        <member name="M:MassTransit.ReceivePipeConfigurationExtensions.DiscardFaultedMessages(MassTransit.IReceivePipelineConfigurator)">
            <summary>
            Messages that fault should be discarded instead of being moved to the _error queue. Fault events
            will still be published.
            </summary>
            <param name="configurator"></param>
        </member>
        <member name="M:MassTransit.ReceivePipeConfigurationExtensions.RethrowFaultedMessages(MassTransit.IReceivePipelineConfigurator)">
            <summary>
            Messages that fault should throw exceptions, suppressing the default error queue behavior
            </summary>
            <param name="configurator"></param>
        </member>
        <member name="M:MassTransit.ReceivePipeConfigurationExtensions.ThrowOnSkippedMessages(MassTransit.IReceivePipelineConfigurator)">
            <summary>
            Messages that are not consumed should throw an exception, forcing the default dead letter behavior
            </summary>
            <param name="configurator"></param>
        </member>
        <member name="M:MassTransit.RegistrationContextExtensions.ConfigureEndpoints``1(MassTransit.IReceiveConfigurator{``0},MassTransit.IBusRegistrationContext,MassTransit.IEndpointNameFormatter)">
            <summary>
            Configure the endpoints for all defined consumer, saga, and activity types using an optional
            endpoint name formatter. If no endpoint name formatter is specified and an <see cref="T:MassTransit.IEndpointNameFormatter" />
            is registered in the container, it is resolved from the container. Otherwise, the <see cref="T:MassTransit.DefaultEndpointNameFormatter" />
            is used.
            </summary>
            <param name="configurator">The <see cref="T:MassTransit.IBusFactoryConfigurator" /> for the bus being configured</param>
            <param name="registration">The registration for this bus instance</param>
            <param name="endpointNameFormatter">Optional, the endpoint name formatter</param>
            <typeparam name="T">The bus factory type (depends upon the transport)</typeparam>
        </member>
        <member name="M:MassTransit.RegistrationContextExtensions.ConfigureEndpoints``1(MassTransit.IReceiveConfigurator{``0},MassTransit.IBusRegistrationContext,System.Action{MassTransit.DependencyInjection.Registration.IRegistrationFilterConfigurator},MassTransit.IEndpointNameFormatter)">
            <summary>
            Configure the endpoints for all defined consumer, saga, and activity types using an optional
            endpoint name formatter. If no endpoint name formatter is specified and an <see cref="T:MassTransit.IEndpointNameFormatter" />
            is registered in the container, it is resolved from the container. Otherwise, the <see cref="T:MassTransit.DefaultEndpointNameFormatter" />
            is used.
            </summary>
            <param name="configurator">The <see cref="T:MassTransit.IBusFactoryConfigurator" /> for the bus being configured</param>
            <param name="registration">The registration for this bus instance</param>
            <param name="configureFilter">Filter the configured consumers, sagas, and activities</param>
            <param name="endpointNameFormatter">Optional, the endpoint name formatter</param>
            <typeparam name="T">The bus factory type (depends upon the transport)</typeparam>
        </member>
        <member name="M:MassTransit.RegistrationContextExtensions.ConfigureServiceEndpoints``1(MassTransit.IBusFactoryConfigurator{``0},MassTransit.IBusRegistrationContext,System.Action{MassTransit.DependencyInjection.Registration.IRegistrationFilterConfigurator},MassTransit.ServiceInstanceOptions)">
            <summary>
            Configure a service instance for use with the job service
            </summary>
            <param name="configurator">The <see cref="T:MassTransit.IBusFactoryConfigurator" /> for the bus being configured</param>
            <param name="registration">The registration for this bus instance</param>
            <param name="configureFilter">Filter the configured consumers, sagas, and activities</param>
            <param name="options">Optional service instance options to start</param>
            <typeparam name="T">The bus factory type (depends upon the transport)</typeparam>
        </member>
        <member name="M:MassTransit.RegistrationContextExtensions.ConfigureServiceEndpoints``1(MassTransit.IBusFactoryConfigurator{``0},MassTransit.IBusRegistrationContext,MassTransit.ServiceInstanceOptions)">
            <summary>
            Configure a service instance for use with the job service
            </summary>
            <param name="configurator">The <see cref="T:MassTransit.IBusFactoryConfigurator" /> for the bus being configured</param>
            <param name="registration">The registration for this bus instance</param>
            <param name="options">Optional service instance options to start</param>
            <typeparam name="T">The bus factory type (depends upon the transport)</typeparam>
        </member>
        <member name="M:MassTransit.RegistrationContextExtensions.ConfigureConsumer(MassTransit.IReceiveEndpointConfigurator,MassTransit.IRegistrationContext,System.Type)">
            <summary>
            Configure a consumer on the receive endpoint
            </summary>
            <param name="configurator"></param>
            <param name="registration">The registration for this bus instance</param>
            <param name="consumerType">The consumer type</param>
        </member>
        <member name="M:MassTransit.RegistrationContextExtensions.ConfigureConsumer``1(MassTransit.IReceiveEndpointConfigurator,MassTransit.IRegistrationContext,System.Action{MassTransit.IConsumerConfigurator{``0}})">
            <summary>
            Configure a consumer on the receive endpoint, with an optional configuration action
            </summary>
            <param name="configurator"></param>
            <param name="registration">The registration for this bus instance</param>
            <param name="configure"></param>
            <typeparam name="T">The consumer type</typeparam>
        </member>
        <member name="M:MassTransit.RegistrationContextExtensions.ConfigureConsumers(MassTransit.IReceiveEndpointConfigurator,MassTransit.IRegistrationContext)">
            <summary>
            Configure all registered consumers on the receive endpoint
            </summary>
            <param name="configurator"></param>
            <param name="registration">The registration for this bus instance</param>
        </member>
        <member name="M:MassTransit.RegistrationContextExtensions.ConfigureSaga(MassTransit.IReceiveEndpointConfigurator,MassTransit.IRegistrationContext,System.Type)">
            <summary>
            Configure a saga on the receive endpoint
            </summary>
            <param name="configurator"></param>
            <param name="registration">The registration for this bus instance</param>
            <param name="sagaType">The saga type</param>
        </member>
        <member name="M:MassTransit.RegistrationContextExtensions.ConfigureSaga``1(MassTransit.IReceiveEndpointConfigurator,MassTransit.IRegistrationContext,System.Action{MassTransit.ISagaConfigurator{``0}})">
            <summary>
            Configure a saga on the receive endpoint, with an optional configuration action
            </summary>
            <param name="configurator"></param>
            <param name="registration">The registration for this bus instance</param>
            <param name="configure"></param>
            <typeparam name="T">The saga type</typeparam>
        </member>
        <member name="M:MassTransit.RegistrationContextExtensions.ConfigureSagas(MassTransit.IReceiveEndpointConfigurator,MassTransit.IRegistrationContext)">
            <summary>
            Configure all registered sagas on the receive endpoint
            </summary>
            <param name="configurator"></param>
            <param name="registration">The registration for this bus instance</param>
        </member>
        <member name="M:MassTransit.RegistrationContextExtensions.ConfigureActivity(MassTransit.IReceiveEndpointConfigurator,MassTransit.IReceiveEndpointConfigurator,MassTransit.IRegistrationContext,System.Type)">
            <summary>
            Configure the specified activity type
            </summary>
            <param name="configurator"></param>
            <param name="compensateEndpointConfigurator">The configurator for the compensate activity endpoint</param>
            <param name="registration">The registration for this bus instance</param>
            <param name="activityType"></param>
        </member>
        <member name="M:MassTransit.RegistrationContextExtensions.ConfigureExecuteActivity(MassTransit.IReceiveEndpointConfigurator,MassTransit.IRegistrationContext,System.Type)">
            <summary>
            Configure the specified execute activity type
            </summary>
            <param name="configurator"></param>
            <param name="registration">The registration for this bus instance</param>
            <param name="activityType"></param>
        </member>
        <member name="M:MassTransit.RegistrationContextExtensions.ConfigureActivityExecute(MassTransit.IReceiveEndpointConfigurator,MassTransit.IRegistrationContext,System.Type,System.Uri)">
            <summary>
            Configure the specified activity type
            </summary>
            <param name="configurator">The configurator for the execute activity endpoint</param>
            <param name="registration">The registration for this bus instance</param>
            <param name="activityType"></param>
            <param name="compensateAddress"></param>
        </member>
        <member name="M:MassTransit.RegistrationContextExtensions.ConfigureActivityCompensate(MassTransit.IReceiveEndpointConfigurator,MassTransit.IRegistrationContext,System.Type)">
            <summary>
            Configure the specified activity type
            </summary>
            <param name="configurator">The configurator for the compensate activity endpoint</param>
            <param name="registration">The registration for this bus instance</param>
            <param name="activityType"></param>
        </member>
        <member name="M:MassTransit.RegistrationExtensions.AddConsumer``2(MassTransit.IRegistrationConfigurator,System.Action{MassTransit.IConsumerConfigurator{``0}})">
            <summary>
            Adds the consumer, allowing configuration when it is configured on an endpoint
            </summary>
            <param name="configurator"></param>
            <param name="configure"></param>
            <typeparam name="T">The consumer type</typeparam>
            <typeparam name="TDefinition">The consumer definition type</typeparam>
        </member>
        <member name="M:MassTransit.RegistrationExtensions.AddConsumers(MassTransit.IRegistrationConfigurator,System.Reflection.Assembly[])">
            <summary>
            Adds all consumers in the specified assemblies
            </summary>
            <param name="configurator"></param>
            <param name="assemblies">The assemblies to scan for consumers</param>
        </member>
        <member name="M:MassTransit.RegistrationExtensions.AddConsumers(MassTransit.IRegistrationConfigurator,System.Func{System.Type,System.Boolean},System.Reflection.Assembly[])">
            <summary>
            Adds all consumers that match the given filter in the specified assemblies
            </summary>
            <param name="configurator"></param>
            <param name="filter"></param>
            <param name="assemblies">The assemblies to scan for consumers</param>
        </member>
        <member name="M:MassTransit.RegistrationExtensions.AddConsumersFromNamespaceContaining``1(MassTransit.IRegistrationConfigurator,System.Func{System.Type,System.Boolean})">
            <summary>
            Adds all consumers from the assembly containing the specified type that are in the same (or deeper) namespace.
            </summary>
            <param name="configurator"></param>
            <param name="filter"></param>
            <typeparam name="T">The anchor type</typeparam>
        </member>
        <member name="M:MassTransit.RegistrationExtensions.AddConsumersFromNamespaceContaining(MassTransit.IRegistrationConfigurator,System.Type,System.Func{System.Type,System.Boolean})">
            <summary>
            Adds all consumers in the specified assemblies matching the namespace
            </summary>
            <param name="configurator"></param>
            <param name="type">The type to use to identify the assembly and namespace to scan</param>
            <param name="filter"></param>
        </member>
        <member name="M:MassTransit.RegistrationExtensions.AddConsumers(MassTransit.IRegistrationConfigurator,System.Type[])">
            <summary>
            Adds the specified consumer types
            </summary>
            <param name="configurator"></param>
            ˆ
            <param name="types">The state machine types to add</param>
        </member>
        <member name="M:MassTransit.RegistrationExtensions.AddConsumers(MassTransit.IRegistrationConfigurator,System.Func{System.Type,System.Boolean},System.Type[])">
            <summary>
            Adds the specified consumer types which match the given filter
            </summary>
            <param name="configurator"></param>
            <param name="filter"></param>
            <param name="types">The consumer types to add</param>
        </member>
        <member name="M:MassTransit.RegistrationExtensions.AddSaga``2(MassTransit.IRegistrationConfigurator,System.Action{MassTransit.ISagaConfigurator{``0}})">
            <summary>
            Adds the saga, allowing configuration when it is configured on the endpoint. This should not
            be used for state machine (Automatonymous) sagas.
            </summary>
            <param name="configurator"></param>
            <param name="configure"></param>
            <typeparam name="T">The saga type</typeparam>
            <typeparam name="TDefinition">The saga definition type</typeparam>
        </member>
        <member name="M:MassTransit.RegistrationExtensions.AddSagas(MassTransit.IRegistrationConfigurator,System.Func{System.Type,System.Boolean},System.Reflection.Assembly[])">
            <summary>
            Adds all sagas in the specified assemblies. If using state machine sagas, they should be added first using AddSagaStateMachines.
            </summary>
            <param name="configurator"></param>
            <param name="filter"></param>
            <param name="assemblies">The assemblies to scan for consumers</param>
        </member>
        <member name="M:MassTransit.RegistrationExtensions.AddSagas(MassTransit.IRegistrationConfigurator,System.Reflection.Assembly[])">
            <summary>
            Adds all sagas in the specified assemblies. If using state machine sagas, they should be added first using AddSagaStateMachines.
            </summary>
            <param name="configurator"></param>
            <param name="assemblies">The assemblies to scan for consumers</param>
        </member>
        <member name="M:MassTransit.RegistrationExtensions.AddSagasFromNamespaceContaining``1(MassTransit.IRegistrationConfigurator,System.Func{System.Type,System.Boolean})">
            <summary>
            Adds all sagas in the specified assemblies matching the namespace. If you are using both state machine and regular sagas, be
            sure to call AddSagaStateMachinesFromNamespaceContaining prior to calling this one.
            </summary>
            <param name="configurator"></param>
            <param name="filter"></param>
        </member>
        <member name="M:MassTransit.RegistrationExtensions.AddSagasFromNamespaceContaining(MassTransit.IRegistrationConfigurator,System.Type,System.Func{System.Type,System.Boolean})">
            <summary>
            Adds all sagas in the specified assemblies matching the namespace. If you are using both state machine and regular sagas, be
            sure to call AddSagaStateMachinesFromNamespaceContaining prior to calling this one.
            </summary>
            <param name="configurator"></param>
            <param name="type">The type to use to identify the assembly and namespace to scan</param>
            <param name="filter"></param>
        </member>
        <member name="M:MassTransit.RegistrationExtensions.AddSagas(MassTransit.IRegistrationConfigurator,System.Type[])">
            <summary>
            Adds the specified saga and saga definition types
            </summary>
            <param name="configurator"></param>
            <param name="types">The state machine types to add</param>
        </member>
        <member name="M:MassTransit.RegistrationExtensions.AddSagas(MassTransit.IRegistrationConfigurator,System.Func{System.Type,System.Boolean},System.Type[])">
            <summary>
            Adds the specified saga types
            </summary>
            <param name="configurator"></param>
            <param name="filter"></param>
            <param name="types">The state machine types to add</param>
        </member>
        <member name="M:MassTransit.RegistrationExtensions.AddSagaStateMachine``3(MassTransit.IRegistrationConfigurator,System.Action{MassTransit.ISagaConfigurator{``1}})">
            <summary>
            Adds a SagaStateMachine to the registry and updates the registrar prior to registering so that the default
            saga registrar isn't notified.
            </summary>
            <param name="configurator"></param>
            <param name="configure"></param>
            <typeparam name="TStateMachine">The state machine type</typeparam>
            <typeparam name="T">The state machine instance type</typeparam>
            <typeparam name="TDefinition">The saga definition type</typeparam>
        </member>
        <member name="M:MassTransit.RegistrationExtensions.AddSagaStateMachines(MassTransit.IRegistrationConfigurator,System.Reflection.Assembly[])">
            <summary>
            Adds SagaStateMachines to the registry, using the factory method, and updates the registrar prior to registering so that the default
            saga registrar isn't notified.
            </summary>
            <param name="configurator"></param>
            <param name="assemblies">The assemblies to scan for state machines</param>
        </member>
        <member name="M:MassTransit.RegistrationExtensions.AddSagaStateMachinesFromNamespaceContaining``1(MassTransit.IRegistrationConfigurator,System.Func{System.Type,System.Boolean})">
            <summary>
            Adds all saga state machines in the specified assemblies matching the namespace. If you are using both state machine and regular sagas, be
            sure to call AddSagasFromNamespaceContaining after calling this one.
            </summary>
            <param name="configurator"></param>
            <param name="filter"></param>
        </member>
        <member name="M:MassTransit.RegistrationExtensions.AddSagaStateMachinesFromNamespaceContaining(MassTransit.IRegistrationConfigurator,System.Type,System.Func{System.Type,System.Boolean})">
            <summary>
            Adds all saga state machines in the specified assemblies matching the namespace. If you are using both state machine and regular sagas, be
            sure to call AddSagasFromNamespaceContaining after calling this one.
            </summary>
            <param name="configurator"></param>
            <param name="type">The type to use to identify the assembly and namespace to scan</param>
            <param name="filter"></param>
        </member>
        <member name="M:MassTransit.RegistrationExtensions.AddSagaStateMachines(MassTransit.IRegistrationConfigurator,System.Type[])">
            <summary>
            Adds SagaStateMachines to the registry, using the factory method, and updates the registrar prior to registering so that the default
            saga registrar isn't notified.
            </summary>
            <param name="configurator"></param>
            <param name="types">The state machine types to add</param>
        </member>
        <member name="M:MassTransit.RegistrationExtensions.AddSagaStateMachines(MassTransit.IRegistrationConfigurator,System.Func{System.Type,System.Boolean},System.Type[])">
            <summary>
            Adds SagaStateMachines to the registry, using the factory method, and updates the registrar prior to registering so that the default
            saga registrar isn't notified.
            </summary>
            <param name="configurator"></param>
            <param name="filter"></param>
            <param name="types">The state machine types to add</param>
        </member>
        <member name="M:MassTransit.RegistrationExtensions.AddExecuteActivity``3(MassTransit.IRegistrationConfigurator,System.Action{MassTransit.IExecuteActivityConfigurator{``0,``1}})">
            <summary>
            Adds an execute activity (Courier), allowing configuration when it is configured on the endpoint.
            </summary>
            <param name="configurator"></param>
            <param name="configure"></param>
            <typeparam name="TActivity">The activity type</typeparam>
            <typeparam name="TArguments">The argument type</typeparam>
            <typeparam name="TDefinition">The activity definition type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.RegistrationExtensions.AddActivity``4(MassTransit.IRegistrationConfigurator,System.Action{MassTransit.IExecuteActivityConfigurator{``0,``1}},System.Action{MassTransit.ICompensateActivityConfigurator{``0,``2}})">
            <summary>
            Adds an activity (Courier), allowing configuration when it is configured on the endpoint.
            </summary>
            <param name="configurator"></param>
            <param name="configureExecute">The execute configuration callback</param>
            <param name="configureCompensate">The compensate configuration callback</param>
            <typeparam name="TActivity">The activity type</typeparam>
            <typeparam name="TArguments">The argument type</typeparam>
            <typeparam name="TLog">The log type</typeparam>
            <typeparam name="TDefinition">The activity definition type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.RegistrationExtensions.AddActivities(MassTransit.IRegistrationConfigurator,System.Reflection.Assembly[])">
            <summary>
            Adds all activities (including execute-only activities) in the specified assemblies.
            </summary>
            <param name="configurator"></param>
            <param name="assemblies">The assemblies to scan for consumers</param>
        </member>
        <member name="M:MassTransit.RegistrationExtensions.AddActivitiesFromNamespaceContaining``1(MassTransit.IRegistrationConfigurator,System.Func{System.Type,System.Boolean})">
            <summary>
            Adds all activities (including execute-only activities) in the specified assemblies matching the namespace.
            </summary>
            <param name="configurator"></param>
            <param name="filter"></param>
        </member>
        <member name="M:MassTransit.RegistrationExtensions.AddActivitiesFromNamespaceContaining(MassTransit.IRegistrationConfigurator,System.Type,System.Func{System.Type,System.Boolean})">
            <summary>
            Adds all activities (including execute-only activities) in the specified assemblies matching the namespace.
            </summary>
            <param name="configurator"></param>
            <param name="type">The type to use to identify the assembly and namespace to scan</param>
            <param name="filter"></param>
        </member>
        <member name="M:MassTransit.RegistrationExtensions.AddActivities(MassTransit.IRegistrationConfigurator,System.Type[])">
            <summary>
            Adds the specified activity types
            </summary>
            <param name="configurator"></param>
            <param name="types">The state machine types to add</param>
        </member>
        <member name="M:MassTransit.RegistrationExtensions.SetDefaultEndpointNameFormatter(MassTransit.IRegistrationConfigurator)">
            <summary>
            Configure the default endpoint name formatter in the container
            </summary>
            <param name="configurator"></param>
        </member>
        <member name="M:MassTransit.RegistrationExtensions.SetKebabCaseEndpointNameFormatter(MassTransit.IRegistrationConfigurator)">
            <summary>
            Configure the Kebab Case endpoint name formatter
            </summary>
            <param name="configurator"></param>
        </member>
        <member name="M:MassTransit.RegistrationExtensions.AddFuture``2(MassTransit.IRegistrationConfigurator)">
            <summary>
            Adds the consumer, allowing configuration when it is configured on an endpoint
            </summary>
            <param name="configurator"></param>
            <typeparam name="T">The consumer type</typeparam>
            <typeparam name="TDefinition">The consumer definition type</typeparam>
        </member>
        <member name="M:MassTransit.RegistrationExtensions.AddFutureRequestConsumer``4(MassTransit.IRegistrationConfigurator,System.Action{MassTransit.IConsumerConfigurator{``1}})">
            <summary>
            Adds a combined consumer/future, where the future handles the requests and the consumer is only known to the future.
            This is a shortcut method,
            </summary>
            <param name="configurator"></param>
            <param name="configure"></param>
            <typeparam name="TFuture">The consumer type</typeparam>
            <typeparam name="TConsumer"></typeparam>
            <typeparam name="TRequest"></typeparam>
            <typeparam name="TResponse"></typeparam>
        </member>
        <member name="M:MassTransit.RegistrationExtensions.AddFutures(MassTransit.IRegistrationConfigurator,System.Reflection.Assembly[])">
            <summary>
            Adds all futures in the specified assemblies
            </summary>
            <param name="configurator"></param>
            <param name="assemblies">The assemblies to scan for futures</param>
        </member>
        <member name="M:MassTransit.RegistrationExtensions.AddFutures(MassTransit.IRegistrationConfigurator,System.Func{System.Type,System.Boolean},System.Reflection.Assembly[])">
            <summary>
            Adds all futures that match the given filter in the specified assemblies
            </summary>
            <param name="configurator"></param>
            <param name="filter"></param>
            <param name="assemblies">The assemblies to scan for futures</param>
        </member>
        <member name="M:MassTransit.RegistrationExtensions.AddFuturesFromNamespaceContaining``1(MassTransit.IRegistrationConfigurator,System.Func{System.Type,System.Boolean})">
            <summary>
            Adds all futures from the assembly containing the specified type that are in the same (or deeper) namespace.
            </summary>
            <param name="configurator"></param>
            <param name="filter"></param>
            <typeparam name="T">The anchor type</typeparam>
        </member>
        <member name="M:MassTransit.RegistrationExtensions.AddFuturesFromNamespaceContaining(MassTransit.IRegistrationConfigurator,System.Type,System.Func{System.Type,System.Boolean})">
            <summary>
            Adds all futures in the specified assemblies matching the namespace
            </summary>
            <param name="configurator"></param>
            <param name="type">The type to use to identify the assembly and namespace to scan</param>
            <param name="filter"></param>
        </member>
        <member name="M:MassTransit.RegistrationExtensions.AddFutures(MassTransit.IRegistrationConfigurator,System.Type[])">
            <summary>
            Adds the specified consumer types
            </summary>
            <param name="configurator"></param>
            ˆ
            <param name="types">The state machine types to add</param>
        </member>
        <member name="M:MassTransit.RegistrationExtensions.AddFutures(MassTransit.IRegistrationConfigurator,System.Func{System.Type,System.Boolean},System.Type[])">
            <summary>
            Adds the specified consumer types which match the given filter
            </summary>
            <param name="configurator"></param>
            <param name="filter"></param>
            <param name="types">The consumer types to add</param>
        </member>
        <member name="M:MassTransit.RescueConfigurationExtensions.UseRescue(MassTransit.IPipeConfigurator{MassTransit.ReceiveContext},MassTransit.IPipe{MassTransit.ExceptionReceiveContext},System.Action{MassTransit.IExceptionConfigurator})">
            <summary>
            Rescue exceptions via the alternate pipe
            </summary>
            <param name="configurator"></param>
            <param name="rescuePipe"></param>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.RescueConfigurationExtensions.UseRescue(MassTransit.IPipeConfigurator{MassTransit.ConsumeContext},MassTransit.IPipe{MassTransit.ExceptionConsumeContext},System.Action{MassTransit.IExceptionConfigurator})">
            <summary>
            Rescue exceptions via the alternate pipe
            </summary>
            <param name="configurator"></param>
            <param name="rescuePipe"></param>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.RescueConfigurationExtensions.UseRescue``1(MassTransit.IPipeConfigurator{MassTransit.ConsumeContext{``0}},MassTransit.IPipe{MassTransit.ExceptionConsumeContext{``0}},System.Action{MassTransit.IExceptionConfigurator})">
            <summary>
            Rescue exceptions via the alternate pipe
            </summary>
            <param name="configurator"></param>
            <param name="rescuePipe"></param>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.RescueConfigurationExtensions.UseRescue``1(MassTransit.IPipeConfigurator{MassTransit.ConsumerConsumeContext{``0}},MassTransit.IPipe{MassTransit.ExceptionConsumerConsumeContext{``0}},System.Action{MassTransit.IExceptionConfigurator})">
            <summary>
            Rescue exceptions via the alternate pipe
            </summary>
            <param name="configurator"></param>
            <param name="rescuePipe"></param>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.RescueConfigurationExtensions.UseRescue``1(MassTransit.IPipeConfigurator{MassTransit.SagaConsumeContext{``0}},MassTransit.IPipe{MassTransit.ExceptionSagaConsumeContext{``0}},System.Action{MassTransit.IExceptionConfigurator})">
            <summary>
            Rescue exceptions via the alternate pipe
            </summary>
            <param name="configurator"></param>
            <param name="rescuePipe"></param>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.RescueConfigurationExtensions.UseRescue``2(MassTransit.IPipeConfigurator{``0},MassTransit.IPipe{``1},MassTransit.Middleware.RescueContextFactory{``0,``1},System.Action{MassTransit.IRescueConfigurator{``0,``1}})">
            <summary>
            Rescue exceptions via the alternate pipe
            </summary>
            <typeparam name="TContext"></typeparam>
            <typeparam name="TRescue"></typeparam>
            <param name="configurator"></param>
            <param name="rescuePipe"></param>
            <param name="rescueContextFactory">Factory method to convert the pipe context to the rescue pipe context</param>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.RescueConfigurationExtensions.UseRescue``2(MassTransit.IPipeConfigurator{``0},MassTransit.Middleware.RescueContextFactory{``0,``1},System.Action{MassTransit.IRescueConfigurator{``0,``1}})">
            <summary>
            Adds a filter to the pipe which is of a different type than the native pipe context type
            </summary>
            <typeparam name="TContext">The context type</typeparam>
            <typeparam name="TRescue">The filter context type</typeparam>
            <param name="configurator">The pipe configurator</param>
            <param name="rescueContextFactory"></param>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.RetryConfigurationExtensions.None(MassTransit.IRetryConfigurator)">
            <summary>
            Create an immediate retry policy with the specified number of retries, with no
            delay between attempts.
            </summary>
            <param name="configurator"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.RetryConfigurationExtensions.Immediate(MassTransit.IRetryConfigurator,System.Int32)">
            <summary>
            Create an immediate retry policy with the specified number of retries, with no
            delay between attempts.
            </summary>
            <param name="configurator"></param>
            <param name="retryLimit">The number of retries to attempt</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.RetryConfigurationExtensions.Intervals(MassTransit.IRetryConfigurator,System.TimeSpan[])">
            <summary>
            Create an interval retry policy with the specified intervals. The retry count equals
            the number of intervals provided
            </summary>
            <param name="configurator"></param>
            <param name="intervals">The intervals before each subsequent retry attempt</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.RetryConfigurationExtensions.Intervals(MassTransit.IRetryConfigurator,System.Int32[])">
            <summary>
            Create an interval retry policy with the specified intervals. The retry count equals
            the number of intervals provided
            </summary>
            <param name="configurator"></param>
            <param name="intervals">The intervals before each subsequent retry attempt</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.RetryConfigurationExtensions.Interval(MassTransit.IRetryConfigurator,System.Int32,System.TimeSpan)">
            <summary>
            Create an interval retry policy with the specified number of retries at a fixed interval
            </summary>
            <param name="configurator"></param>
            <param name="retryCount">The number of retry attempts</param>
            <param name="interval">The interval between each retry attempt</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.RetryConfigurationExtensions.Interval(MassTransit.IRetryConfigurator,System.Int32,System.Int32)">
            <summary>
            Create an interval retry policy with the specified number of retries at a fixed interval
            </summary>
            <param name="configurator"></param>
            <param name="retryCount">The number of retry attempts</param>
            <param name="interval">The interval between each retry attempt</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.RetryConfigurationExtensions.Exponential(MassTransit.IRetryConfigurator,System.Int32,System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Create an exponential retry policy with the specified number of retries at exponential
            intervals
            </summary>
            <param name="configurator"></param>
            <param name="retryLimit"></param>
            <param name="minInterval"></param>
            <param name="maxInterval"></param>
            <param name="intervalDelta"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.RetryConfigurationExtensions.Incremental(MassTransit.IRetryConfigurator,System.Int32,System.TimeSpan,System.TimeSpan)">
            <summary>
            Create an incremental retry policy with the specified number of retry attempts with an incrementing
            interval between retries
            </summary>
            <param name="configurator"></param>
            <param name="retryLimit">The number of retry attempts</param>
            <param name="initialInterval">The initial retry interval</param>
            <param name="intervalIncrement">The interval to add to the retry interval with each subsequent retry</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.SagaExtensions.Saga``1(MassTransit.IReceiveEndpointConfigurator,MassTransit.ISagaRepository{``0},System.Action{MassTransit.ISagaConfigurator{``0}})">
            <summary>
            Configure a saga subscription
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configurator"></param>
            <param name="sagaRepository"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.SagaExtensions.ConnectSaga``1(MassTransit.IConsumePipeConnector,MassTransit.ISagaRepository{``0},MassTransit.Configuration.IPipeSpecification{MassTransit.SagaConsumeContext{``0}}[])">
            <summary>
            Connects the saga to the bus
            </summary>
            <typeparam name="T">The saga type</typeparam>
            <param name="connector">The bus to which the saga is to be connected</param>
            <param name="sagaRepository">The saga repository</param>
            <param name="pipeSpecifications"></param>
        </member>
        <member name="M:MassTransit.SagaPipeConfiguratorExtensions.UseFilter``2(MassTransit.IPipeConfigurator{MassTransit.SagaConsumeContext{``0,``1}},MassTransit.IFilter{MassTransit.SagaConsumeContext{``0}})">
            <summary>
            Adds a filter to the pipe
            </summary>
            <typeparam name="T">The context type</typeparam>
            <typeparam name="TSaga"></typeparam>
            <param name="configurator">The pipe configurator</param>
            <param name="filter">The already built pipe</param>
        </member>
        <member name="M:MassTransit.SagaStateMachineReceiveEndpointExtensions.StateMachineSaga``1(MassTransit.IReceiveEndpointConfigurator,MassTransit.SagaStateMachine{``0},MassTransit.ISagaRepository{``0},System.Action{MassTransit.ISagaConfigurator{``0}})">
            <summary>
            Subscribe a state machine saga to the endpoint
            </summary>
            <typeparam name="TInstance">The state machine instance type</typeparam>
            <param name="configurator"></param>
            <param name="stateMachine">The state machine</param>
            <param name="repository">The saga repository for the instances</param>
            <param name="configure">Optionally configure the saga</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ScheduledRedeliveryConfigurationExtensions.UseScheduledRedelivery``1(MassTransit.IPipeConfigurator{MassTransit.ConsumeContext{``0}},System.Action{MassTransit.IRetryConfigurator})">
            <summary>
            Use the message scheduler to schedule redelivery of a specific message type based upon the retry policy, via
            the delayed exchange feature of ActiveMQ.
            </summary>
            <param name="configurator"></param>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.ScheduledRedeliveryConfigurationExtensions.UseScheduledRedelivery``1(MassTransit.IPipeConfigurator{MassTransit.ConsumeContext{``0}},MassTransit.IRetryPolicy)">
            <summary>
            Use the message scheduler to schedule redelivery of a specific message type based upon the retry policy.
            </summary>
            <param name="configurator"></param>
            <param name="retryPolicy"></param>
        </member>
        <member name="M:MassTransit.ScheduledRedeliveryConfigurationExtensions.UseScheduledRedelivery(MassTransit.IConsumePipeConfigurator,System.Action{MassTransit.IRetryConfigurator})">
            <summary>
            Configure scheduled redelivery for all message types
            </summary>
            <param name="configurator"></param>
            <param name="configureRetry"></param>
        </member>
        <member name="M:MassTransit.ScheduledRedeliveryConfigurationExtensions.UseScheduledRedelivery``1(MassTransit.IConsumerConfigurator{``0},System.Action{MassTransit.IRetryConfigurator})">
            <summary>
            Configure scheduled redelivery for the consumer, regardless of message type.
            </summary>
            <param name="configurator"></param>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.ScheduledRedeliveryConfigurationExtensions.UseScheduledRedelivery``1(MassTransit.ISagaConfigurator{``0},System.Action{MassTransit.IRetryConfigurator})">
            <summary>
            Configure scheduled redelivery for the saga, regardless of message type.
            </summary>
            <param name="configurator"></param>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.ScheduledRedeliveryConfigurationExtensions.UseScheduledRedelivery``1(MassTransit.IHandlerConfigurator{``0},System.Action{MassTransit.IRetryConfigurator})">
            <summary>
            Configures the message retry for the handler, regardless of message type.
            </summary>
            <param name="configurator"></param>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.DelegatePipeConfiguratorExtensions.UseSendExecute(MassTransit.ISendPipeConfigurator,System.Action{MassTransit.SendContext})">
            <summary>
            Adds a callback filter to the send pipeline
            </summary>
            <param name="configurator"></param>
            <param name="callback">The callback to invoke</param>
        </member>
        <member name="M:MassTransit.DelegatePipeConfiguratorExtensions.UseSendExecuteAsync(MassTransit.ISendPipeConfigurator,System.Func{MassTransit.SendContext,System.Threading.Tasks.Task})">
            <summary>
            Adds a callback filter to the send pipeline
            </summary>
            <param name="configurator"></param>
            <param name="callback">The callback to invoke</param>
        </member>
        <member name="M:MassTransit.DelegatePipeConfiguratorExtensions.UseSendExecute``1(MassTransit.ISendPipeConfigurator,System.Action{MassTransit.SendContext{``0}})">
            <summary>
            Adds a callback filter to the send pipeline
            </summary>
            <param name="configurator"></param>
            <param name="callback">The callback to invoke</param>
        </member>
        <member name="M:MassTransit.DelegatePipeConfiguratorExtensions.UseSendExecuteAsync``1(MassTransit.ISendPipeConfigurator,System.Func{MassTransit.SendContext{``0},System.Threading.Tasks.Task})">
            <summary>
            Adds a callback filter to the send pipeline
            </summary>
            <param name="configurator"></param>
            <param name="callback">The callback to invoke</param>
        </member>
        <member name="M:MassTransit.ServiceInstanceConfigurationExtensions.ServiceInstance``1(MassTransit.IBusFactoryConfigurator{``0},System.Action{MassTransit.IServiceInstanceConfigurator{``0}})">
            <summary>
            Configure a service instance for use with the job service
            </summary>
            <param name="configurator"></param>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.ServiceInstanceConfigurationExtensions.ServiceInstance``1(MassTransit.IBusFactoryConfigurator{``0},MassTransit.ServiceInstanceOptions,System.Action{MassTransit.IServiceInstanceConfigurator{``0}})">
            <summary>
            Configure a service instance for use with the job service
            </summary>
            <param name="configurator"></param>
            <param name="options"></param>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.ServiceInstanceOptions.EnableJobServiceEndpoints">
            <summary>
            Enable the job service endpoints, so that <see cref="T:MassTransit.IJobConsumer`1" /> consumers
            can be configured.
            </summary>
        </member>
        <member name="M:MassTransit.SetSerializerSendConventionExtensions.UseSerializer``1(MassTransit.IMessageSendTopologyConfigurator{``0},System.Net.Mime.ContentType)">
            <summary>
            Use the message serializer identified by the specified content type to serialize messages of this type
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="configurator"></param>
            <param name="contentType"></param>
        </member>
        <member name="M:MassTransit.SetSerializerSendConventionExtensions.UseSerializer``1(MassTransit.IMessageSendTopologyConfigurator{``0},System.String)">
            <summary>
            Use the message serializer identified by the specified content type to serialize messages of this type
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="configurator"></param>
            <param name="contentType"></param>
        </member>
        <member name="T:MassTransit.SnakeCaseEndpointNameFormatter">
            <summary>
            Formats the endpoint name using snake case. For example,
            SubmitOrderConsumer -> submit_order
            OrderState -> order_state
            UpdateCustomerActivity -> update_customer_execute, update_customer_compensate
            </summary>
        </member>
        <member name="M:MassTransit.SnakeCaseEndpointNameFormatter.#ctor(System.Boolean)">
            <summary>
            Snake case endpoint formatter, which uses underscores between words
            </summary>
            <param name="includeNamespace">If true, the namespace is included in the name</param>
        </member>
        <member name="M:MassTransit.SnakeCaseEndpointNameFormatter.#ctor(System.String,System.Boolean)">
            <summary>
            Snake case endpoint formatter, which uses underscores between words
            </summary>
            <param name="prefix">Prefix to start the name, should match the casing of the formatter (such as Dev or PreProd)</param>
            <param name="includeNamespace">If true, the namespace is included in the name</param>
        </member>
        <member name="M:MassTransit.SnakeCaseEndpointNameFormatter.#ctor(System.Char,System.String,System.Boolean)">
            <summary>
            Snake case endpoint formatter, which uses underscores between words
            </summary>
            <param name="separator">Specify a separator other than _ to separate words</param>
            <param name="prefix">Prefix to start the name, should match the casing of the formatter (such as Dev or PreProd)</param>
            <param name="includeNamespace">If true, the namespace is included in the name</param>
        </member>
        <member name="M:MassTransit.TimeoutConfiguratorExtensions.UseTimeout``1(MassTransit.IPipeConfigurator{MassTransit.ConsumeContext{``0}},System.Action{MassTransit.ITimeoutConfigurator})">
            <summary>
            Cancels context's CancellationToken once timeout is reached.
            </summary>
            <param name="configurator">The pipe configurator</param>
            <param name="configure">Configure timeout</param>
        </member>
        <member name="M:MassTransit.TimeoutConfiguratorExtensions.UseTimeout(MassTransit.IConsumePipeConfigurator,System.Action{MassTransit.ITimeoutConfigurator})">
            <summary>
            Cancels context's CancellationToken once timeout is reached.
            </summary>
            <param name="configurator">The pipe configurator</param>
            <param name="configure">Configure timeout</param>
        </member>
        <member name="M:MassTransit.TimeoutConfiguratorExtensions.UseTimeout``1(MassTransit.IConsumerConfigurator{``0},System.Action{MassTransit.ITimeoutConfigurator})">
            <summary>
            Cancels context's CancellationToken once timeout is reached.
            </summary>
            <param name="configurator">The pipe configurator</param>
            <param name="configure">Configure timeout</param>
        </member>
        <member name="M:MassTransit.TimeoutConfiguratorExtensions.UseTimeout``1(MassTransit.ISagaConfigurator{``0},System.Action{MassTransit.ITimeoutConfigurator})">
            <summary>
            Cancels context's CancellationToken once timeout is reached.
            </summary>
            <param name="configurator">The pipe configurator</param>
            <param name="configure">Configure timeout</param>
        </member>
        <member name="M:MassTransit.TimeoutConfiguratorExtensions.UseTimeout``1(MassTransit.IHandlerConfigurator{``0},System.Action{MassTransit.ITimeoutConfigurator})">
            <summary>
            Cancels context's CancellationToken once timeout is reached.
            </summary>
            <param name="configurator">The pipe configurator</param>
            <param name="configure">Configure timeout</param>
        </member>
        <member name="M:MassTransit.TransactionConfiguratorExtensions.UseTransaction``1(MassTransit.IPipeConfigurator{``0},System.Action{MassTransit.ITransactionConfigurator})">
            <summary>
            Encapsulate the pipe behavior in a transaction
            </summary>
            <typeparam name="T">The pipe context type</typeparam>
            <param name="configurator">The pipe configurator</param>
            <param name="configure">Configure the transaction pipe</param>
        </member>
        <member name="M:MassTransit.TransformConfigurationExtensions.UseTransform``1(MassTransit.IConsumePipeConfigurator,System.Action{MassTransit.ITransformConfigurator{``0}})">
            <summary>
            Apply a message transform, the behavior of which is defined inline using the configurator
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="configurator">The consume pipe configurator</param>
            <param name="configure">The configuration callback</param>
        </member>
        <member name="M:MassTransit.TransformConfigurationExtensions.UseTransform``1(MassTransit.IConsumePipeConfigurator,System.Func{MassTransit.ITransformSpecificationConfigurator{``0},MassTransit.Configuration.IConsumeTransformSpecification{``0}})">
            <summary>
            Encapsulate the pipe behavior in a transaction
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configurator"></param>
            <param name="getSpecification"></param>
        </member>
        <member name="M:MassTransit.TransformConfigurationExtensions.UseTransform``1(MassTransit.IPipeConfigurator{MassTransit.ConsumeContext{``0}},System.Action{MassTransit.ITransformConfigurator{``0}})">
            <summary>
            Apply a message transform, the behavior of which is defined inline using the configurator
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="configurator">The consume pipe configurator</param>
            <param name="configure">The configuration callback</param>
        </member>
        <member name="M:MassTransit.TransformConfigurationExtensions.UseTransform``1(MassTransit.IPipeConfigurator{MassTransit.ConsumeContext{``0}},System.Func{MassTransit.ITransformSpecificationConfigurator{``0},MassTransit.Configuration.IConsumeTransformSpecification{``0}})">
            <summary>
            Encapsulate the pipe behavior in a transaction
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configurator"></param>
            <param name="getSpecification"></param>
        </member>
        <member name="M:MassTransit.TransformConfigurationExtensions.UseTransform``1(MassTransit.ISendPipeConfigurator,System.Action{MassTransit.ITransformConfigurator{``0}})">
            <summary>
            Apply a transform on send to the message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="configurator">The consume pipe configurator</param>
            <param name="configure">The configuration callback</param>
        </member>
        <member name="M:MassTransit.TransformConfigurationExtensions.UseTransform``1(MassTransit.IPublishPipeConfigurator,System.Action{MassTransit.ITransformConfigurator{``0}})">
            <summary>
            Apply a transform on send to the message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="configurator">The consume pipe configurator</param>
            <param name="configure">The configuration callback</param>
        </member>
        <member name="M:MassTransit.ConsumeContextActivatorExtensions.GetServiceOrCreateInstance``1(MassTransit.ConsumeContext)">
            <summary>
            If the <see cref="T:MassTransit.ConsumeContext" /> has an <see cref="T:System.IServiceProvider" /> or <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceScope" /> payload,
            use that payload to get the service or create an instance of the specified type.
            </summary>
            <param name="context"></param>
            <typeparam name="T">The service type</typeparam>
            <returns></returns>
            <exception cref="T:MassTransit.PayloadNotFoundException"></exception>
        </member>
        <member name="M:MassTransit.ConsumeContextActivatorExtensions.CreateInstance``1(MassTransit.ConsumeContext,System.Object[])">
            <summary>
            If the <see cref="T:MassTransit.ConsumeContext" /> has an <see cref="T:System.IServiceProvider" /> or <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceScope" /> payload,
            use that payload to create an instance of the specified type.
            </summary>
            <param name="context"></param>
            <param name="arguments"></param>
            <typeparam name="T">The service type</typeparam>
            <returns></returns>
            <exception cref="T:MassTransit.PayloadNotFoundException"></exception>
        </member>
        <member name="M:MassTransit.BatchConsumerExtensions.Batch``1(MassTransit.IReceiveEndpointConfigurator,System.Action{MassTransit.IBatchConfigurator{``0}})">
            <summary>
            Configure a Batch&lt;<typeparamref name="TMessage" />&gt; consumer, which allows messages to be collected into an array and consumed
            at once. This feature is experimental, but often requested. Be sure to configure the transport with sufficient concurrent message
            capacity (prefetch, etc.) so that a batch can actually complete without always reaching the time limit.
            </summary>
            <typeparam name="TMessage"></typeparam>
            <param name="configurator"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.BatchConsumerExtensions.Consumer``2(MassTransit.IBatchConfigurator{``1},System.Func{``0})">
            <summary>
            Connect a consumer with a consumer factory method
            </summary>
            <typeparam name="TConsumer"></typeparam>
            <typeparam name="TMessage"></typeparam>
            <param name="configurator"></param>
            <param name="consumerFactoryMethod"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.BatchConsumerExtensions.Consumer``2(MassTransit.IBatchConfigurator{``1},MassTransit.IConsumerFactory{``0})">
            <summary>
            Connect a consumer with a consumer factory method
            </summary>
            <typeparam name="TConsumer"></typeparam>
            <typeparam name="TMessage"></typeparam>
            <param name="configurator"></param>
            <param name="consumerFactory"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Batching.IBatchCollector`1.Complete(MassTransit.ConsumeContext{`0},MassTransit.Batching.BatchConsumer{`0})">
            <summary>
            Complete the consumer, since it's already completed, to clear the dictionary if it matches
            </summary>
            <param name="context"></param>
            <param name="consumer"></param>
        </member>
        <member name="T:MassTransit.ConsumerConvention">
            <summary>
            Used to register conventions for consumer message types
            </summary>
        </member>
        <member name="M:MassTransit.ConsumerConvention.Register``1">
            <summary>
            Register a consumer convention to be used for finding message types
            </summary>
            <typeparam name="T">The convention type</typeparam>
        </member>
        <member name="M:MassTransit.ConsumerConvention.Register``1(``0)">
            <summary>
            Register a consumer convention to be used for finding message types
            </summary>
            <typeparam name="T">The convention type</typeparam>
        </member>
        <member name="M:MassTransit.ConsumerConvention.Remove``1">
            <summary>
            Remove a consumer convention used for finding message types
            </summary>
            <typeparam name="T">The convention type to remove</typeparam>
        </member>
        <member name="M:MassTransit.ConsumerExtensions.Consumer``1(MassTransit.IReceiveEndpointConfigurator,MassTransit.IConsumerFactory{``0},System.Action{MassTransit.IConsumerConfigurator{``0}})">
            <summary>
            Connect a consumer to the receiving endpoint
            </summary>
            <typeparam name="TConsumer"></typeparam>
            <param name="configurator"></param>
            <param name="consumerFactory"></param>
            <param name="configure">Optional, configure the consumer</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ConsumerExtensions.ConnectConsumer``1(MassTransit.IConsumePipeConnector,MassTransit.IConsumerFactory{``0},MassTransit.Configuration.IPipeSpecification{MassTransit.ConsumerConsumeContext{``0}}[])">
            <summary>
            Connect a consumer to the bus instance's default endpoint
            </summary>
            <typeparam name="TConsumer"></typeparam>
            <param name="connector"></param>
            <param name="consumerFactory"></param>
            <param name="pipeSpecifications"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ConsumerExtensions.Consumer``1(MassTransit.IReceiveEndpointConfigurator,System.Action{MassTransit.IConsumerConfigurator{``0}})">
            <summary>
            Subscribes a consumer with a default constructor to the endpoint
            </summary>
            <typeparam name="TConsumer">The consumer type</typeparam>
            <param name="configurator"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ConsumerExtensions.ConnectConsumer``1(MassTransit.IConsumePipeConnector,MassTransit.Configuration.IPipeSpecification{MassTransit.ConsumerConsumeContext{``0}}[])">
            <summary>
            Subscribe a consumer with a default constructor to the bus's default endpoint
            </summary>
            <typeparam name="TConsumer"></typeparam>
            <param name="connector"></param>
            <param name="pipeSpecifications"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ConsumerExtensions.Consumer``1(MassTransit.IReceiveEndpointConfigurator,System.Func{``0},System.Action{MassTransit.IConsumerConfigurator{``0}})">
            <summary>
            Connect a consumer with a consumer factory method
            </summary>
            <typeparam name="TConsumer"></typeparam>
            <param name="configurator"></param>
            <param name="consumerFactoryMethod"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ConsumerExtensions.ConnectConsumer``1(MassTransit.IConsumePipeConnector,System.Func{``0},MassTransit.Configuration.IPipeSpecification{MassTransit.ConsumerConsumeContext{``0}}[])">
            <summary>
            Subscribe a consumer with a consumer factor method to the bus's default endpoint
            </summary>
            <typeparam name="TConsumer"></typeparam>
            <param name="connector"></param>
            <param name="consumerFactoryMethod"></param>
            <param name="pipeSpecifications"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ConsumerExtensions.Consumer(MassTransit.IReceiveEndpointConfigurator,System.Type,System.Func{System.Type,System.Object})">
            <summary>
            Connect a consumer with a consumer type and object factory method for the consumer (used by containers mostly)
            </summary>
            <param name="configurator"></param>
            <param name="consumerType"></param>
            <param name="consumerFactory"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ConsumerExtensions.ConnectConsumer(MassTransit.IConsumePipeConnector,System.Type,System.Func{System.Type,System.Object})">
            <summary>
            Connect a consumer with a consumer type and object factory method for the consumer
            </summary>
            <param name="connector"></param>
            <param name="consumerType"></param>
            <param name="objectFactory"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Consumer.InstanceConsumerFactory`1">
            <summary>
            Retains a reference to an existing message consumer, and uses it to send consumable messages for
            processing.
            </summary>
            <typeparam name="TConsumer">The consumer type</typeparam>
        </member>
        <member name="M:MassTransit.HandlerExtensions.Handler``1(MassTransit.IReceiveEndpointConfigurator,MassTransit.MessageHandler{``0},System.Action{MassTransit.IHandlerConfigurator{``0}})">
            <summary>
            Adds a handler to the receive endpoint with additional configuration specified
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configurator"></param>
            <param name="handler"></param>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.HandlerExtensions.ConnectHandler``1(MassTransit.IConsumePipeConnector,MassTransit.MessageHandler{``0},MassTransit.Configuration.IBuildPipeConfigurator{MassTransit.ConsumeContext{``0}})">
            <summary>
            Adds a message handler to the service bus for handling a specific type of message
            </summary>
            <typeparam name="T">The message type to handle, often inferred from the callback specified</typeparam>
            <param name="connector"></param>
            <param name="handler">
            The callback to invoke when messages of the specified type arrive at the service bus
            </param>
            <param name="configurator"></param>
        </member>
        <member name="M:MassTransit.HandlerExtensions.ConnectRequestHandler``1(MassTransit.IRequestPipeConnector,System.Guid,MassTransit.MessageHandler{``0},MassTransit.Configuration.IBuildPipeConfigurator{MassTransit.ConsumeContext{``0}})">
            <summary>
            Subscribe a request handler to the bus's endpoint
            </summary>
            <typeparam name="T"></typeparam>
            <param name="connector"></param>
            <param name="requestId"></param>
            <param name="handler"></param>
            <param name="configurator"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.InstanceExtensions">
            <summary>
            Extensions for subscribing object instances.
            </summary>
        </member>
        <member name="M:MassTransit.InstanceExtensions.Instance(MassTransit.IReceiveEndpointConfigurator,System.Object)">
            <summary>
            Subscribes an object instance to the bus
            </summary>
            <param name="configurator">
            Service Bus Service Configurator
            - the item that is passed as a parameter to
            the action that is calling the configurator.
            </param>
            <param name="instance">The instance to subscribe.</param>
            <returns>An instance subscription configurator.</returns>
        </member>
        <member name="M:MassTransit.InstanceExtensions.ConnectInstance(MassTransit.IConsumePipeConnector,System.Object)">
            <summary>
            Connects any consumers for the object to the message dispatcher
            </summary>
            <param name="connector">The service bus to configure</param>
            <param name="instance"></param>
            <returns>
            The unsubscribe action that can be called to unsubscribe the instance
            passed as an argument.
            </returns>
        </member>
        <member name="M:MassTransit.InstanceExtensions.Instance``1(MassTransit.IReceiveEndpointConfigurator,``0,System.Action{MassTransit.IInstanceConfigurator{``0}})">
            <summary>
            Subscribes an object instance to the bus
            </summary>
            <param name="configurator">
            Service Bus Service Configurator
            - the item that is passed as a parameter to
            the action that is calling the configurator.
            </param>
            <param name="instance">The instance to subscribe.</param>
            <param name="configure">Configure the instance</param>
            <returns>An instance subscription configurator.</returns>
        </member>
        <member name="M:MassTransit.InstanceExtensions.ConnectInstance``1(MassTransit.IConsumePipeConnector,``0)">
            <summary>
            Connects any consumers for the object to the message dispatcher
            </summary>
            <typeparam name="T">The consumer type</typeparam>
            <param name="connector">The service bus instance to call this method on.</param>
            <param name="instance">The instance to subscribe.</param>
            <returns>
            The unsubscribe action that can be called to unsubscribe the instance
            passed as an argument.
            </returns>
        </member>
        <member name="M:MassTransit.ConsumeContextEndpointExtensions.GetFaultEndpoint``1(MassTransit.ConsumeContext)">
            <summary>
            Returns the endpoint for a fault, either directly to the requester, or published
            </summary>
            <param name="context"></param>
            <typeparam name="T">The message type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ConsumeContextEndpointExtensions.GetFaultEndpoint``1(MassTransit.ConsumeContext,System.Uri,System.Nullable{System.Guid})">
            <summary>
            Returns the endpoint for a fault, either directly to the requester, or published
            </summary>
            <param name="context"></param>
            <param name="faultAddress"></param>
            <param name="requestId"></param>
            <typeparam name="T">The response type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ConsumeContextEndpointExtensions.GetReceiveFaultEndpoint(MassTransit.ReceiveContext,MassTransit.ConsumeContext,System.Nullable{System.Guid})">
            <summary>
            Returns the endpoint for a receive fault, either directly to the requester, or published
            </summary>
            <param name="context"></param>
            <param name="consumeContext"></param>
            <param name="requestId"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ConsumeContextEndpointExtensions.GetResponseEndpoint``1(MassTransit.ConsumeContext)">
            <summary>
            Returns the endpoint for a response, either directly to the requester, or published
            </summary>
            <param name="context"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ConsumeContextEndpointExtensions.GetResponseEndpoint``1(MassTransit.ConsumeContext,System.Uri,System.Nullable{System.Guid})">
            <summary>
            Returns the endpoint for a response, either directly to the requester, or published
            </summary>
            <param name="context"></param>
            <param name="responseAddress"></param>
            <param name="requestId"></param>
            <typeparam name="T">The response type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ConsumeContextEndpointExtensions.GetEndpoint``1(MassTransit.ReceiveContext,MassTransit.ConsumeContext,System.Uri,System.Nullable{System.Guid})">
            <summary>
            Returns the endpoint for a response, either directly to the requester, or published
            </summary>
            <param name="receiveContext"></param>
            <param name="consumeContext"></param>
            <param name="destinationAddress"></param>
            <param name="requestId"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Context.BindContextProxy`2">
            <summary>
            The BindContext
            </summary>
            <typeparam name="TLeft"></typeparam>
            <typeparam name="TRight"></typeparam>
        </member>
        <member name="T:MassTransit.Context.ConsumeContextProxy">
            <summary>
            A consume context proxy creates a payload scope, such that anything added to the payload
            of the context is only added at the scope level and below.
            </summary>
        </member>
        <member name="P:MassTransit.Context.ConsumeContextProxy.CancellationToken">
            <summary>
            Returns the CancellationToken for the context (implicit interface)
            </summary>
        </member>
        <member name="M:MassTransit.Context.ConsumeContextProxy.HasPayloadType(System.Type)">
            <summary>
            Returns true if the payload type is included with or supported by the context type
            </summary>
            <param name="payloadType"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Context.ConsumeContextProxy.TryGetPayload``1(``0@)">
            <summary>
            Attempts to get the specified payload type
            </summary>
            <param name="payload"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Context.ConsumeContextProxy.GetOrAddPayload``1(MassTransit.PayloadFactory{``0})">
            <summary>
            Get or add a payload to the context, using the provided payload factory.
            </summary>
            <param name="payloadFactory">The payload factory, which is only invoked if the payload is not present.</param>
            <typeparam name="T">The payload type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Context.ConsumeContextProxy.AddOrUpdatePayload``1(MassTransit.PayloadFactory{``0},MassTransit.UpdatePayloadFactory{``0})">
            <summary>
            Either adds a new payload, or updates an existing payload
            </summary>
            <param name="addFactory">The payload factory called if the payload is not present</param>
            <param name="updateFactory">The payload factory called if the payload already exists</param>
            <typeparam name="T">The payload type</typeparam>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Context.ConsumeContextProxy`1">
            <summary>
            A consume context proxy creates a payload scope, such that anything added to the payload
            of the context is only added at the scope level and below.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Context.ConsumerConsumeContextProxy`2">
            <summary>
            A consumer instance merged with a message consume context
            </summary>
            <typeparam name="TConsumer"></typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Context.ConsumerConsumeContextScope`2">
            <summary>
            A consumer instance merged with a message consume context
            </summary>
            <typeparam name="TConsumer"></typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Context.CorrelationIdConsumeContextProxy`1">
            <summary>
            A consumer instance merged with a message consume context
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:MassTransit.Context.DeserializerConsumeContext.HasPayloadType(System.Type)">
            <summary>
            Returns true if the payload type is included with or supported by the context type
            </summary>
            <param name="payloadType"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Context.DeserializerConsumeContext.TryGetPayload``1(``0@)">
            <summary>
            Attempts to get the specified payload type
            </summary>
            <param name="payload"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Context.DeserializerConsumeContext.GetOrAddPayload``1(MassTransit.PayloadFactory{``0})">
            <summary>
            Get or add a payload to the context, using the provided payload factory.
            </summary>
            <param name="payloadFactory">The payload factory, which is only invoked if the payload is not present.</param>
            <typeparam name="T">The payload type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Context.DeserializerConsumeContext.AddOrUpdatePayload``1(MassTransit.PayloadFactory{``0},MassTransit.UpdatePayloadFactory{``0})">
            <summary>
            Either adds a new payload, or updates an existing payload
            </summary>
            <param name="addFactory">The payload factory called if the payload is not present</param>
            <param name="updateFactory">The payload factory called if the payload already exists</param>
            <typeparam name="T">The payload type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Context.MessageConsumeContext`1.ResponseAsyncWithMessage``1(System.Object,MassTransit.IPipe{MassTransit.SendContext{``0}})">
            <summary>
            Initializes the response with the request message, and then uses the initializer to initialize the
            remaining properties using the <paramref name="values" /> parameter.
            </summary>
        </member>
        <member name="P:MassTransit.Context.MessageSendContext`1.IsPublish">
            <summary>
            Set to true if the message is being published
            </summary>
        </member>
        <member name="T:MassTransit.Context.SagaConsumeContextProxy`2">
            <summary>
            A consumer instance merged with a message consume context
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Context.ScheduleMessageRedeliveryContext`1">
            <summary>
            Used to schedule message redelivery using the message scheduler
            </summary>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="M:MassTransit.Context.TransportReceiveContext.GetTransportProperties">
            <summary>
            Write any transport-specific properties to the dictionary so that they can be
            restored on subsequent outgoing messages (scheduled)
            </summary>
        </member>
        <member name="P:MassTransit.TransactionContext.Transaction">
            <summary>
            Returns the current transaction scope, creating a dependent scope if a thread switch
            occurred
            </summary>
        </member>
        <member name="M:MassTransit.TransactionContext.Commit">
            <summary>
            Complete the transaction scope
            </summary>
        </member>
        <member name="M:MassTransit.TransactionContext.Rollback">
            <summary>
            Rollback the transaction
            </summary>
        </member>
        <member name="M:MassTransit.TransactionContext.Rollback(System.Exception)">
            <summary>
            Rollback the transaction
            </summary>
            <param name="exception">The exception that caused the rollback</param>
        </member>
        <member name="M:MassTransit.Courier.IRoutingSlipSendEndpointTarget.AddSubscription(System.Uri,MassTransit.Courier.Contracts.RoutingSlipEvents,MassTransit.Courier.Contracts.RoutingSlipEventContents,System.String,MassTransit.Serialization.MessageEnvelope)">
            <summary>
            Adds a custom subscription message to the routing slip which is sent at the specified events
            </summary>
            <param name="address">The destination address where the events are sent</param>
            <param name="events">The events to include in the subscription</param>
            <param name="contents">The contents of the routing slip event</param>
            <param name="activityName"></param>
            <param name="message">The custom message to be sent</param>
        </member>
        <member name="T:MassTransit.Courier.SanitizedRoutingSlip">
            <summary>
            A sanitized routing slip is one that has been read from and ensured to be safe for use, cleaning up any
            missing or null properties, as well as making it safe to avoid excessive validity checks across the solution
            </summary>
        </member>
        <member name="T:MassTransit.DependencyInjection.Bind`2">
            <summary>
            Bind is used to store types bound to their owner, such as an IBusControl to an IMyBus.
            </summary>
            <typeparam name="TKey">The key type</typeparam>
            <typeparam name="TValue">The bound type</typeparam>
        </member>
        <member name="T:MassTransit.DependencyInjection.FilterScopeProvider`2">
            <summary>
            Used by Send/Publish filters to send within either a scoped endpoint/request client context or within the consume context
            currently active
            </summary>
            <typeparam name="TFilter"></typeparam>
            <typeparam name="TContext"></typeparam>
        </member>
        <member name="T:MassTransit.DependencyInjection.IConsumeScopeProvider">
            <summary>
            Provides container scope for the consumer, either at the general level or the message-specific level.
            </summary>
        </member>
        <member name="T:MassTransit.DependencyInjection.Registration.ConsumerRegistration`1">
            <summary>
            A consumer registration represents a single consumer, which will be resolved from the container using the scope
            provider. The consumer definition, if present, is loaded from the container and used to configure the consumer
            within the receive endpoint.
            </summary>
            <typeparam name="TConsumer">The consumer type</typeparam>
        </member>
        <member name="M:MassTransit.DependencyInjection.Registration.IConsumerFactoryDecoratorRegistration`1.DecorateConsumerFactory(MassTransit.IConsumerFactory{`0})">
            <summary>
            Decorate the container-based consumer factory, returning the consumer factory that should be
            used for receive endpoint registration
            </summary>
            <param name="consumerFactory"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.DependencyInjection.Registration.IRegistrationFilterConfigurator">
            <summary>
            Specify the consumer, saga, and activity types to include/exclude
            </summary>
        </member>
        <member name="M:MassTransit.DependencyInjection.Registration.IRegistrationFilterConfigurator.Include(System.Type[])">
            <summary>
            Include the specified types
            </summary>
            <param name="types"></param>
        </member>
        <member name="M:MassTransit.DependencyInjection.Registration.IRegistrationFilterConfigurator.Include``1">
            <summary>
            Include the specified type
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MassTransit.DependencyInjection.Registration.IRegistrationFilterConfigurator.Exclude(System.Type[])">
            <summary>
            Exclude the specified types
            </summary>
            <param name="types"></param>
        </member>
        <member name="M:MassTransit.DependencyInjection.Registration.IRegistrationFilterConfigurator.Exclude``1">
            <summary>
            Exclude the specified type
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MassTransit.DependencyInjection.Registration.SagaRegistration`1">
            <summary>
            A saga registration represents a single saga, which will use the container for the scope provider, as well as
            to resolve the saga repository.
            </summary>
            <typeparam name="TSaga">The saga type</typeparam>
        </member>
        <member name="T:MassTransit.DependencyInjection.Registration.SagaStateMachineRegistration`2">
            <summary>
            A saga state machine represents a state machine and instance, which will use the container to resolve, as well
            as the saga repository.
            </summary>
            <typeparam name="TStateMachine"></typeparam>
            <typeparam name="TInstance"></typeparam>
        </member>
        <member name="T:MassTransit.DependencyInjection.ScopeCompensateActivityFactory`2">
            <summary>
            A factory to create an activity from Autofac, that manages the lifetime scope of the activity
            </summary>
            <typeparam name="TActivity"></typeparam>
            <typeparam name="TLog"></typeparam>
        </member>
        <member name="T:MassTransit.DependencyInjection.ScopedBusContextProvider">
            <summary>
            Captures the bus context for the current scope as a scoped provider, so that it can be resolved
            by components at runtime (since MS DI doesn't support runtime configuration of scopes)
            </summary>
        </member>
        <member name="T:MassTransit.DependencyInjection.ScopedBusContextProvider`1">
            <summary>
            Captures the bus context for the current scope as a scoped provider, so that it can be resolved
            by components at runtime (since MS DI doesn't support runtime configuration of scopes)
            </summary>
        </member>
        <member name="T:MassTransit.DependencyInjection.ScopedConsumeContextProvider">
            <summary>
            Captures the <see cref="T:MassTransit.ConsumeContext" /> for the current message as a scoped provider, so that it can be resolved
            by components at runtime (since MS DI doesn't support runtime configuration of scopes)
            </summary>
        </member>
        <member name="T:MassTransit.DependencyInjection.ScopeExecuteActivityFactory`2">
            <summary>
            A factory to create an activity from Autofac, that manages the lifetime scope of the activity
            </summary>
            <typeparam name="TActivity"></typeparam>
            <typeparam name="TArguments"></typeparam>
        </member>
        <member name="P:MassTransit.DependencyInjection.Testing.ContainerTestHarness.InactivityToken">
            <summary>
            CancellationToken that is cancelled when the test inactivity timeout has elapsed with no bus activity
            </summary>
        </member>
        <member name="P:MassTransit.DependencyInjection.Testing.ContainerTestHarness.CancellationToken">
            <summary>
            CancellationToken that is canceled when the test is being aborted
            </summary>
        </member>
        <member name="T:MassTransit.EndpointAddressProvider`1">
            <summary>
            Returns the address for the message provided
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.EndpointConvention.Map``1(System.Uri)">
            <summary>
            Map the message type to the specified address
            </summary>
            <typeparam name="T"></typeparam>
            <param name="destinationAddress"></param>
        </member>
        <member name="M:MassTransit.EndpointConvention.Map``1(MassTransit.EndpointAddressProvider{``0})">
            <summary>
            Map the message type to the endpoint returned by the specified method
            </summary>
            <typeparam name="T"></typeparam>
            <param name="endpointAddressProvider"></param>
        </member>
        <member name="T:MassTransit.EndpointConventionCache`1">
            <summary>
            A cache of convention-based CorrelationId mappers, used unless overridden by some mystical force
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:MassTransit.EndpointConventionExtensions.Send``1(MassTransit.ISendEndpointProvider,``0,System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="provider"></param>
            <param name="message">The message</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.EndpointConventionExtensions.Send``1(MassTransit.ISendEndpointProvider,``0,MassTransit.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="provider"></param>
            <param name="message">The message</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.EndpointConventionExtensions.Send``1(MassTransit.ISendEndpointProvider,``0,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="provider"></param>
            <param name="message">The message</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.EndpointConventionExtensions.Send(MassTransit.ISendEndpointProvider,System.Object,System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <param name="provider"></param>
            <param name="message">The message</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.EndpointConventionExtensions.Send(MassTransit.ISendEndpointProvider,System.Object,System.Type,System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <param name="provider"></param>
            <param name="message">The message</param>
            <param name="messageType"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.EndpointConventionExtensions.Send(MassTransit.ISendEndpointProvider,System.Object,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <param name="provider"></param>
            <param name="message">The message</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.EndpointConventionExtensions.Send(MassTransit.ISendEndpointProvider,System.Object,System.Type,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <param name="provider"></param>
            <param name="message">The message</param>
            <param name="messageType"></param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.EndpointConventionExtensions.Send``1(MassTransit.ISendEndpointProvider,System.Object,System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="provider"></param>
            <param name="values"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.EndpointConventionExtensions.Send``1(MassTransit.ISendEndpointProvider,System.Object,MassTransit.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="provider"></param>
            <param name="values"></param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.EndpointConventionExtensions.Send``1(MassTransit.ISendEndpointProvider,System.Object,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="provider"></param>
            <param name="values"></param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="T:MassTransit.MassTransitApplicationException">
            <summary>
            For use by application developers to include additional data elements along with the exception, which will be
            transferred to the <see cref="T:MassTransit.ExceptionInfo" /> of the <see cref="T:MassTransit.Fault`1" /> event.
            </summary>
        </member>
        <member name="M:MassTransit.ForwardExtensions.Forward``1(MassTransit.ConsumeContext,MassTransit.ISendEndpoint,``0)">
            <summary>
            Forward the message to another consumer
            </summary>
            <param name="context"></param>
            <param name="endpoint">The destination endpoint</param>
            <param name="message"></param>
        </member>
        <member name="T:MassTransit.Future`3">
            <summary>
            A future is a deterministic, durable service that given a command, executes any number
            of requests, routing slips, functions, etc. to produce a result. Once the result has been set,
            it is available to any subsequent commands and requests for the result.
            </summary>
            <typeparam name="TCommand">The command type that creates the future</typeparam>
            <typeparam name="TResult">The result type that completes the future</typeparam>
            <typeparam name="TFault">The fault type that faults the future</typeparam>
        </member>
        <member name="P:MassTransit.Future`3.CommandReceived">
            <summary>
            Initiates and correlates the command to the future. Subsequent commands received while waiting for completion
            are added as subscribers.
            </summary>
        </member>
        <member name="P:MassTransit.Future`3.ResultRequested">
            <summary>
            Used by a Future Reference to get the future's result once completed or fault once faulted.
            </summary>
        </member>
        <member name="M:MassTransit.Future`3.ConfigureCommand(System.Action{MassTransit.IEventCorrelationConfigurator{MassTransit.FutureState,`0}})">
            <summary>
            Configure the initiating command, including correlation, etc.
            </summary>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.Future`3.SendRequest``1(System.Action{MassTransit.IFutureRequestConfigurator{`2,`0,``0}})">
            <summary>
            Send a request when the future is requested
            </summary>
            <param name="configure"></param>
            <typeparam name="TRequest">The request type to send</typeparam>
        </member>
        <member name="M:MassTransit.Future`3.SendRequest``2(System.Func{`0,``0},System.Action{MassTransit.IFutureRequestConfigurator{`2,``0,``1}})">
            <summary>
            Send a request when the future is requested
            </summary>
            <param name="inputSelector">Specify an input property from the command to use as the input for the request</param>
            <param name="configure"></param>
            <typeparam name="TRequest">The request type to send</typeparam>
            <typeparam name="TInput">The input type</typeparam>
        </member>
        <member name="M:MassTransit.Future`3.SendRequests``2(System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Action{MassTransit.IFutureRequestConfigurator{`2,``0,``1}})">
            <summary>
            Sends multiple requests when the future is requested, using an enumerable request property as the source
            </summary>
            <param name="inputSelector"></param>
            <param name="configure"></param>
            <typeparam name="TRequest">The request type to send</typeparam>
            <typeparam name="TInput">The input property type</typeparam>
        </member>
        <member name="M:MassTransit.Future`3.ExecuteRoutingSlip(System.Action{MassTransit.IFutureRoutingSlipConfigurator{`1,`2,`0}})">
            <summary>
            Execute a routing slip when the future is requested
            </summary>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.Future`3.WhenAnyFaulted(System.Action{MassTransit.IFutureFaultConfigurator{`2}})">
            <summary>
            When any result faulted, Set the future Faulted
            </summary>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.FutureExtensions.InitializeFuture``1(MassTransit.EventActivityBinder{MassTransit.FutureState,``0})">
            <summary>
            Initialize the FutureState properties of the request
            </summary>
            <param name="binder"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.FutureExtensions.AddSubscription``1(MassTransit.EventActivityBinder{MassTransit.FutureState,``0})">
            <summary>
            Use when a request is received after the initial request is still awaiting completion
            </summary>
            <param name="binder"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.FutureExtensions.SetResult``2(MassTransit.EventActivityBinder{MassTransit.FutureState,``0},System.Func{MassTransit.BehaviorContext{MassTransit.FutureState,``0},System.Guid},MassTransit.AsyncEventMessageFactory{MassTransit.FutureState,``0,``1})">
            <summary>
            Set the result associated with the identifier using the message factory
            </summary>
            <param name="binder"></param>
            <param name="getResultId">Should return the result identifier</param>
            <param name="messageFactory">Should return the result message</param>
            <typeparam name="T">The event type</typeparam>
            <typeparam name="TResult">The result type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.FutureExtensions.SetResult``2(MassTransit.EventActivityBinder{MassTransit.FutureState,``0},System.Func{MassTransit.BehaviorContext{MassTransit.FutureState,``0},System.Guid},MassTransit.EventMessageFactory{MassTransit.FutureState,``0,``1})">
            <summary>
            Set the result associated with the identifier using the message factory
            </summary>
            <param name="binder"></param>
            <param name="getResultId">Should return the result identifier</param>
            <param name="messageFactory">Should return the result message</param>
            <typeparam name="T">The event type</typeparam>
            <typeparam name="TResult">The result type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.FutureExtensions.SetFault``2(MassTransit.EventActivityBinder{MassTransit.FutureState,MassTransit.Fault{``0}},System.Func{MassTransit.BehaviorContext{MassTransit.FutureState,MassTransit.Fault{``0}},System.Guid},MassTransit.EventMessageFactory{MassTransit.FutureState,MassTransit.Fault{``0},``1})">
            <summary>
            Set the result associated with the identifier using the message factory
            </summary>
            <param name="binder"></param>
            <param name="getResultId">Should return the result identifier</param>
            <param name="messageFactory">Should return the result message</param>
            <typeparam name="T">The event type</typeparam>
            <typeparam name="TResult">The result type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.FutureExtensions.SetFault``1(MassTransit.EventActivityBinder{MassTransit.FutureState,MassTransit.Courier.Contracts.RoutingSlipFaulted},MassTransit.EventMessageFactory{MassTransit.FutureState,MassTransit.Courier.Contracts.RoutingSlipFaulted,``0})">
            <summary>
            Set the result associated with the identifier using the message factory
            </summary>
            <param name="binder"></param>
            <param name="messageFactory">Should return the result message</param>
            <typeparam name="TResult">The result type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Futures.IFutureStateMachineConfigurator.SetResult``1(MassTransit.Event{``0},System.Func{MassTransit.BehaviorContext{MassTransit.FutureState,``0},System.Threading.Tasks.Task})">
            <summary>
            Set the Future's result to the specified value
            </summary>
            <param name="responseReceived"></param>
            <param name="callback"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MassTransit.Futures.IFutureStateMachineConfigurator.SetFaulted``1(MassTransit.Event{``0},System.Func{MassTransit.BehaviorContext{MassTransit.FutureState,``0},System.Threading.Tasks.Task})">
            <summary>
            Set the Future to the Faulted state, and set the Fault message
            </summary>
            <param name="requestCompleted"></param>
            <param name="callback"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MassTransit.Futures.IFutureStateMachineConfigurator.CompletePendingRequest``1(MassTransit.Event{``0},MassTransit.PendingFutureIdProvider{``0})">
            <summary>
            Set the result for a pending request and remove the identifier
            </summary>
            <param name="requestCompleted"></param>
            <param name="pendingIdProvider"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MassTransit.Futures.IFutureStateMachineConfigurator.DuringAnyWhen``1(MassTransit.Event{``0},System.Func{MassTransit.EventActivityBinder{MassTransit.FutureState,``0},MassTransit.EventActivityBinder{MassTransit.FutureState,``0}})">
            <summary>
            Add an event handler to the future
            </summary>
            <param name="whenEvent"></param>
            <param name="configure"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MassTransit.IItineraryPlanner`1">
            <summary>
            Implement to build a routing slip. This can be resolved by a durable future to build
            a routing slip at runtime in response to an input command.
            </summary>
            <typeparam name="TInput">The input message type</typeparam>
        </member>
        <member name="T:MassTransit.InitializerValueProvider`1">
            <summary>
            Given the event context and request, returns an object used to complete the initialization of the object type
            </summary>
            <param name="context"></param>
            <typeparam name="TMessage">The data type included in the context</typeparam>
        </member>
        <member name="T:MassTransit.InitializerValueProvider">
            <summary>
            Given the event context and request, returns an object used to complete the initialization of the object type
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:MassTransit.IAsyncPipeContextHandle`1">
            <summary>
            Supports the asynchronous notification of a PipeContext becoming available (this is a future of a future, basically)
            </summary>
            <typeparam name="TContext">The context type</typeparam>
        </member>
        <member name="M:MassTransit.IAsyncPipeContextHandle`1.Created(`0)">
            <summary>
            Called when the PipeContext has been created and is available for use.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IAsyncPipeContextHandle`1.CreateCanceled">
            <summary>
            Called when the PipeContext creation was canceled
            </summary>
        </member>
        <member name="M:MassTransit.IAsyncPipeContextHandle`1.CreateFaulted(System.Exception)">
            <summary>
            Called when the PipeContext creation failed
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:MassTransit.IAsyncPipeContextHandle`1.Faulted(System.Exception)">
            <summary>
            Called when the successfully created PipeContext becomes faulted, indicating that it
            should no longer be used.
            </summary>
            <param name="exception">The exception which occurred</param>
        </member>
        <member name="M:MassTransit.IEndpointConventionCache`1.TryGetEndpointAddress(System.Uri@)">
            <summary>
            Returns the endpoint address for the message
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Initializers.Conventions.IConventionTypeCache`1">
            <summary>
            A convention cache for type specified, which converts to the generic type requested
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MassTransit.Initializers.Conventions.IConventionTypeCache`1.GetOrAdd``2">
            <summary>
            Returns the cached item for the specified type key, creating a new value
            if one has not yet been created.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Initializers.HeaderInitializers.CopyHeaderInitializer`3">
            <summary>
            Set a header to a constant value from the input
            </summary>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="TInput"></typeparam>
            <typeparam name="THeader">The header type</typeparam>
        </member>
        <member name="T:MassTransit.Initializers.HeaderInitializers.ProviderHeaderInitializer`3">
            <summary>
            Set a message property using the property provider for the property value
            </summary>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="TInput"></typeparam>
            <typeparam name="TProperty"></typeparam>
        </member>
        <member name="T:MassTransit.Initializers.HeaderInitializers.SetHeaderInitializer`3">
            <summary>
            Set a header to a constant value from the input
            </summary>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="TInput"></typeparam>
            <typeparam name="THeader">The header type</typeparam>
        </member>
        <member name="T:MassTransit.Initializers.HeaderInitializers.SetStringHeaderInitializer`2">
            <summary>
            Set a header to a constant value from the input
            </summary>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="TInput"></typeparam>
        </member>
        <member name="T:MassTransit.Initializers.IHeaderInitializer`2">
            <summary>
            Initialize a message header
            </summary>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="TInput"></typeparam>
        </member>
        <member name="T:MassTransit.Initializers.IHeaderInitializer`1">
            <summary>
            Initialize a message header
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Initializers.IMessageFactory`1">
            <summary>
            Creates the message type
            </summary>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="T:MassTransit.Initializers.IMessageFactory">
            <summary>
            Creates the message type
            </summary>
        </member>
        <member name="T:MassTransit.Initializers.IPropertyConverter`2">
            <summary>
            A message property converter, which is async, and has access to the context
            </summary>
            <typeparam name="TResult"></typeparam>
            <typeparam name="TProperty"></typeparam>
        </member>
        <member name="M:MassTransit.Initializers.IPropertyConverter`2.Convert``1(MassTransit.Initializers.InitializeContext{``0},`1)">
            <summary>
            </summary>
            <param name="context"></param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Initializers.IPropertyInitializer`2">
            <summary>
            A message initializer that uses the input
            </summary>
            <typeparam name="TMessage">The message type</typeparam>
            <typeparam name="TInput">The input type</typeparam>
        </member>
        <member name="T:MassTransit.Initializers.IPropertyInitializer`1">
            <summary>
            A message initializer that doesn't use the input
            </summary>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="M:MassTransit.Initializers.IPropertyInitializer`1.Apply(MassTransit.Initializers.InitializeContext{`0})">
            <summary>
            Apply the initializer to the message
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Initializers.IPropertyProvider`2">
            <summary>
            Returns the property from the input
            </summary>
            <typeparam name="TInput"></typeparam>
            <typeparam name="TProperty"></typeparam>
        </member>
        <member name="M:MassTransit.Initializers.IPropertyProviderFactory`1.TryGetPropertyProvider``1(System.Reflection.PropertyInfo,MassTransit.Initializers.IPropertyProvider{`0,``0}@)">
            <summary>
            Return the factory to create a property provider for the specified type <typeparamref name="TResult" /> using the
            <paramref name="propertyInfo" /> as the source.
            </summary>
            <param name="propertyInfo">The input property</param>
            <param name="provider"></param>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Initializers.ITypeConverter`2">
            <summary>
            A synchronous property type conversion, which may or may not succeed.
            </summary>
            <typeparam name="TResult"></typeparam>
            <typeparam name="TInput"></typeparam>
        </member>
        <member name="M:MassTransit.Initializers.ITypeConverter`2.TryConvert(`1,`0@)">
            <summary>
            Convert the input to the result type
            </summary>
            <param name="input">The input value</param>
            <param name="result">The result value</param>
            <returns>True if the value was converted, otherwise false</returns>
        </member>
        <member name="T:MassTransit.Initializers.MessageInitializer`2">
            <summary>
            Initializes a message using the input, which can include message properties, headers, etc.
            </summary>
            <typeparam name="TMessage">The message type</typeparam>
            <typeparam name="TInput">The input type</typeparam>
        </member>
        <member name="M:MassTransit.Initializers.MessageInitializerCache`1.GetInitializer(System.Type)">
            <summary>
            Returns the initializer for the message/input type combination
            </summary>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Initializers.PropertyConverters.TaskPropertyConverter`1">
            <summary>
            Converts a <see cref="T:System.Threading.Tasks.Task`1" /> to {T} by awaiting the result
            </summary>
            <typeparam name="TResult"></typeparam>
        </member>
        <member name="T:MassTransit.Initializers.PropertyConverters.TaskPropertyConverter`2">
            <summary>
            Converts a <see cref="T:System.Threading.Tasks.Task`1" /> to {T} by awaiting the result
            </summary>
            <typeparam name="TResult"></typeparam>
            <typeparam name="TInput"></typeparam>
        </member>
        <member name="T:MassTransit.Initializers.PropertyConverters.TypePropertyConverter`2">
            <summary>
            Calls the property type converter, returning either the result or default.
            </summary>
            <typeparam name="TResult"></typeparam>
            <typeparam name="TInput"></typeparam>
        </member>
        <member name="T:MassTransit.Initializers.PropertyInitializers.CopyPropertyInitializer`3">
            <summary>
            Set a message property by copying the input property (of the same type), regardless of whether
            the input property value is null, etc.
            </summary>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="TInput"></typeparam>
            <typeparam name="TProperty"></typeparam>
        </member>
        <member name="T:MassTransit.Initializers.PropertyInitializers.DictionaryCopyPropertyInitializer`3">
            <summary>
            Gets the dictionary entry for the property (if present), and sets the message property to the value
            </summary>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="TInput"></typeparam>
            <typeparam name="TProperty"></typeparam>
        </member>
        <member name="T:MassTransit.Initializers.PropertyInitializers.ProviderPropertyInitializer`3">
            <summary>
            Set a message property using the property provider for the property value
            </summary>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="TInput"></typeparam>
            <typeparam name="TProperty"></typeparam>
        </member>
        <member name="T:MassTransit.Initializers.PropertyProviders.AsyncPropertyProvider`2">
            <summary>
            Awaits a <see cref="T:System.Threading.Tasks.Task`1" /> property, returning the property value.
            </summary>
            <typeparam name="TInput"></typeparam>
            <typeparam name="TProperty"></typeparam>
        </member>
        <member name="T:MassTransit.Initializers.PropertyProviders.AsyncPropertyProvider`3">
            <summary>
            Awaits a <see cref="T:System.Threading.Tasks.Task`1" /> property, returning the property value.
            </summary>
            <typeparam name="TInput"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <typeparam name="TTask"></typeparam>
        </member>
        <member name="T:MassTransit.Initializers.PropertyProviders.ConstantPropertyProvider`2">
            <summary>
            Returns a constant value for the property
            </summary>
            <typeparam name="TInput"></typeparam>
            <typeparam name="TProperty"></typeparam>
        </member>
        <member name="T:MassTransit.Initializers.PropertyProviders.InputDictionaryPropertyProvider`2">
            <summary>
            Copies the input property, as-is, for the property value
            </summary>
            <typeparam name="TInput"></typeparam>
            <typeparam name="TProperty"></typeparam>
        </member>
        <member name="T:MassTransit.Initializers.PropertyProviders.InputPropertyProvider`2">
            <summary>
            Copies the input property, as-is, for the property value
            </summary>
            <typeparam name="TInput"></typeparam>
            <typeparam name="TProperty"></typeparam>
        </member>
        <member name="T:MassTransit.Initializers.PropertyProviders.PropertyProviderFactory`1">
            <summary>
            For an input type, builds the property providers for the requested result types
            </summary>
            <typeparam name="TInput"></typeparam>
        </member>
        <member name="M:MassTransit.Initializers.PropertyProviders.PropertyProviderFactory`1.TryGetPropertyProvider``1(System.Reflection.PropertyInfo,MassTransit.Initializers.IPropertyProvider{`0,``0}@)">
            <summary>
            Return the factory to create a property provider for the specified type <typeparamref name="TResult" /> using the
            <paramref name="propertyInfo" /> as the source.
            </summary>
            <param name="propertyInfo">The input property</param>
            <param name="provider"></param>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Initializers.PropertyProviders.PropertyProviderFactory`1.TaskProperty`1">
            <summary>
            The property on the input is a Task
            </summary>
            <typeparam name="TTask"></typeparam>
        </member>
        <member name="T:MassTransit.Initializers.PropertyProviders.VariablePropertyProvider`3">
            <summary>
            Copies the input property, as-is, for the property value
            </summary>
            <typeparam name="TInput"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:MassTransit.Initializers.TaskInitializerExtensions.Select``1(System.Threading.Tasks.Task{``0},System.Func{``0,System.String})">
            <summary>
            Awaits the task and calls the selector to return a string property of the result
            </summary>
            <param name="task"></param>
            <param name="selector"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Initializers.TaskInitializerExtensions.Select``1(System.Threading.Tasks.Task{``0},System.Func{``0,System.String},System.String)">
            <summary>
            Awaits the task and calls the selector to return a string property of the result
            </summary>
            <param name="task"></param>
            <param name="selector"></param>
            <param name="defaultValue"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Initializers.TaskInitializerExtensions.Select``1(System.Threading.Tasks.Task{``0},System.Func{``0,System.String},System.Func{System.String})">
            <summary>
            Awaits the task and calls the selector to return a string property of the result
            </summary>
            <param name="task"></param>
            <param name="selector"></param>
            <param name="getDefaultValue"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Initializers.TaskInitializerExtensions.Select``1(System.Threading.Tasks.Task{``0},System.Func{``0,System.String},System.Func{System.Threading.Tasks.Task{System.String}})">
            <summary>
            Awaits the task and calls the selector to return a string property of the result
            </summary>
            <param name="task"></param>
            <param name="selector"></param>
            <param name="getDefaultValue"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Initializers.TaskInitializerExtensions.Select``2(System.Threading.Tasks.Task{``0},System.Func{``0,``1})">
            <summary>
            Awaits the task and calls the selector to return a string property of the result
            </summary>
            <param name="task"></param>
            <param name="selector"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Initializers.TaskInitializerExtensions.Select``2(System.Threading.Tasks.Task{``0},System.Func{``0,``1},``1)">
            <summary>
            Awaits the task and calls the selector to return a TResult property of the result
            </summary>
            <param name="task"></param>
            <param name="selector"></param>
            <param name="defaultValue"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Initializers.TaskInitializerExtensions.Select``2(System.Threading.Tasks.Task{``0},System.Func{``0,System.Nullable{``1}},``1)">
            <summary>
            Awaits the task and calls the selector to return a TResult property of the result
            </summary>
            <param name="task"></param>
            <param name="selector"></param>
            <param name="defaultValue"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Initializers.TaskInitializerExtensions.Select``2(System.Threading.Tasks.Task{``0},System.Func{``0,``1},System.Func{``1})">
            <summary>
            Awaits the task and calls the selector to return a TResult property of the result
            </summary>
            <param name="task"></param>
            <param name="selector"></param>
            <param name="getDefaultValue"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Initializers.TaskInitializerExtensions.Select``2(System.Threading.Tasks.Task{``0},System.Func{``0,System.Nullable{``1}},System.Func{``1})">
            <summary>
            Awaits the task and calls the selector to return a TResult property of the result
            </summary>
            <param name="task"></param>
            <param name="selector"></param>
            <param name="getDefaultValue"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Initializers.TaskInitializerExtensions.Select``2(System.Threading.Tasks.Task{``0},System.Func{``0,``1},System.Func{System.Threading.Tasks.Task{``1}})">
            <summary>
            Awaits the task and calls the selector to return a TResult property of the result
            </summary>
            <param name="task"></param>
            <param name="selector"></param>
            <param name="getDefaultValue"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Initializers.TaskInitializerExtensions.Select``2(System.Threading.Tasks.Task{``0},System.Func{``0,System.Nullable{``1}},System.Func{System.Threading.Tasks.Task{``1}})">
            <summary>
            Awaits the task and calls the selector to return a TResult property of the result
            </summary>
            <param name="task"></param>
            <param name="selector"></param>
            <param name="getDefaultValue"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IInMemoryBusFactoryConfigurator.Publish``1(System.Action{MassTransit.IInMemoryMessagePublishTopologyConfigurator{``0}})">
            <summary>
            Configure the send topology of the message type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configureTopology"></param>
        </member>
        <member name="M:MassTransit.IInMemoryBusFactoryConfigurator.Host(System.Action{MassTransit.IInMemoryHostConfigurator})">
            <summary>
            Configure the base address for the host
            </summary>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IInMemoryBusFactoryConfigurator.Host(System.Uri,System.Action{MassTransit.IInMemoryHostConfigurator})">
            <summary>
            Configure the base address for the host
            </summary>
            <param name="baseAddress">The base address for the in-memory host</param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IInMemoryMessageConsumeTopologyConfigurator`1.Bind(System.Nullable{MassTransit.Transports.Fabric.ExchangeType},System.String)">
            <summary>
            Adds the exchange bindings for this message type
            </summary>
        </member>
        <member name="M:MassTransit.IInMemoryMessageConsumeTopologyConfigurator.Apply(MassTransit.Configuration.IMessageFabricConsumeTopologyBuilder)">
            <summary>
            Apply the message topology to the builder
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:MassTransit.IInMemoryReceiveEndpointConfigurator.Bind(System.String,MassTransit.Transports.Fabric.ExchangeType,System.String)">
            <summary>
            Bind an exchange to the receive endpoint queue
            </summary>
            <param name="exchangeName">The exchange name (not case-sensitive)</param>
            <param name="exchangeType">The exchange type</param>
            <param name="routingKey">Only valid for direct/topic exchanges</param>
        </member>
        <member name="M:MassTransit.IInMemoryReceiveEndpointConfigurator.Bind``1(MassTransit.Transports.Fabric.ExchangeType,System.String)">
            <summary>
            Bind an exchange to the receive endpoint queue
            </summary>
            <param name="exchangeType">The exchange type</param>
            <param name="routingKey">Only valid for direct/topic exchanges</param>
        </member>
        <member name="M:MassTransit.InMemoryPublishTopologyConfigurationExtensions.AddPublishMessageTypesFromNamespaceContaining``1(MassTransit.IInMemoryBusFactoryConfigurator,System.Action{MassTransit.IInMemoryMessagePublishTopologyConfigurator,System.Type},System.Func{System.Type,System.Boolean})">
            <summary>
            Adds any valid message types found in the specified namespace to the publish topology
            </summary>
            <param name="configurator"></param>
            <param name="configure"></param>
            <param name="filter"></param>
        </member>
        <member name="M:MassTransit.InMemoryPublishTopologyConfigurationExtensions.AddPublishMessageTypesFromNamespaceContaining(MassTransit.IInMemoryBusFactoryConfigurator,System.Type,System.Action{MassTransit.IInMemoryMessagePublishTopologyConfigurator,System.Type},System.Func{System.Type,System.Boolean})">
            <summary>
            Adds any valid message types found in the specified namespace to the publish topology
            </summary>
            <param name="configurator"></param>
            <param name="type">The type to use to identify the assembly and namespace to scan</param>
            <param name="configure"></param>
            <param name="filter"></param>
        </member>
        <member name="M:MassTransit.InMemoryPublishTopologyConfigurationExtensions.AddPublishMessageTypes(MassTransit.IInMemoryBusFactoryConfigurator,System.Collections.Generic.IEnumerable{System.Type},System.Action{MassTransit.IInMemoryMessagePublishTopologyConfigurator,System.Type})">
            <summary>
            Adds the specified message types to the publish topology
            </summary>
            <param name="configurator"></param>
            <param name="messageTypes"></param>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.IInMemoryConsumeTopology.Apply(MassTransit.Configuration.IMessageFabricConsumeTopologyBuilder)">
            <summary>
            Apply the entire topology to the builder
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:MassTransit.InMemoryBus.Create(System.Action{MassTransit.IInMemoryBusFactoryConfigurator})">
            <summary>
            Configure and create an in-memory bus
            </summary>
            <param name="configure">The configuration callback to configure the bus</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.InMemoryBus.Create(System.Uri,System.Action{MassTransit.IInMemoryBusFactoryConfigurator})">
            <summary>
            Configure and create an in-memory bus
            </summary>
            <param name="baseAddress">Override the default base address</param>
            <param name="configure">The configuration callback to configure the bus</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.InMemoryConfigurationExtensions.CreateUsingInMemory(MassTransit.IBusFactorySelector,System.Action{MassTransit.IInMemoryBusFactoryConfigurator})">
            <summary>
            Configure and create an in-memory bus
            </summary>
            <param name="selector">Hang off the selector interface for visibility</param>
            <param name="configure">The configuration callback to configure the bus</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.InMemoryConfigurationExtensions.CreateUsingInMemory(MassTransit.IBusFactorySelector,System.Uri,System.Action{MassTransit.IInMemoryBusFactoryConfigurator})">
            <summary>
            Configure and create an in-memory bus
            </summary>
            <param name="selector">Hang off the selector interface for visibility</param>
            <param name="baseAddress">Override the default base address</param>
            <param name="configure">The configuration callback to configure the bus</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.InMemoryConfigurationExtensions.UsingInMemory(MassTransit.IBusRegistrationConfigurator,System.Action{MassTransit.IBusRegistrationContext,MassTransit.IInMemoryBusFactoryConfigurator})">
            <summary>
            Configure MassTransit to use the In-Memory transport.
            </summary>
            <param name="configurator">The registration configurator (configured via AddMassTransit)</param>
            <param name="configure">The configuration callback for the bus factory</param>
        </member>
        <member name="M:MassTransit.InMemoryConfigurationExtensions.UsingInMemory(MassTransit.IBusRegistrationConfigurator,System.Uri,System.Action{MassTransit.IBusRegistrationContext,MassTransit.IInMemoryBusFactoryConfigurator})">
            <summary>
            Configure MassTransit to use the In-Memory transport.
            </summary>
            <param name="configurator">The registration configurator (configured via AddMassTransit)</param>
            <param name="baseAddress">The base Address of the transport</param>
            <param name="configure">The configuration callback for the bus factory</param>
        </member>
        <member name="T:MassTransit.InMemoryTransport.Configuration.ExchangeBindingConsumeTopologySpecification">
            <summary>
            Used to bind an exchange to the consuming queue's exchange
            </summary>
        </member>
        <member name="M:MassTransit.InMemoryTransport.Configuration.IInMemoryBusConfiguration.CreateEndpointConfiguration(System.Boolean)">
            <summary>
            Create an endpoint configuration on the bus, which can later be turned into a receive endpoint
            </summary>
            <returns></returns>
        </member>
        <member name="P:MassTransit.InMemoryTransport.Configuration.IInMemoryHostConfiguration.BaseAddress">
            <summary>
            Set the host's base address
            </summary>
        </member>
        <member name="T:MassTransit.InMemoryTransport.InMemoryHost">
            <summary>
            Caches InMemory transport instances so that they are only created and used once
            </summary>
        </member>
        <member name="T:MassTransit.InMemoryTransport.InMemoryReceiveTransport">
            <summary>
            Support in-memory message queue that is not durable, but supports parallel delivery of messages
            based on TPL usage.
            </summary>
        </member>
        <member name="P:MassTransit.Internals.Caching.ICacheValue.IsFaultedOrCanceled">
            <summary>
            True if the node value is invalid
            </summary>
        </member>
        <member name="P:MassTransit.Internals.Caching.ICacheValue.Usage">
            <summary>
            Tracks value usage
            </summary>
        </member>
        <member name="M:MassTransit.Internals.Caching.ICacheValue.Evict">
            <summary>
            Discard the value
            </summary>
        </member>
        <member name="M:MassTransit.Internals.Caching.ICacheValue`1.GetValue(System.Func{MassTransit.Internals.Caching.IPendingValue{`0}})">
            <summary>
            Get the node's value, passing a pending value if for some
            reason the node's value has not yet been accepted or has
            expired.
            </summary>
            <param name="pendingValueFactory"></param>
            <returns></returns>
        </member>
        <member name="P:MassTransit.Internals.Caching.IPendingValue`1.Value">
            <summary>
            The value for the pending value
            </summary>
        </member>
        <member name="M:MassTransit.Internals.Caching.IPendingValue`1.SetValue(System.Threading.Tasks.Task{`0})">
            <summary>
            Sets the pending value, eliminating the need for the factory method.
            </summary>
            <param name="value">The resolved value</param>
        </member>
        <member name="M:MassTransit.Internals.Caching.IPendingValue`1.CreateValue">
            <summary>
            Create the value using the missing value factory supplied to Get
            </summary>
            <returns>Either the value, or a faulted task.</returns>
        </member>
        <member name="T:MassTransit.Internals.Caching.KeyProvider`2">
            <summary>
            Returns the key for a value
            </summary>
            <param name="value"></param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="T:MassTransit.Internals.Caching.MissingValueFactory`2">
            <summary>
            Creates the value if it is not found in the index
            </summary>
            <param name="key">The missing key</param>
            <typeparam name="TKey">The key type</typeparam>
            <typeparam name="TValue">The value type</typeparam>
        </member>
        <member name="T:MassTransit.Internals.CompilerFlags">
            <summary>The options for the compiler</summary>
        </member>
        <member name="F:MassTransit.Internals.CompilerFlags.Default">
            <summary>The default options: Invocation lambda is inlined, no debug info</summary>
        </member>
        <member name="F:MassTransit.Internals.CompilerFlags.NoInvocationLambdaInlining">
            <summary>Prevents the inlining of the lambda in the Invocation expression to optimize for the multiple same lambda compiled once</summary>
        </member>
        <member name="F:MassTransit.Internals.CompilerFlags.EnableDelegateDebugInfo">
            <summary>Adds the Expression, ExpressionString, and CSharpString to the delegate closure for the debugging inspection</summary>
        </member>
        <member name="F:MassTransit.Internals.CompilerFlags.ThrowOnNotSupportedExpression">
            <summary>When the flag set then instead of the returning `null` the specific exception</summary>
        </member>
        <member name="T:MassTransit.Internals.NotSupported">
            <summary>Indicates the not supported expression combination</summary>
        </member>
        <member name="F:MassTransit.Internals.NotSupported.NewArrayInit_MultidimensionalArray">
            <summary>Multi-dimensional array initializer is not supported</summary>
        </member>
        <member name="F:MassTransit.Internals.NotSupported.Quote">
            <summary>Quote is not supported</summary>
        </member>
        <member name="F:MassTransit.Internals.NotSupported.Dynamic">
            <summary>Dynamic is not supported</summary>
        </member>
        <member name="F:MassTransit.Internals.NotSupported.RuntimeVariables">
            <summary>RuntimeVariables is not supported</summary>
        </member>
        <member name="F:MassTransit.Internals.NotSupported.MemberInit_MemberBinding">
            <summary>MemberInit MemberBinding is not supported</summary>
        </member>
        <member name="F:MassTransit.Internals.NotSupported.MemberInit_ListBinding">
            <summary>MemberInit ListBinding is not supported</summary>
        </member>
        <member name="F:MassTransit.Internals.NotSupported.Try_GotoReturnToTheFollowupLabel">
            <summary>Goto of the Return kind from the TryCatch is not supported</summary>
        </member>
        <member name="F:MassTransit.Internals.NotSupported.Assign_Target">
            <summary>Not supported assignment target</summary>
        </member>
        <member name="F:MassTransit.Internals.NotSupported.TypeEqual">
            <summary> ExpressionType.TypeEqual is not supported </summary>
        </member>
        <member name="T:MassTransit.Internals.NotSupportedExpressionException">
            <summary>FEC Not Supported exception</summary>
        </member>
        <member name="F:MassTransit.Internals.NotSupportedExpressionException.Reason">
            <summary>The reason</summary>
        </member>
        <member name="M:MassTransit.Internals.NotSupportedExpressionException.#ctor(MassTransit.Internals.NotSupported)">
            <summary>Constructor</summary>
        </member>
        <member name="M:MassTransit.Internals.NotSupportedExpressionException.#ctor(MassTransit.Internals.NotSupported,System.String)">
            <summary>Constructor</summary>
        </member>
        <member name="T:MassTransit.Internals.IDelegateDebugInfo">
            <summary>The interface is implemented by the compiled delegate Target if `CompilerFlags.EnableDelegateDebugInfo` is set.</summary>
        </member>
        <member name="P:MassTransit.Internals.IDelegateDebugInfo.Expression">
            <summary>The lambda expression object that was compiled to the delegate</summary>
        </member>
        <member name="P:MassTransit.Internals.IDelegateDebugInfo.ExpressionString">
            <summary>The lambda expression construction syntax C# code</summary>
        </member>
        <member name="P:MassTransit.Internals.IDelegateDebugInfo.CSharpString">
            <summary>The lambda expression equivalent C# code</summary>
        </member>
        <member name="T:MassTransit.Internals.ExpressionCompiler">
            <summary>Compiles expression to delegate ~20 times faster than Expression.Compile.
            Partial to extend with your things when used as source file.</summary>
        </member>
        <member name="M:MassTransit.Internals.ExpressionCompiler.CompileFast``1(System.Linq.Expressions.LambdaExpression,System.Boolean,MassTransit.Internals.CompilerFlags)">
            <summary>Compiles lambda expression to TDelegate type. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:MassTransit.Internals.ExpressionCompiler.CompileFastToIL(System.Linq.Expressions.LambdaExpression,System.Reflection.Emit.ILGenerator,System.Boolean,MassTransit.Internals.CompilerFlags)">
            Compiles a static method to the passed IL Generator.
            Could be used as alternative for `CompileToMethod` like this <code><![CDATA[funcExpr.CompileFastToIL(methodBuilder.GetILGenerator())]]></code>.
            Check `IssueTests.Issue179_Add_something_like_LambdaExpression_CompileToMethod.cs` for example.
        </member>
        <member name="M:MassTransit.Internals.ExpressionCompiler.CompileFast(System.Linq.Expressions.LambdaExpression,System.Boolean,MassTransit.Internals.CompilerFlags)">
            <summary>Compiles lambda expression to delegate. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:MassTransit.Internals.ExpressionCompiler.CompileSys``1(System.Linq.Expressions.Expression{``0})">
            <summary>Unifies Compile for System.Linq.Expressions and FEC.LightExpression</summary>
        </member>
        <member name="M:MassTransit.Internals.ExpressionCompiler.CompileSys(System.Linq.Expressions.LambdaExpression)">
            <summary>Unifies Compile for System.Linq.Expressions and FEC.LightExpression</summary>
        </member>
        <member name="M:MassTransit.Internals.ExpressionCompiler.CompileFast``1(System.Linq.Expressions.Expression{``0},System.Boolean,MassTransit.Internals.CompilerFlags)">
            <summary>Compiles lambda expression to TDelegate type. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:MassTransit.Internals.ExpressionCompiler.CompileFast``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Boolean,MassTransit.Internals.CompilerFlags)">
            <summary>Compiles lambda expression to delegate. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:MassTransit.Internals.ExpressionCompiler.CompileFast``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean,MassTransit.Internals.CompilerFlags)">
            <summary>Compiles lambda expression to delegate. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:MassTransit.Internals.ExpressionCompiler.CompileFast``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}},System.Boolean,MassTransit.Internals.CompilerFlags)">
            <summary>Compiles lambda expression to TDelegate type. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:MassTransit.Internals.ExpressionCompiler.CompileFast``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}},System.Boolean,MassTransit.Internals.CompilerFlags)">
            <summary>Compiles lambda expression to delegate. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:MassTransit.Internals.ExpressionCompiler.CompileFast``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}},System.Boolean,MassTransit.Internals.CompilerFlags)">
            <summary>Compiles lambda expression to TDelegate type. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:MassTransit.Internals.ExpressionCompiler.CompileFast``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}},System.Boolean,MassTransit.Internals.CompilerFlags)">
            <summary>Compiles lambda expression to delegate. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:MassTransit.Internals.ExpressionCompiler.CompileFast``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}},System.Boolean,MassTransit.Internals.CompilerFlags)">
            <summary>Compiles lambda expression to delegate. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:MassTransit.Internals.ExpressionCompiler.CompileFast(System.Linq.Expressions.Expression{System.Action},System.Boolean,MassTransit.Internals.CompilerFlags)">
            <summary>Compiles lambda expression to delegate. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:MassTransit.Internals.ExpressionCompiler.CompileFast``1(System.Linq.Expressions.Expression{System.Action{``0}},System.Boolean,MassTransit.Internals.CompilerFlags)">
            <summary>Compiles lambda expression to delegate. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:MassTransit.Internals.ExpressionCompiler.CompileFast``2(System.Linq.Expressions.Expression{System.Action{``0,``1}},System.Boolean,MassTransit.Internals.CompilerFlags)">
            <summary>Compiles lambda expression to delegate. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:MassTransit.Internals.ExpressionCompiler.CompileFast``3(System.Linq.Expressions.Expression{System.Action{``0,``1,``2}},System.Boolean,MassTransit.Internals.CompilerFlags)">
            <summary>Compiles lambda expression to delegate. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:MassTransit.Internals.ExpressionCompiler.CompileFast``4(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3}},System.Boolean,MassTransit.Internals.CompilerFlags)">
            <summary>Compiles lambda expression to delegate. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:MassTransit.Internals.ExpressionCompiler.CompileFast``5(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3,``4}},System.Boolean,MassTransit.Internals.CompilerFlags)">
            <summary>Compiles lambda expression to delegate. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:MassTransit.Internals.ExpressionCompiler.CompileFast``6(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3,``4,``5}},System.Boolean,MassTransit.Internals.CompilerFlags)">
            <summary>Compiles lambda expression to delegate. Use ifFastFailedReturnNull parameter to Not fallback to Expression.Compile, useful for testing.</summary>
        </member>
        <member name="M:MassTransit.Internals.ExpressionCompiler.TryCompile``1(System.Linq.Expressions.LambdaExpression,MassTransit.Internals.CompilerFlags)">
            <summary>Tries to compile lambda expression to <typeparamref name="TDelegate"/></summary>
        </member>
        <member name="M:MassTransit.Internals.ExpressionCompiler.TryCompileWithPreCreatedClosure``1(System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.ConstantExpression[])">
            <summary>Tries to compile lambda expression to <typeparamref name="TDelegate"/>
            with the provided closure object and constant expressions (or lack there of) -
            Constant expression should be the in order of Fields in closure object!
            Note 1: Use it on your own risk - FEC won't verify the expression is compile-able with passed closure, it is up to you!
            Note 2: The expression with NESTED LAMBDA IS NOT SUPPORTED!
            Note 3: `Label` and `GoTo` are not supported in this case, because they need first round to collect out-of-order labels</summary>
        </member>
        <member name="M:MassTransit.Internals.ExpressionCompiler.TryCompileWithPreCreatedClosure``1(System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.ConstantExpression[],MassTransit.Internals.CompilerFlags)">
            <summary>Tries to compile lambda expression to <typeparamref name="TDelegate"/>
            with the provided closure object and constant expressions (or lack there of)</summary>
        </member>
        <member name="M:MassTransit.Internals.ExpressionCompiler.TryCompileWithoutClosure``1(System.Linq.Expressions.LambdaExpression,MassTransit.Internals.CompilerFlags)">
            <summary>Tries to compile expression to "static" delegate, skipping the step of collecting the closure object.</summary>
        </member>
        <member name="T:MassTransit.Internals.ExpressionCompiler.ClosureInfo">
            Track the info required to build a closure object + some context information not directly related to closure.
        </member>
        <member name="F:MassTransit.Internals.ExpressionCompiler.ClosureInfo._blockStack">
            Tracks the stack of blocks where are we in emit phase
        </member>
        <member name="F:MassTransit.Internals.ExpressionCompiler.ClosureInfo.Labels">
            Map of the links between Labels and Goto's
        </member>
        <member name="F:MassTransit.Internals.ExpressionCompiler.ClosureInfo.Constants">
            Constant expressions to find an index (by reference) of constant expression from compiled expression.
        </member>
        <member name="F:MassTransit.Internals.ExpressionCompiler.ClosureInfo.ConstantUsageThenVarIndex">
            Constant usage count and variable index
        </member>
        <member name="F:MassTransit.Internals.ExpressionCompiler.ClosureInfo.NonPassedParameters">
            Parameters not passed through lambda parameter list But used inside lambda body.
            The top expression should Not contain not passed parameters.
        </member>
        <member name="F:MassTransit.Internals.ExpressionCompiler.ClosureInfo.NestedLambdas">
            All nested lambdas recursively nested in expression
        </member>
        <member name="M:MassTransit.Internals.ExpressionCompiler.ClosureInfo.#ctor(MassTransit.Internals.ExpressionCompiler.ClosureStatus,System.Object[],System.Int32[])">
            <summary>Populates info directly with provided closure object and constants.
            If provided, the <paramref name="constUsage"/> should be the size of <paramref name="constValues"/>
            </summary>
        </member>
        <member name="M:MassTransit.Internals.ExpressionCompiler.ClosureInfo.PushBlockWithVars(System.Linq.Expressions.ParameterExpression)">
            LocalVar maybe a `null` in a collecting phase when we only need to decide if ParameterExpression is an actual parameter or variable
        </member>
        <member name="M:MassTransit.Internals.ExpressionCompiler.ClosureInfo.PushBlockWithVars(System.Collections.Generic.IReadOnlyList{System.Linq.Expressions.ParameterExpression},System.Int32[])">
            LocalVars maybe a `null` in collecting phase when we only need to decide if ParameterExpression is an actual parameter or variable
        </member>
        <member name="M:MassTransit.Internals.ExpressionCompiler.IsClosureBoundConstant(System.Object,System.Type)">
            Helps to identify constants as the one to be put into the Closure
        </member>
        <member name="T:MassTransit.Internals.ExpressionCompiler.EmittingVisitor">
            <summary>Supports emitting of selected expressions, e.g. lambdaExpr are not supported yet.
            When emitter find not supported expression it will return false from <see cref="M:MassTransit.Internals.ExpressionCompiler.EmittingVisitor.TryEmit(System.Linq.Expressions.Expression,System.Collections.Generic.IReadOnlyList{System.Linq.Expressions.ParameterExpression},System.Reflection.Emit.ILGenerator,MassTransit.Internals.ExpressionCompiler.ClosureInfo@,MassTransit.Internals.CompilerFlags,MassTransit.Internals.ExpressionCompiler.ParentFlags,System.Int32)"/>, so I could fallback
            to normal and slow Expression.Compile.</summary>
        </member>
        <member name="T:MassTransit.Internals.ILGeneratorHacks">
            <summary>Reflecting the internal methods to access the more performant for defining the local variable</summary>
        </member>
        <member name="M:MassTransit.Internals.ILGeneratorHacks.GetNextLocalVarIndex(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>Efficiently returns the next variable index, hopefully without unnecessary allocations.</summary>
        </member>
        <member name="M:MassTransit.Internals.ToExpressionPrinter.ToExpressionString(System.Linq.Expressions.Expression,MassTransit.Internals.TryPrintConstant)">
            <summary>
            Prints the expression in its constructing syntax -
            helpful to get the expression from the debug session and put into it the code for the test.
            </summary>
        </member>
        <member name="M:MassTransit.Internals.ToExpressionPrinter.ToExpressionString(System.Linq.Expressions.Expression,System.Collections.Generic.List{System.Linq.Expressions.ParameterExpression}@,System.Collections.Generic.List{System.Linq.Expressions.Expression}@,System.Collections.Generic.List{System.Linq.Expressions.LabelTarget}@,System.Boolean,System.Func{System.Type,System.String,System.String},System.Int32,MassTransit.Internals.TryPrintConstant)">
            <summary>
            Prints the expression in its constructing syntax -
            helpful to get the expression from the debug session and put into it the code for the test.
            In addition, returns the gathered expressions, parameters ad labels.
            </summary>
        </member>
        <member name="T:MassTransit.Internals.TryPrintConstant">
            <summary>Output the constant to C# string or should return `null`</summary>
        </member>
        <member name="T:MassTransit.Internals.ToCSharpPrinter">
            <summary>Converts the expression into the valid C# code representation</summary>
        </member>
        <member name="M:MassTransit.Internals.ToCSharpPrinter.ToCSharpString(System.Linq.Expressions.Expression)">
            <summary>Tries hard to convert the expression into the correct C# code</summary>
        </member>
        <member name="M:MassTransit.Internals.ToCSharpPrinter.ToCSharpString(System.Linq.Expressions.Expression,MassTransit.Internals.TryPrintConstant)">
            <summary>Tries hard to convert the expression into the correct C# code</summary>
        </member>
        <member name="M:MassTransit.Internals.ToCSharpPrinter.ToCSharpString(System.Linq.Expressions.Expression,System.Text.StringBuilder,System.Int32,System.Boolean,System.Func{System.Type,System.String,System.String},System.Int32,MassTransit.Internals.TryPrintConstant)">
            <summary>Tries hard to convert the expression into the correct C# code</summary>
        </member>
        <member name="M:MassTransit.Internals.CodePrinter.ToCode(System.Type,System.Boolean,System.Func{System.Type,System.String,System.String},System.Boolean)">
            <summary>Converts the <paramref name="type"/> into the proper C# representation.</summary>
        </member>
        <member name="M:MassTransit.Internals.CodePrinter.ToCode(System.Boolean)">
            <summary>Prints valid C# Boolean</summary>
        </member>
        <member name="M:MassTransit.Internals.CodePrinter.ToCode(System.String)">
            <summary>Prints valid C# String escaping the things</summary>
        </member>
        <member name="M:MassTransit.Internals.CodePrinter.ToEnumValueCode(System.Type,System.Object,System.Boolean,System.Func{System.Type,System.String,System.String})">
            <summary>Prints valid C# Enum literal</summary>
        </member>
        <member name="M:MassTransit.Internals.CodePrinter.ToCommaSeparatedCode(System.Collections.IEnumerable,MassTransit.Internals.CodePrinter.IObjectToCode,System.Boolean,System.Func{System.Type,System.String,System.String})">
            <summary>Prints many code items as the array initializer.</summary>
        </member>
        <member name="M:MassTransit.Internals.CodePrinter.ToArrayInitializerCode(System.Collections.IEnumerable,System.Type,MassTransit.Internals.CodePrinter.IObjectToCode,System.Boolean,System.Func{System.Type,System.String,System.String})">
            <summary>Prints many code items as array initializer.</summary>
        </member>
        <member name="M:MassTransit.Internals.CodePrinter.ToCode(System.Object,MassTransit.Internals.CodePrinter.IObjectToCode,System.Boolean,System.Func{System.Type,System.String,System.String})">
            <summary>
            Prints a valid C# for known <paramref name="x"/>,
            otherwise uses passed <paramref name="notRecognizedToCode"/> or falls back to `ToString()`.
            </summary>
        </member>
        <member name="T:MassTransit.Introspection.ProbeResult">
            <summary>
            The result of a probe
            </summary>
        </member>
        <member name="P:MassTransit.Introspection.ProbeResult.ResultId">
            <summary>
            Unique identifies this result
            </summary>
        </member>
        <member name="P:MassTransit.Introspection.ProbeResult.ProbeId">
            <summary>
            Identifies the initiator of the probe
            </summary>
        </member>
        <member name="P:MassTransit.Introspection.ProbeResult.StartTimestamp">
            <summary>
            When the probe was initiated through the system
            </summary>
        </member>
        <member name="P:MassTransit.Introspection.ProbeResult.Duration">
            <summary>
            How long the probe took to execute
            </summary>
        </member>
        <member name="P:MassTransit.Introspection.ProbeResult.Host">
            <summary>
            The host from which the result was generated
            </summary>
        </member>
        <member name="P:MassTransit.Introspection.ProbeResult.Results">
            <summary>
            The results returned by the probe
            </summary>
        </member>
        <member name="M:MassTransit.IPartitioner`1.Send(`0,MassTransit.IPipe{`0})">
            <summary>
            Sends the context through the partitioner
            </summary>
            <param name="context">The context</param>
            <param name="next">The next pipe</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IReceiveEndpointConnector`1.ConnectReceiveEndpoint(MassTransit.IEndpointDefinition,MassTransit.IEndpointNameFormatter,System.Action{MassTransit.IBusRegistrationContext,`0})">
            <summary>
            Connects a receive endpoint to the bus
            </summary>
            <param name="definition">
            An endpoint definition, which abstracts specific endpoint behaviors from the transport
            </param>
            <param name="endpointNameFormatter"></param>
            <param name="configure">The configuration callback</param>
        </member>
        <member name="M:MassTransit.IReceiveEndpointConnector`1.ConnectReceiveEndpoint(System.String,System.Action{MassTransit.IBusRegistrationContext,`0})">
            <summary>
            Connects a receive endpoint to the bus
            </summary>
            <param name="queueName">The queue name for the receive endpoint</param>
            <param name="configure">The configuration callback</param>
        </member>
        <member name="M:MassTransit.IReceiveEndpointConnector.ConnectReceiveEndpoint(MassTransit.IEndpointDefinition,MassTransit.IEndpointNameFormatter,System.Action{MassTransit.IBusRegistrationContext,MassTransit.IReceiveEndpointConfigurator})">
            <summary>
            Connects a receive endpoint to the bus
            </summary>
            <param name="definition">
            An endpoint definition, which abstracts specific endpoint behaviors from the transport
            </param>
            <param name="endpointNameFormatter"></param>
            <param name="configure">The configuration callback</param>
        </member>
        <member name="M:MassTransit.IReceiveEndpointConnector.ConnectReceiveEndpoint(System.String,System.Action{MassTransit.IBusRegistrationContext,MassTransit.IReceiveEndpointConfigurator})">
            <summary>
            Connects a receive endpoint to the bus
            </summary>
            <param name="queueName">The queue name for the receive endpoint</param>
            <param name="configure">The configuration callback</param>
        </member>
        <member name="T:MassTransit.IScopedClientFactory">
            <summary>
            A scoped client factory
            </summary>
        </member>
        <member name="M:MassTransit.IScopedClientFactory.CreateRequest``1(``0,System.Threading.CancellationToken,MassTransit.RequestTimeout)">
            <summary>
            Create a request, using the message specified. If a destinationAddress for the message cannot be found, the message will be published.
            </summary>
            <param name="message"></param>
            <param name="cancellationToken"></param>
            <param name="timeout"></param>
            <typeparam name="T">The message type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IScopedClientFactory.CreateRequest``1(System.Uri,``0,System.Threading.CancellationToken,MassTransit.RequestTimeout)">
            <summary>
            Create a request, using the message specified. If a destinationAddress for the message cannot be found, the message will be published.
            </summary>
            <param name="destinationAddress">The destination service address</param>
            <param name="message"></param>
            <param name="cancellationToken"></param>
            <param name="timeout"></param>
            <typeparam name="T">The message type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IScopedClientFactory.CreateRequest``1(System.Object,System.Threading.CancellationToken,MassTransit.RequestTimeout)">
            <summary>
            Create a request, using the message specified. If a destinationAddress for the message cannot be found, the message will be published.
            </summary>
            <param name="values">The values to initialize the message</param>
            <param name="cancellationToken"></param>
            <param name="timeout"></param>
            <typeparam name="T">The message type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IScopedClientFactory.CreateRequest``1(System.Uri,System.Object,System.Threading.CancellationToken,MassTransit.RequestTimeout)">
            <summary>
            Create a request, using the message specified. If a destinationAddress for the message cannot be found, the message will be published.
            </summary>
            <param name="destinationAddress">The destination service address</param>
            <param name="values">The values to initialize the message</param>
            <param name="cancellationToken"></param>
            <param name="timeout"></param>
            <typeparam name="T">The message type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IScopedClientFactory.CreateRequestClient``1(MassTransit.RequestTimeout)">
            <summary>
            Create a request client for the specified message type
            </summary>
            <param name="timeout"></param>
            <typeparam name="T">The message type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IScopedClientFactory.CreateRequestClient``1(System.Uri,MassTransit.RequestTimeout)">
            <summary>
            Create a request client, using the specified service address
            </summary>
            <param name="destinationAddress">The destination service address</param>
            <param name="timeout">The default timeout for requests</param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.JobServiceEventExtensions.GetJob``1(MassTransit.ConsumeContext{MassTransit.Contracts.JobService.StartJob})">
            <summary>
            Returns the job from the message
            </summary>
            <typeparam name="TJob"></typeparam>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.ActiveJob">
            <summary>
            Active Jobs are allocated a concurrency slot, and are valid until the deadline is reached, after
            which they may be automatically released.
            </summary>
        </member>
        <member name="T:MassTransit.JobAttemptSaga">
            <summary>
            Each attempt to run a job is tracked by this state
            </summary>
        </member>
        <member name="T:MassTransit.JobSaga">
            <summary>
            Individual turnout jobs are tracked by this state
            </summary>
        </member>
        <member name="M:MassTransit.JobService.IJobService.StartJob``1(MassTransit.ConsumeContext{MassTransit.Contracts.JobService.StartJob},``0,MassTransit.IPipe{MassTransit.ConsumeContext{``0}},System.TimeSpan)">
            <summary>
            Starts a job
            </summary>
            <typeparam name="T">The message type that is used to initiate the job</typeparam>
            <param name="context">The context of the message being consumed</param>
            <param name="job">The job command</param>
            <param name="jobPipe">The pipe which executes the job</param>
            <param name="timeout">The job timeout, after which the job is cancelled</param>
            <returns>The newly created job's handle</returns>
        </member>
        <member name="M:MassTransit.JobService.IJobService.Stop(MassTransit.IPublishEndpoint)">
            <summary>
            Shut town the job service, cancelling any pending jobs
            </summary>
            <param name="publishEndpoint"></param>
        </member>
        <member name="M:MassTransit.JobService.IJobService.TryRemoveJob(System.Guid,MassTransit.JobService.JobHandle@)">
            <summary>
            Remove the job from the roster
            </summary>
            <param name="jobId"></param>
            <param name="jobHandle"></param>
        </member>
        <member name="M:MassTransit.JobService.IJobService.RegisterJobType``1(MassTransit.IReceiveEndpointConfigurator,MassTransit.JobOptions{``0},System.Guid)">
            <summary>
            Registers a job type at bus configuration time so that the options can be announced when the bus is started/stopped
            </summary>
            <param name="configurator"></param>
            <param name="options"></param>
            <param name="jobTypeId"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MassTransit.JobService.IJobService.GetJobTypeId``1">
            <summary>
            Return the registered JobTypeId for the job type
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:MassTransit.JobService.JobHandle">
            <summary>
            A JobHandle contains the JobContext, Task, and provides access to the job control
            </summary>
        </member>
        <member name="M:MassTransit.JobService.JobHandle.Cancel">
            <summary>
            Cancel the job task
            </summary>
            <returns></returns>
        </member>
        <member name="T:MassTransit.JobService.SubmitJobConsumer`1">
            <summary>
            Handles the <see cref="T:MassTransit.Contracts.JobService.SubmitJob`1" /> command
            </summary>
            <typeparam name="TJob">The job type</typeparam>
        </member>
        <member name="T:MassTransit.JobTypeSaga">
            <summary>
            Every job type has one entry in this state machine
            </summary>
        </member>
        <member name="P:MassTransit.JobTypeSaga.ConcurrentJobLimit">
            <summary>
            The concurrent job limit, which is configured by the job options. Initially, it defaults to one when the state machine
            is created. Once a service endpoint starts, that endpoint sends a command to set the configure concurrent job limit.
            </summary>
        </member>
        <member name="P:MassTransit.JobTypeSaga.OverrideJobLimit">
            <summary>
            The job limit may be overridden temporarily, to either reduce or increase the number of concurrent jobs. Once the
            override job limit expires, the concurrent job limit returns to the original value.
            </summary>
        </member>
        <member name="P:MassTransit.JobTypeSaga.OverrideLimitExpiration">
            <summary>
            If an <see cref="P:MassTransit.JobTypeSaga.OverrideJobLimit" /> is specified, the time when the override job limit expires
            </summary>
        </member>
        <member name="P:MassTransit.JobTypeSaga.ActiveJobs">
            <summary>
            The last known active jobs
            </summary>
        </member>
        <member name="P:MassTransit.JobTypeSaga.Instances">
            <summary>
            Tracks the instances, when they were last updated
            </summary>
        </member>
        <member name="P:MassTransit.JobTypeSaga.CorrelationId">
            <summary>
            The MD5 hash of the job type
            </summary>
        </member>
        <member name="P:MassTransit.LogContext.Current">
            <summary>
            Gets or sets the current operation (Activity) for the current thread.  This flows
            across async calls.
            </summary>
        </member>
        <member name="M:MassTransit.LogContext.ConfigureCurrentLogContext(Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Configure the current <see cref="T:MassTransit.LogContext" /> using the specified <paramref name="logger" />, which will be
            used for all log output.
            </summary>
            <param name="logger">An existing logger</param>
        </member>
        <member name="M:MassTransit.LogContext.ConfigureCurrentLogContextIfNull(System.IServiceProvider)">
            <summary>
            If <see cref="P:MassTransit.LogContext.Current"/> is not null or the null logger, configure the current LogContext
            using the specified service provider.
            </summary>
            <param name="provider"></param>
        </member>
        <member name="T:MassTransit.Logging.ILogContext">
            <summary>
            Used to provide access to logging and diagnostic services
            </summary>
        </member>
        <member name="P:MassTransit.Logging.ILogContext.Messages">
            <summary>
            The log context for all message movement, sent, received, etc.
            </summary>
        </member>
        <member name="M:MassTransit.Logging.ILogContext.CreateLogContext(System.String)">
            <summary>
            Creates a new <see cref="T:Microsoft.Extensions.Logging.ILogger" /> instance.
            </summary>
            <param name="categoryName">The category name for messages produced by the logger.</param>
            <returns>The <see cref="T:Microsoft.Extensions.Logging.ILogger" />.</returns>
        </member>
        <member name="T:MassTransit.Mediator.Contexts.MediatorPublishSendEndpoint">
            <summary>
            </summary>
        </member>
        <member name="T:MassTransit.Mediator.MassTransitMediator">
            <summary>
            Sends messages directly to the <see cref="T:MassTransit.Transports.IReceivePipe" />, without serialization
            </summary>
        </member>
        <member name="M:MassTransit.MessageData.EncryptedMessageDataRepository.#ctor(MassTransit.IMessageDataRepository,MassTransit.Serialization.ICryptoStreamProvider)">
            <summary>
            Provides encrypted stream support to ensure that message data is encrypted at rest.
            </summary>
            <param name="repository">The original message data repository where message data is stored.</param>
            <param name="streamProvider">The encrypted stream provider</param>
        </member>
        <member name="T:MassTransit.MessageData.Values.DeserializedMessageData`1">
            <summary>
            When a message data property is deserialized, this is used as a placeholder for the actual message
            data accessor which replaces this property value once the message is transformed on the pipeline.
            </summary>
            <typeparam name="T">
            The type used to access the message data, valid types include stream, string, and byte[].
            </typeparam>
        </member>
        <member name="T:MassTransit.MessageData.Values.GetMessageData`1">
            <summary>
            Gets the message data when accessed via Value, using the specified repository and converter.
            </summary>
            <typeparam name="T">The message data property type</typeparam>
        </member>
        <member name="T:MassTransit.MessageData.Values.PutMessageData`1">
            <summary>
            Message data that needs to be stored in the repository when the message is sent.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MassTransit.MessageData.Values.StoredMessageData`1">
            <summary>
            MessageData that has been stored by the repository, has a valid address, and is ready to
            be serialized.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:MassTransit.Metadata.ITypeMetadataCache`1.ImplementationType">
            <summary>
            The implementation type for the type, if it's an interface
            </summary>
        </member>
        <member name="M:MassTransit.Metadata.RegistrationMetadata.IsConsumerOrDefinition(System.Type)">
            <summary>
            Returns true if the type is a consumer, or a consumer definition
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Metadata.RegistrationMetadata.IsSagaOrDefinition(System.Type)">
            <summary>
            Returns true if the type is a saga, or a saga definition
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Metadata.RegistrationMetadata.IsSagaStateMachineOrDefinition(System.Type)">
            <summary>
            Returns true if the type is a state machine or saga definition
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Metadata.RegistrationMetadata.IsActivityOrDefinition(System.Type)">
            <summary>
            Returns true if the type is an activity
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Metadata.RegistrationMetadata.IsFutureOrDefinition(System.Type)">
            <summary>
            Returns true if the type is a future or future definition
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Middleware.CircuitBreaker.CircuitBreakerEventExtensions.PublishCircuitBreakerOpened(MassTransit.IPipe{MassTransit.Contracts.EventContext},System.Exception)">
            <summary>
            Set the concurrency limit of the filter
            </summary>
            <param name="pipe"></param>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Middleware.CircuitBreaker.CircuitBreakerEventExtensions.PublishCircuitBreakerClosed(MassTransit.IPipe{MassTransit.Contracts.EventContext})">
            <summary>
            Set the concurrency limit of the filter
            </summary>
            <param name="pipe"></param>
            <returns></returns>
        </member>
        <member name="P:MassTransit.Middleware.CircuitBreaker.CircuitBreakerSettings.TrackingPeriod">
            <summary>
            The window duration to keep track of errors before they fall off the breaker state
            </summary>
        </member>
        <member name="P:MassTransit.Middleware.CircuitBreaker.CircuitBreakerSettings.ResetTimeout">
            <summary>
            The time to wait after the breaker has opened before attempting to close it
            </summary>
        </member>
        <member name="P:MassTransit.Middleware.CircuitBreaker.CircuitBreakerSettings.TripThreshold">
            <summary>
            A percentage of how many failures versus successful calls before the breaker
            is opened. Should be 0-100, but seriously like 5-10.
            </summary>
        </member>
        <member name="P:MassTransit.Middleware.CircuitBreaker.CircuitBreakerSettings.ActiveThreshold">
            <summary>
            The active count of attempts before the circuit breaker can be tripped
            </summary>
        </member>
        <member name="P:MassTransit.Middleware.CircuitBreaker.CircuitBreakerSettings.Router">
            <summary>
            The router used to publish events related to the circuit breaker behavior
            </summary>
        </member>
        <member name="T:MassTransit.Middleware.CircuitBreaker.ClosedBehavior">
            <summary>
            Represents a closed, normally operating circuit breaker state
            </summary>
        </member>
        <member name="T:MassTransit.Middleware.CircuitBreaker.HalfOpenBehavior">
            <summary>
            Executes until the success count is met. If a fault occurs before the success
            count is reached, the circuit reopens.
            </summary>
        </member>
        <member name="T:MassTransit.Middleware.CircuitBreaker.ICircuitBreaker">
            <summary>
            Provides access to a circuit breaker from a state object
            </summary>
        </member>
        <member name="P:MassTransit.Middleware.CircuitBreaker.ICircuitBreaker.TripThreshold">
            <summary>
            The number of failures before opening the circuit breaker
            </summary>
        </member>
        <member name="P:MassTransit.Middleware.CircuitBreaker.ICircuitBreaker.ActiveThreshold">
            <summary>
            The minimum number of attempts before the breaker can possibly trip
            </summary>
        </member>
        <member name="P:MassTransit.Middleware.CircuitBreaker.ICircuitBreaker.OpenDuration">
            <summary>
            Window duration before attempt/success/failure counts are reset
            </summary>
        </member>
        <member name="M:MassTransit.Middleware.CircuitBreaker.ICircuitBreaker.Open(System.Exception,MassTransit.Middleware.CircuitBreaker.ICircuitBreakerBehavior,System.Collections.Generic.IEnumerator{System.TimeSpan})">
            <summary>
            Open the circuit breaker, preventing any further access to the resource until
            the timer expires
            </summary>
            <param name="exception">The exception to return when the circuit breaker is accessed</param>
            <param name="behavior"></param>
            <param name="timeoutEnumerator">A previously created enumerator for a timeout period</param>
        </member>
        <member name="M:MassTransit.Middleware.CircuitBreaker.ICircuitBreaker.ClosePartially(System.Exception,System.Collections.Generic.IEnumerator{System.TimeSpan},MassTransit.Middleware.CircuitBreaker.ICircuitBreakerBehavior)">
            <summary>
            Partially open the circuit breaker, allowing the eventual return to a closed
            state
            </summary>
            <param name="exception"></param>
            <param name="timeoutEnumerator"></param>
            <param name="behavior"></param>
        </member>
        <member name="M:MassTransit.Middleware.CircuitBreaker.ICircuitBreaker.Close(MassTransit.Middleware.CircuitBreaker.ICircuitBreakerBehavior)">
            <summary>
            Close the circuit breaker, allowing normal execution
            </summary>
            <param name="behavior"></param>
        </member>
        <member name="T:MassTransit.Middleware.CircuitBreaker.OpenBehavior">
            <summary>
            Represents a circuit that is unavailable, with a timer waiting to partially close
            the circuit.
            </summary>
        </member>
        <member name="T:MassTransit.Middleware.CompensateActivityFilter`2">
            <summary>
            Compensates an activity as part of an activity execute host pipe
            </summary>
            <typeparam name="TLog"></typeparam>
            <typeparam name="TActivity"></typeparam>
        </member>
        <member name="T:MassTransit.Middleware.ConcurrencyLimiter">
            <summary>
            A concurrency limiter (using a semaphore) which can be shared, and adjusted using a management
            endpoint.
            </summary>
        </member>
        <member name="T:MassTransit.Middleware.ConcurrencyLimitFilter`1">
            <summary>
            Limits the concurrency of the next section of the pipeline based on the concurrency limit
            specified.
            </summary>
            <typeparam name="TContext"></typeparam>
        </member>
        <member name="T:MassTransit.Middleware.ConsumeConcurrencyLimitFilter`1">
            <summary>
            A concurrency limit filter that is shared by multiple message types, so that a consumer
            accepting those various types can be limited to a specific number of consumer instances.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Middleware.ConsumerMergePipe`2">
            <summary>
            Merges the out-of-band consumer back into the pipe
            </summary>
            <typeparam name="TConsumer"></typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Middleware.ConsumerMessageFilter`2">
            <summary>
            Consumes a message via Consumer, resolved through the consumer factory and notifies the context that the message was consumed.
            </summary>
            <typeparam name="TConsumer">The consumer type</typeparam>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="T:MassTransit.Middleware.ConsumerMessageMergePipe`2">
            <summary>
            Merges the out-of-band consumer back into the context
            </summary>
            <typeparam name="TConsumer"></typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Middleware.ConsumerSplitFilter`2">
            <summary>
            Splits a context item off the pipe and carries it out-of-band to be merged
            once the next filter has completed
            </summary>
            <typeparam name="TConsumer"></typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Middleware.ContextFilter`1">
            <summary>
            A content filter applies a delegate to the message context, and uses the result to either accept the message
            or discard it.
            </summary>
            <typeparam name="TContext"></typeparam>
        </member>
        <member name="T:MassTransit.Middleware.CorrelatedSagaFilter`2">
            <summary>
            Sends the message through the repository using the specified saga policy.
            </summary>
            <typeparam name="TSaga">The saga type</typeparam>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="T:MassTransit.Middleware.CorrelationIdMessageFilter`1">
            <summary>
            Extracts the CorrelationId from the message where there is a one-to-one correlation
            identifier in the message (such as CorrelationId) and sets it in the header for use
            by the saga repository.
            </summary>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="T:MassTransit.Middleware.DeadLetterFilter">
            <summary>
            If a message was neither delivered to a consumer nor caused a fault (which was notified already)
            then this filter will send the message to the dead letter pipe.
            </summary>
        </member>
        <member name="T:MassTransit.Middleware.DeadLetterTransportFilter">
            <summary>
            Moves a message received to a transport without any deserialization
            </summary>
        </member>
        <member name="T:MassTransit.Middleware.DelayedMessageRedeliveryFilter`1">
            <summary>
            Uses a delayed exchange in ActiveMQ to delay a message retry
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Middleware.DeserializeFilter">
            <summary>
            Performs the deserialization of a message ReceiveContext and passes the resulting
            ConsumeContext to the output pipe.
            </summary>
        </member>
        <member name="T:MassTransit.Middleware.DiscardDeadLetterFilter">
            <summary>
            Simply ignores/discards the not-consumed message
            </summary>
        </member>
        <member name="T:MassTransit.Middleware.DiscardErrorTransportFilter">
            <summary>
            Discard the error instead of moving it to the error transport.
            </summary>
        </member>
        <member name="T:MassTransit.Middleware.DynamicFilter`1">
            <summary>
            Dispatches an inbound pipe to one or more output pipes based on a dispatch
            type.
            </summary>
            <typeparam name="TInput"></typeparam>
        </member>
        <member name="T:MassTransit.Middleware.DynamicRouter`1">
            <summary>
            A dynamic router is a pipe on which additional pipes can be connected and context is
            routed through the pipe based upon the output requirements of the connected pipes. It is built
            around the dynamic filter, which is the central point of the router.
            </summary>
        </member>
        <member name="T:MassTransit.Middleware.ErrorTransportFilter">
            <summary>
            In the case of an exception, the message is moved to the destination transport. If the receive had not yet been
            faulted, a fault is generated.
            </summary>
        </member>
        <member name="T:MassTransit.Middleware.ExecuteActivityFilter`2">
            <summary>
            Executes an activity as part of an activity execute host pipe
            </summary>
            <typeparam name="TArguments"></typeparam>
            <typeparam name="TActivity"></typeparam>
        </member>
        <member name="T:MassTransit.Middleware.ForkFilter`1">
            <summary>
            Forks a single pipe into two pipes, which are executed concurrently
            </summary>
            <typeparam name="TContext"></typeparam>
        </member>
        <member name="T:MassTransit.Middleware.GenerateFaultFilter">
            <summary>
            Generates and publishes a <see cref="T:MassTransit.Fault" /> event for the exception
            </summary>
        </member>
        <member name="T:MassTransit.Middleware.HandlerMessageFilter`1">
            <summary>
            Consumes a message via a message handler and reports the message as consumed or faulted
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Middleware.IConsumerMessageFilter`2">
            <summary>
            Adapts a consumer to consume the message type
            </summary>
            <typeparam name="TConsumer">The consumer type</typeparam>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="T:MassTransit.Middleware.IDynamicRouter`1">
            <summary>
            A dynamic router is a pipe on which additional pipes can be connected and context is
            routed through the pipe based upon the output requirements of the connected pipes. It is built
            around the dynamic filter, which is the central point of the router.
            </summary>
        </member>
        <member name="T:MassTransit.Middleware.IDynamicRouter`2">
            <summary>
            A dynamic router is a pipe on which additional pipes can be connected and context is
            routed through the pipe based upon the output requirements of the connected pipes. It is built
            around the dynamic filter, which is the central point of the router.
            </summary>
        </member>
        <member name="T:MassTransit.Middleware.IHashGenerator">
            <summary>
            Generates a hash of the input data for partitioning purposes
            </summary>
        </member>
        <member name="T:MassTransit.Middleware.ILatestFilter`1">
            <summary>
            Maintains the latest context to be passed through the filter
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:MassTransit.Middleware.ILatestFilter`1.Latest">
            <summary>
            The most recently completed context to pass through the filter
            </summary>
        </member>
        <member name="T:MassTransit.Middleware.InitiatedByOrOrchestratesSagaMessageFilter`2">
            <summary>
            Dispatches the ConsumeContext to the consumer method for the specified message type
            </summary>
            <typeparam name="TSaga">The consumer type</typeparam>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="T:MassTransit.Middleware.InitiatedBySagaMessageFilter`2">
            <summary>
            Dispatches the ConsumeContext to the consumer method for the specified message type
            </summary>
            <typeparam name="TSaga">The consumer type</typeparam>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="T:MassTransit.Middleware.InMemoryOutbox.OutboxContext">
            <summary>
            The context for an outbox instance as part of consume context. Used to signal the completion of
            the consume, and store any Task factories that should be created.
            </summary>
        </member>
        <member name="P:MassTransit.Middleware.InMemoryOutbox.OutboxContext.ClearToSend">
            <summary>
            Returns an awaitable task that is completed when it is clear to send messages
            </summary>
        </member>
        <member name="M:MassTransit.Middleware.InMemoryOutbox.OutboxContext.Add(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Adds a method to be invoked once the outbox is ready to be sent
            </summary>
            <param name="method"></param>
        </member>
        <member name="M:MassTransit.Middleware.InMemoryOutbox.OutboxContext.ExecutePendingActions(System.Boolean)">
            <summary>
            Execute all the pending outbox operations (success case)
            </summary>
            <param name="concurrentMessageDelivery"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Middleware.InMemoryOutbox.OutboxContext.DiscardPendingActions">
            <summary>
            Discard any pending outbox operations, and cancel any scheduled messages
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Middleware.InMemoryOutbox.OutboxSendEndpoint.#ctor(MassTransit.Middleware.InMemoryOutbox.OutboxContext,MassTransit.ISendEndpoint)">
            <summary>
            Creates an send endpoint on the outbox
            </summary>
            <param name="outboxContext">The outbox context for this consume operation</param>
            <param name="endpoint">The actual endpoint returned by the transport</param>
        </member>
        <member name="P:MassTransit.Middleware.InMemoryOutbox.OutboxSendEndpoint.Endpoint">
            <summary>
            The actual endpoint, wrapped by the outbox
            </summary>
        </member>
        <member name="T:MassTransit.Middleware.InstanceMessageFilter`2">
            <summary>
            Consumes a message via an existing class instance
            </summary>
            <typeparam name="TConsumer"></typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Middleware.InterceptFilter`1">
            <summary>
            Intercepts the pipe and executes an adjacent pipe prior to executing the next filter in the main pipe
            </summary>
            <typeparam name="TContext"></typeparam>
        </member>
        <member name="T:MassTransit.Middleware.IPipeConnector">
            <summary>
            The intent is to connect a pipe of a specific type to a pipe of a different type,
            for which there is a provider that knows how to convert the input type to the output type.
            </summary>
        </member>
        <member name="M:MassTransit.Middleware.IPipeConnector.ConnectPipe``1(MassTransit.IPipe{``0})">
            <summary>
            Connect a pipe of the specified type to the DispatchFilter
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pipe"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Middleware.IPipeConnector`1">
            <summary>
            Connect a pipe of the same type as the target pipe
            </summary>
            <typeparam name="TContext"></typeparam>
        </member>
        <member name="T:MassTransit.Middleware.IKeyPipeConnector`1">
            <summary>
            Supports connecting a pipe using a key, which is a method of dispatching to different pipes
            based on context.
            </summary>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="M:MassTransit.Middleware.IKeyPipeConnector`1.ConnectPipe``1(`0,MassTransit.IPipe{``0})">
            <summary>
            Connect a pipe to the filter using the specified key
            </summary>
            <param name="key"></param>
            <param name="pipe"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Middleware.IPipeContextConverter`2">
            <summary>
            Converts the input context to the output context
            </summary>
            <typeparam name="TInput"></typeparam>
            <typeparam name="TOutput"></typeparam>
        </member>
        <member name="M:MassTransit.Middleware.IPipeContextConverterFactory`1.GetConverter``1">
            <summary>
            Given a known input context type, convert it to the correct output
            context type.
            </summary>
            <typeparam name="TOutput"></typeparam>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Middleware.ISagaMessageFilter`2">
            <summary>
            Adapts a consumer to consume the message type
            </summary>
            <typeparam name="TSaga">The consumer type</typeparam>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="T:MassTransit.Middleware.JobConsumerMessageFilter`2">
            <summary>
            Converts the ConsumeContext to a JobContext, and executes the job
            </summary>
            <typeparam name="TConsumer">The consumer type</typeparam>
            <typeparam name="TJob">The message type</typeparam>
        </member>
        <member name="T:MassTransit.Middleware.KeyFilter`2">
            <summary>
            Handles the registration of requests and connecting them to the consume pipe
            </summary>
            <typeparam name="TContext"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="T:MassTransit.Middleware.LatestFilter`1">
            <summary>
            Retains the last value that was sent through the filter, usable as a source to a join pipe
            </summary>
        </member>
        <member name="T:MassTransit.Middleware.MessageSchedulerFilter">
            <summary>
            Adds the scheduler to the consume context, so that it can be used for message redelivery
            </summary>
        </member>
        <member name="T:MassTransit.Middleware.MessageSplitFilter`2">
            <summary>
            Splits a context item off the pipe and carries it out-of-band to be merged
            once the next filter has completed
            </summary>
            <typeparam name="TConsumer"></typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Middleware.MethodConsumerMessageFilter`2">
            <summary>
            Dispatches the ConsumeContext to the consumer method for the specified message type
            </summary>
            <typeparam name="TConsumer">The consumer type</typeparam>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="T:MassTransit.Middleware.MissingSagaPipe`2">
            <summary>
            Dispatches a missing saga message to the saga policy, calling Add if necessary
            </summary>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="TSaga"></typeparam>
        </member>
        <member name="T:MassTransit.Middleware.ObserverMessageFilter`1">
            <summary>
            Consumes a message via a message handler and reports the message as consumed or faulted
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Middleware.ObservesSagaMessageFilter`2">
            <summary>
            Dispatches the ConsumeContext to the consumer method for the specified message type
            </summary>
            <typeparam name="TSaga">The consumer type</typeparam>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="T:MassTransit.Middleware.OrchestratesSagaMessageFilter`2">
            <summary>
            Dispatches the ConsumeContext to the consumer method for the specified message type
            </summary>
            <typeparam name="TSaga">The consumer type</typeparam>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="P:MassTransit.Middleware.OutboxConsumeContext.ContinueProcessing">
            <summary>
            If true, continue processing
            </summary>
        </member>
        <member name="P:MassTransit.Middleware.OutboxConsumeContext.IsMessageConsumed">
            <summary>
            If true, the message was already consumed
            </summary>
        </member>
        <member name="P:MassTransit.Middleware.OutboxConsumeContext.IsOutboxDelivered">
            <summary>
            If true, the outbox messages have already been dispatched
            </summary>
        </member>
        <member name="P:MassTransit.Middleware.OutboxConsumeContext.ReceiveCount">
            <summary>
            The number of delivery attempts for this message
            </summary>
        </member>
        <member name="P:MassTransit.Middleware.OutboxConsumeContext.LastSequenceNumber">
            <summary>
            The last sequence number produced from the outbox
            </summary>
        </member>
        <member name="T:MassTransit.Middleware.OutboxConsumeFilter`2">
            <summary>
            Sends the message through the outbox
            </summary>
            <typeparam name="TContext">The outbox context type</typeparam>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="P:MassTransit.Middleware.OutboxConsumeOptions.ConsumerId">
            <summary>
            The generated identifier for the consumer based upon endpoint name
            </summary>
        </member>
        <member name="P:MassTransit.Middleware.OutboxConsumeOptions.ConsumerType">
            <summary>
            The display name of the consumer type
            </summary>
        </member>
        <member name="P:MassTransit.Middleware.OutboxConsumeOptions.MessageDeliveryLimit">
            <summary>
            The number of message to deliver at a time from the outbox
            </summary>
        </member>
        <member name="P:MassTransit.Middleware.OutboxConsumeOptions.MessageDeliveryTimeout">
            <summary>
            The time to wait when delivering a message to the broker
            </summary>
        </member>
        <member name="T:MassTransit.Middleware.OutboxSendContext">
            <summary>
            Used by the new outbox construct
            </summary>
        </member>
        <member name="P:MassTransit.Middleware.Outbox.InMemoryInboxMessage.MessageId">
            <summary>
            The MessageId of the incoming message
            </summary>
        </member>
        <member name="P:MassTransit.Middleware.Outbox.InMemoryInboxMessage.ConsumerId">
            <summary>
            And MD5 hash of the endpoint name + consumer type
            </summary>
        </member>
        <member name="P:MassTransit.Middleware.Outbox.InMemoryInboxMessage.Received">
            <summary>
            When the message was first received
            </summary>
        </member>
        <member name="P:MassTransit.Middleware.Outbox.InMemoryInboxMessage.ReceiveCount">
            <summary>
            How many times the message has been received
            </summary>
        </member>
        <member name="P:MassTransit.Middleware.Outbox.InMemoryInboxMessage.ExpirationTime">
            <summary>
            If present, when the message expires (from the message header)
            </summary>
        </member>
        <member name="P:MassTransit.Middleware.Outbox.InMemoryInboxMessage.Consumed">
            <summary>
            When the message was consumed, successfully
            </summary>
        </member>
        <member name="P:MassTransit.Middleware.Outbox.InMemoryInboxMessage.Delivered">
            <summary>
            When all messages in the outbox were delivered to the transport
            </summary>
        </member>
        <member name="P:MassTransit.Middleware.Outbox.InMemoryInboxMessage.LastSequenceNumber">
            <summary>
            The last sequence number that was successfully delivered to the transport
            </summary>
        </member>
        <member name="P:MassTransit.Middleware.Outbox.InMemoryOutboxMessage.EnqueueTime">
            <summary>
            When the message should be visible / ready to be delivered
            </summary>
        </member>
        <member name="P:MassTransit.Middleware.Outbox.InMemoryOutboxMessage.Properties">
            <summary>
            Transport-specific message properties (routing key, partition key, sessionId, etc.)
            </summary>
        </member>
        <member name="M:MassTransit.Middleware.Outbox.OutboxSendEndpoint.#ctor(MassTransit.Middleware.OutboxSendContext,MassTransit.ISendEndpoint)">
            <summary>
            Creates an send endpoint on the outbox
            </summary>
            <param name="outboxContext">The outbox context for this consume operation</param>
            <param name="endpoint"></param>
        </member>
        <member name="T:MassTransit.Middleware.OutputPipeFilter`2">
            <summary>
            Converts an inbound context type to a pipe context type post-dispatch
            </summary>
            <typeparam name="TInput">The pipe context type</typeparam>
            <typeparam name="TOutput">The subsequent pipe context type</typeparam>
        </member>
        <member name="T:MassTransit.Middleware.PipeContextSourceBindFilter`2">
            <summary>
            Binds a context to the pipe using a <see cref="T:MassTransit.IPipeContextSource`1" />.
            </summary>
            <typeparam name="TLeft"></typeparam>
            <typeparam name="TRight"></typeparam>
        </member>
        <member name="T:MassTransit.Middleware.PublishMessageSchedulerFilter">
            <summary>
            Adds the scheduler to the consume context, so that it can be used for message redelivery
            </summary>
        </member>
        <member name="T:MassTransit.Middleware.QuerySagaFilter`2">
            <summary>
            Creates a filter to send a query to the saga repository using the query factory and saga policy provided.
            </summary>
            <typeparam name="TSaga">The saga type</typeparam>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="T:MassTransit.Middleware.RateLimitFilter`1">
            <summary>
            Limits the number of calls through the filter to a specified count per time interval
            specified.
            </summary>
            <typeparam name="TContext"></typeparam>
        </member>
        <member name="T:MassTransit.Middleware.RedeliveryRetryFilter`2">
            <summary>
            Uses the message redelivery mechanism, if available, to delay a retry without blocking message delivery
            </summary>
            <typeparam name="TContext">The context type</typeparam>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="T:MassTransit.Middleware.RescueFilter`2">
            <summary>
            Rescue catches an exception, and if the exception matches the exception filter,
            passes control to the rescue pipe.
            </summary>
            <typeparam name="TContext">The context type</typeparam>
            <typeparam name="TRescueContext"></typeparam>
        </member>
        <member name="T:MassTransit.Middleware.RetryFilter`1">
            <summary>
            Uses a retry policy to handle exceptions, retrying the operation in according
            with the policy
            </summary>
        </member>
        <member name="T:MassTransit.Middleware.SagaMergePipe`2">
            <summary>
            Merges the out-of-band message back into the pipe
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Middleware.SagaMessageMergePipe`2">
            <summary>
            Merges the out-of-band Saga back into the context
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Middleware.SagaMessageSplitFilter`2">
            <summary>
            Splits a context item off the pipe and carries it out-of-band to be merged
            once the next filter has completed
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Middleware.SagaSplitFilter`2">
            <summary>
            Splits a context item off the pipe and carries it out-of-band to be merged
            once the next filter has completed
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Middleware.ScheduleMessageRedeliveryFilter`1">
            <summary>
            Adds the scheduler to the consume context, so that it can be used for message redelivery
            </summary>
        </member>
        <member name="T:MassTransit.Middleware.SetCorrelationIdFilter`1">
            <summary>
            Sets the CorrelationId header uses the supplied implementation.
            </summary>
            <typeparam name="T">The message type</typeparam>
        </member>
        <member name="T:MassTransit.Middleware.SetSerializerFilter`1">
            <summary>
            Sets the CorrelationId header uses the supplied implementation.
            </summary>
            <typeparam name="T">The message type</typeparam>
        </member>
        <member name="T:MassTransit.Middleware.StateMachineSagaMessageFilter`2">
            <summary>
            Dispatches the ConsumeContext to the consumer method for the specified message type
            </summary>
            <typeparam name="TSaga">The consumer type</typeparam>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="T:MassTransit.Middleware.TeeFilter`1">
            <summary>
            Connects multiple output pipes to a single input pipe
            </summary>
            <typeparam name="TContext"></typeparam>
        </member>
        <member name="T:MassTransit.Middleware.TeeFilter`2">
            <summary>
            Connects multiple output pipes to a single input pipe
            </summary>
            <typeparam name="TContext"></typeparam>
            <typeparam name="TKey">The key type</typeparam>
        </member>
        <member name="T:MassTransit.Middleware.TransformFilter`1">
            <summary>
            Applies a transform to the message
            </summary>
            <typeparam name="T">The message type</typeparam>
        </member>
        <member name="T:MassTransit.Monitoring.Performance.ConsumerPerformanceCounter">
            <summary>
            Tracks the consumption and failure of a consumer processing messages. The message types
            in this case are not included in the counter, only the consumer itself.
            </summary>
        </member>
        <member name="M:MassTransit.Monitoring.Performance.IMessagePerformanceCounter.Consumed(System.TimeSpan)">
            <summary>
            A message was consumed, including the consume duration
            </summary>
            <param name="duration"></param>
        </member>
        <member name="M:MassTransit.Monitoring.Performance.IMessagePerformanceCounter.ConsumeFaulted(System.TimeSpan)">
            <summary>
            A message faulted while being consumed
            </summary>
            <param name="duration"></param>
        </member>
        <member name="M:MassTransit.Monitoring.Performance.IMessagePerformanceCounter.Sent">
            <summary>
            A message was sent
            </summary>
        </member>
        <member name="M:MassTransit.Monitoring.Performance.IMessagePerformanceCounter.Published">
            <summary>
            A message was published
            </summary>
        </member>
        <member name="M:MassTransit.Monitoring.Performance.IMessagePerformanceCounter.PublishFaulted">
            <summary>
            A publish faulted
            </summary>
        </member>
        <member name="M:MassTransit.Monitoring.Performance.IMessagePerformanceCounter.SendFaulted">
            <summary>
            A send faulted
            </summary>
        </member>
        <member name="T:MassTransit.Monitoring.Performance.PerformanceCounterPublishObserver">
            <summary>
            An observer that updates the performance counters using the bus events
            generated.
            </summary>
        </member>
        <member name="T:MassTransit.Monitoring.Performance.PerformanceCounterReceiveObserver">
            <summary>
            An observer that updates the performance counters using the bus events
            generated.
            </summary>
        </member>
        <member name="T:MassTransit.Monitoring.Performance.PerformanceCounterSendObserver">
            <summary>
            An observer that updates the performance counters using the bus events
            generated.
            </summary>
        </member>
        <member name="T:MassTransit.PipeContextHandle`1">
            <summary>
            A handle to a PipeContext instance (of type <typeparamref name="TContext"/>), which can be disposed
            once it is no longer needed (or can no longer be used).
            </summary>
            <typeparam name="TContext"></typeparam>
        </member>
        <member name="P:MassTransit.PipeContextHandle`1.IsDisposed">
            <summary>
            True if the context has been disposed (and can no longer be used)
            </summary>
        </member>
        <member name="P:MassTransit.PipeContextHandle`1.Context">
            <summary>
            The <typeparamref name="TContext"/> context
            </summary>
        </member>
        <member name="M:MassTransit.PublishEndpointRecurringSchedulerExtensions.ScheduleRecurringSend``1(MassTransit.IPublishEndpoint,System.Uri,MassTransit.Scheduling.RecurringSchedule,``0,System.Threading.CancellationToken)">
            <summary>
            Schedule a message for recurring delivery using the specified schedule
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="message">The message</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="schedule">The schedule for the message to be delivered</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.PublishEndpointRecurringSchedulerExtensions.ScheduleRecurringSend``1(MassTransit.IPublishEndpoint,System.Uri,MassTransit.Scheduling.RecurringSchedule,``0,MassTransit.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Schedule a message for recurring delivery using the specified schedule
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="message">The message</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="schedule">The schedule for the message to be delivered</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.PublishEndpointRecurringSchedulerExtensions.ScheduleRecurringSend``1(MassTransit.IPublishEndpoint,System.Uri,MassTransit.Scheduling.RecurringSchedule,``0,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Schedule a message for recurring delivery using the specified schedule
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="message">The message</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="schedule">The schedule for the message to be delivered</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.PublishEndpointRecurringSchedulerExtensions.ScheduleRecurringSend(MassTransit.IPublishEndpoint,System.Uri,MassTransit.Scheduling.RecurringSchedule,System.Object,System.Threading.CancellationToken)">
            <summary>
            Schedule a message for recurring delivery using the specified schedule
            </summary>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="message">The message object</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="schedule">The schedule for the message to be delivered</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.PublishEndpointRecurringSchedulerExtensions.ScheduleRecurringSend(MassTransit.IPublishEndpoint,System.Uri,MassTransit.Scheduling.RecurringSchedule,System.Object,System.Type,System.Threading.CancellationToken)">
            <summary>
            Schedule a message for recurring delivery using the specified schedule
            </summary>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="message">The message object</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="schedule">The schedule for the message to be delivered</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.PublishEndpointRecurringSchedulerExtensions.ScheduleRecurringSend(MassTransit.IPublishEndpoint,System.Uri,MassTransit.Scheduling.RecurringSchedule,System.Object,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Schedule a message for recurring delivery using the specified schedule
            </summary>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="message">The message object</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="schedule">The schedule for the message to be delivered</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.PublishEndpointRecurringSchedulerExtensions.ScheduleRecurringSend(MassTransit.IPublishEndpoint,System.Uri,MassTransit.Scheduling.RecurringSchedule,System.Object,System.Type,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Schedule a message for recurring delivery using the specified schedule
            </summary>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="message">The message object</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="schedule">The schedule for the message to be delivered</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.PublishEndpointRecurringSchedulerExtensions.ScheduleRecurringSend``1(MassTransit.IPublishEndpoint,System.Uri,MassTransit.Scheduling.RecurringSchedule,System.Object,System.Threading.CancellationToken)">
            <summary>
            Schedule a message for recurring delivery using the specified schedule
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="schedule">The schedule for the message to be delivered</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.PublishEndpointRecurringSchedulerExtensions.ScheduleRecurringSend``1(MassTransit.IPublishEndpoint,System.Uri,MassTransit.Scheduling.RecurringSchedule,System.Object,MassTransit.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Schedule a message for recurring delivery using the specified schedule
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="schedule">The schedule for the message to be delivered</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.PublishEndpointRecurringSchedulerExtensions.ScheduleRecurringSend``1(MassTransit.IPublishEndpoint,System.Uri,MassTransit.Scheduling.RecurringSchedule,System.Object,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Schedule a message for recurring delivery using the specified schedule
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="schedule">The schedule for the message to be delivered</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.PublishEndpointRecurringSchedulerExtensions.CancelScheduledRecurringSend``1(MassTransit.IPublishEndpoint,MassTransit.ScheduledRecurringMessage{``0})">
            <summary>
            Cancel a scheduled message using the scheduled message instance
            </summary>
            <param name="endpoint">The endpoint of the scheduling service</param>
            <param name="message">The schedule message reference</param>
        </member>
        <member name="M:MassTransit.PublishEndpointRecurringSchedulerExtensions.CancelScheduledRecurringSend(MassTransit.IPublishEndpoint,System.String,System.String)">
            <summary>
            Cancel a scheduled message using the scheduleId and scheduleGroup that was returned when the message was scheduled.
            </summary>
            <param name="endpoint">The endpoint of the scheduling service</param>
            <param name="scheduleId">The scheduleId from the recurring schedule</param>
            <param name="scheduleGroup">The scheduleGroup from the recurring schedule</param>
        </member>
        <member name="M:MassTransit.PublishEndpointRecurringSchedulerExtensions.PauseScheduledRecurringSend``1(MassTransit.IPublishEndpoint,MassTransit.ScheduledRecurringMessage{``0})">
            <summary>
            Pause a scheduled message using the scheduled message instance
            </summary>
            <param name="endpoint">The endpoint of the scheduling service</param>
            <param name="message">The schedule message reference</param>
        </member>
        <member name="M:MassTransit.PublishEndpointRecurringSchedulerExtensions.PauseScheduledRecurringSend(MassTransit.IPublishEndpoint,System.String,System.String)">
            <summary>
            Pause a scheduled message using the scheduleId and scheduleGroup that was returned when the message was scheduled.
            </summary>
            <param name="endpoint">The endpoint of the scheduling service</param>
            <param name="scheduleId">The scheduleId from the recurring schedule</param>
            <param name="scheduleGroup">The scheduleGroup from the recurring schedule</param>
        </member>
        <member name="M:MassTransit.PublishEndpointRecurringSchedulerExtensions.ResumeScheduledRecurringSend``1(MassTransit.IPublishEndpoint,MassTransit.ScheduledRecurringMessage{``0})">
            <summary>
            Resume a scheduled message using the scheduled message instance
            </summary>
            <param name="endpoint">The endpoint of the scheduling service</param>
            <param name="message">The schedule message reference</param>
        </member>
        <member name="M:MassTransit.PublishEndpointRecurringSchedulerExtensions.ResumeScheduledRecurringSend(MassTransit.IPublishEndpoint,System.String,System.String)">
            <summary>
            Resume a scheduled message using the scheduleId and scheduleGroup that was returned when the message was scheduled.
            </summary>
            <param name="endpoint">The endpoint of the scheduling service</param>
            <param name="scheduleId">The scheduleId from the recurring schedule</param>
            <param name="scheduleGroup">The scheduleGroup from the recurring schedule</param>
        </member>
        <member name="M:MassTransit.RedeliverExtensions.Redeliver``1(MassTransit.ConsumeContext{``0},System.TimeSpan,System.Action{MassTransit.ConsumeContext,MassTransit.SendContext})">
            <summary>
            Redeliver uses the message scheduler to deliver the message to the queue at a future
            time. The delivery count is incremented. Moreover, if you give custom callback action, it perform before sending message to queue.
            A message scheduler must be configured on the bus for redelivery to be enabled.
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The consume context of the message</param>
            <param name="delay">
            The delay before the message is delivered. It may take longer to receive the message if the queue is not empty.
            </param>
            <param name="callback">Operation which is executed before the message is delivered.</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.RequestExtensions.Request``2(MassTransit.IBus,System.Uri,``0,System.Threading.CancellationToken,MassTransit.RequestTimeout,System.Action{MassTransit.SendContext{``0}})">
            <summary>
            Send a request from the bus to the endpoint, and return a Task which can be awaited for the response.
            </summary>
            <param name="bus">A started bus instance</param>
            <param name="destinationAddress">The service address</param>
            <param name="message">The request message</param>
            <param name="cancellationToken">An optional cancellationToken for this request</param>
            <param name="timeout">An optional timeout for the request (defaults to 30 seconds)</param>
            <param name="callback">A callback, which can modify the <see cref="T:MassTransit.SendContext" /> of the request</param>
            <typeparam name="TRequest">The request type</typeparam>
            <typeparam name="TResponse">The response type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.RequestExtensions.Request``2(MassTransit.IBus,System.Uri,System.Object,System.Threading.CancellationToken,MassTransit.RequestTimeout,System.Action{MassTransit.SendContext{``0}})">
            <summary>
            Send a request from the bus to the endpoint, and return a Task which can be awaited for the response.
            </summary>
            <param name="bus">A started bus instance</param>
            <param name="destinationAddress">The service address</param>
            <param name="values">The values used to initialize the request message</param>
            <param name="cancellationToken">An optional cancellationToken for this request</param>
            <param name="timeout">An optional timeout for the request (defaults to 30 seconds)</param>
            <param name="callback">A callback, which can modify the <see cref="T:MassTransit.SendContext" /> of the request</param>
            <typeparam name="TRequest">The request type</typeparam>
            <typeparam name="TResponse">The response type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.RequestExtensions.Request``2(MassTransit.IBus,``0,System.Threading.CancellationToken,MassTransit.RequestTimeout,System.Action{MassTransit.SendContext{``0}})">
            <summary>
            Send a request from the bus to the endpoint, and return a Task which can be awaited for the response.
            </summary>
            <param name="bus">A started bus instance</param>
            <param name="message">The request message</param>
            <param name="cancellationToken">An optional cancellationToken for this request</param>
            <param name="timeout">An optional timeout for the request (defaults to 30 seconds)</param>
            <param name="callback">A callback, which can modify the <see cref="T:MassTransit.SendContext" /> of the request</param>
            <typeparam name="TRequest">The request type</typeparam>
            <typeparam name="TResponse">The response type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.RequestExtensions.Request``2(MassTransit.IBus,System.Object,System.Threading.CancellationToken,MassTransit.RequestTimeout,System.Action{MassTransit.SendContext{``0}})">
            <summary>
            Send a request from the bus to the endpoint, and return a Task which can be awaited for the response.
            </summary>
            <param name="bus">A started bus instance</param>
            <param name="values">The values used to initialize the request message</param>
            <param name="cancellationToken">An optional cancellationToken for this request</param>
            <param name="timeout">An optional timeout for the request (defaults to 30 seconds)</param>
            <param name="callback">A callback, which can modify the <see cref="T:MassTransit.SendContext" /> of the request</param>
            <typeparam name="TRequest">The request type</typeparam>
            <typeparam name="TResponse">The response type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.RequestExtensions.Request``2(MassTransit.ConsumeContext,MassTransit.IBus,System.Uri,``0,System.Threading.CancellationToken,MassTransit.RequestTimeout,System.Action{MassTransit.SendContext{``0}})">
            <summary>
            Send a request from the bus to the endpoint, and return a Task which can be awaited for the response.
            </summary>
            <param name="consumeContext"></param>
            <param name="bus">A started bus instance</param>
            <param name="destinationAddress">The service address</param>
            <param name="message">The request message</param>
            <param name="cancellationToken">An optional cancellationToken for this request</param>
            <param name="timeout">An optional timeout for the request (defaults to 30 seconds)</param>
            <param name="callback">A callback, which can modify the <see cref="T:MassTransit.SendContext" /> of the request</param>
            <typeparam name="TRequest">The request type</typeparam>
            <typeparam name="TResponse">The response type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.RequestExtensions.Request``2(MassTransit.ConsumeContext,MassTransit.IBus,System.Uri,System.Object,System.Threading.CancellationToken,MassTransit.RequestTimeout,System.Action{MassTransit.SendContext{``0}})">
            <summary>
            Send a request from the bus to the endpoint, and return a Task which can be awaited for the response.
            </summary>
            <param name="consumeContext"></param>
            <param name="bus">A started bus instance</param>
            <param name="destinationAddress">The service address</param>
            <param name="values">The values used to initialize the request message</param>
            <param name="cancellationToken">An optional cancellationToken for this request</param>
            <param name="timeout">An optional timeout for the request (defaults to 30 seconds)</param>
            <param name="callback">A callback, which can modify the <see cref="T:MassTransit.SendContext" /> of the request</param>
            <typeparam name="TRequest">The request type</typeparam>
            <typeparam name="TResponse">The response type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.RequestExtensions.Request``2(MassTransit.ConsumeContext,MassTransit.IBus,``0,System.Threading.CancellationToken,MassTransit.RequestTimeout,System.Action{MassTransit.SendContext{``0}})">
            <summary>
            Send a request from the bus to the endpoint, and return a Task which can be awaited for the response.
            </summary>
            <param name="consumeContext"></param>
            <param name="bus">A started bus instance</param>
            <param name="message">The request message</param>
            <param name="cancellationToken">An optional cancellationToken for this request</param>
            <param name="timeout">An optional timeout for the request (defaults to 30 seconds)</param>
            <param name="callback">A callback, which can modify the <see cref="T:MassTransit.SendContext" /> of the request</param>
            <typeparam name="TRequest">The request type</typeparam>
            <typeparam name="TResponse">The response type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.RequestExtensions.Request``2(MassTransit.ConsumeContext,MassTransit.IBus,System.Object,System.Threading.CancellationToken,MassTransit.RequestTimeout,System.Action{MassTransit.SendContext{``0}})">
            <summary>
            Send a request from the bus to the endpoint, and return a Task which can be awaited for the response.
            </summary>
            <param name="consumeContext"></param>
            <param name="bus">A started bus instance</param>
            <param name="values">The values used to initialize the request message</param>
            <param name="cancellationToken">An optional cancellationToken for this request</param>
            <param name="timeout">An optional timeout for the request (defaults to 30 seconds)</param>
            <param name="callback">A callback, which can modify the <see cref="T:MassTransit.SendContext" /> of the request</param>
            <typeparam name="TRequest">The request type</typeparam>
            <typeparam name="TResponse">The response type</typeparam>
            <returns></returns>
        </member>
        <member name="P:MassTransit.Retry.None">
            <summary>
            Create a policy that does not retry any messages
            </summary>
        </member>
        <member name="M:MassTransit.Retry.Immediate(System.Int32)">
            <summary>
            Create an immediate retry policy with the specified number of retries, with no
            delay between attempts.
            </summary>
            <param name="retryLimit">The number of retries to attempt</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Immediate(MassTransit.IExceptionFilter,System.Int32)">
            <summary>
            Create an immediate retry policy with the specified number of retries, with no
            delay between attempts.
            </summary>
            <param name="filter"></param>
            <param name="retryLimit">The number of retries to attempt</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Intervals(System.TimeSpan[])">
            <summary>
            Create an interval retry policy with the specified intervals. The retry count equals
            the number of intervals provided
            </summary>
            <param name="intervals">The intervals before each subsequent retry attempt</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Intervals(MassTransit.IExceptionFilter,System.TimeSpan[])">
            <summary>
            Create an interval retry policy with the specified intervals. The retry count equals
            the number of intervals provided
            </summary>
            <param name="filter"></param>
            <param name="intervals">The intervals before each subsequent retry attempt</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Intervals(System.Int32[])">
            <summary>
            Create an interval retry policy with the specified intervals. The retry count equals
            the number of intervals provided
            </summary>
            <param name="intervals">The intervals before each subsequent retry attempt</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Intervals(MassTransit.IExceptionFilter,System.Int32[])">
            <summary>
            Create an interval retry policy with the specified intervals. The retry count equals
            the number of intervals provided
            </summary>
            <param name="filter"></param>
            <param name="intervals">The intervals before each subsequent retry attempt</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Interval(System.Int32,System.TimeSpan)">
            <summary>
            Create an interval retry policy with the specified number of retries at a fixed interval
            </summary>
            <param name="retryCount">The number of retry attempts</param>
            <param name="interval">The interval between each retry attempt</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Interval(System.Int32,System.Int32)">
            <summary>
            Create an interval retry policy with the specified number of retries at a fixed interval
            </summary>
            <param name="retryCount">The number of retry attempts</param>
            <param name="interval">The interval between each retry attempt</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Interval(MassTransit.IExceptionFilter,System.Int32,System.TimeSpan)">
            <summary>
            Create an interval retry policy with the specified number of retries at a fixed interval
            </summary>
            <param name="filter"></param>
            <param name="retryCount">The number of retry attempts</param>
            <param name="interval">The interval between each retry attempt</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Exponential(System.Int32,System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Create an exponential retry policy with the specified number of retries at exponential
            intervals
            </summary>
            <param name="retryLimit"></param>
            <param name="minInterval"></param>
            <param name="maxInterval"></param>
            <param name="intervalDelta"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Exponential(System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Create an exponential retry policy that never gives up
            intervals
            </summary>
            <param name="minInterval"></param>
            <param name="maxInterval"></param>
            <param name="intervalDelta"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Exponential(MassTransit.IExceptionFilter,System.Int32,System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Create an exponential retry policy with the specified number of retries at exponential
            intervals
            </summary>
            <param name="filter"></param>
            <param name="retryLimit"></param>
            <param name="minInterval"></param>
            <param name="maxInterval"></param>
            <param name="intervalDelta"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Incremental(System.Int32,System.TimeSpan,System.TimeSpan)">
            <summary>
            Create an incremental retry policy with the specified number of retry attempts with an incrementing
            interval between retries
            </summary>
            <param name="retryLimit">The number of retry attempts</param>
            <param name="initialInterval">The initial retry interval</param>
            <param name="intervalIncrement">The interval to add to the retry interval with each subsequent retry</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Incremental(MassTransit.IExceptionFilter,System.Int32,System.TimeSpan,System.TimeSpan)">
            <summary>
            Create an incremental retry policy with the specified number of retry attempts with an incrementing
            interval between retries
            </summary>
            <param name="filter"></param>
            <param name="retryLimit">The number of retry attempts</param>
            <param name="initialInterval">The initial retry interval</param>
            <param name="intervalIncrement">The interval to add to the retry interval with each subsequent retry</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Except(System.Type[])">
            <summary>
            Retry all exceptions except for the exception types specified
            </summary>
            <param name="exceptionTypes"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Except``1">
            <summary>
            Retry all exceptions except for the exception types specified
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Except``2">
            <summary>
            Retry all exceptions except for the exception types specified
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Except``3">
            <summary>
            Retry all exceptions except for the exception types specified
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Selected(System.Type[])">
            <summary>
            Retry only the exception types specified
            </summary>
            <param name="exceptionTypes"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Selected``1">
            <summary>
            Retry only the exception types specified
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Selected``2">
            <summary>
            Retry only the exception types specified
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Selected``3">
            <summary>
            Retry only the exception types specified
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.All">
            <summary>
            Retry all exceptions
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Retry.Filter``1(System.Func{``0,System.Boolean})">
            <summary>
            Filter an exception type
            </summary>
            <typeparam name="T">The exception type</typeparam>
            <param name="filter">The filter expression</param>
            <returns>True if the exception should be retried, otherwise false</returns>
        </member>
        <member name="T:MassTransit.RoutingSlipBuilder">
            <summary>
            A RoutingSlipBuilder is used to create a routing slip with proper validation that the resulting RoutingSlip
            is valid.
            </summary>
        </member>
        <member name="P:MassTransit.RoutingSlipBuilder.TrackingNumber">
            <summary>
            The tracking number of the routing slip
            </summary>
        </member>
        <member name="M:MassTransit.RoutingSlipBuilder.AddActivity(System.String,System.Uri)">
            <summary>
            Adds an activity to the routing slip without specifying any arguments
            </summary>
            <param name="name">The activity name</param>
            <param name="executeAddress">The execution address of the activity</param>
        </member>
        <member name="M:MassTransit.RoutingSlipBuilder.AddActivity(System.String,System.Uri,System.Object)">
            <summary>
            Adds an activity to the routing slip specifying activity arguments as an anonymous object
            </summary>
            <param name="name">The activity name</param>
            <param name="executeAddress">The execution address of the activity</param>
            <param name="arguments">An anonymous object of properties matching the argument names of the activity</param>
        </member>
        <member name="M:MassTransit.RoutingSlipBuilder.AddActivity(System.String,System.Uri,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Adds an activity to the routing slip specifying activity arguments a dictionary
            </summary>
            <param name="name">The activity name</param>
            <param name="executeAddress">The execution address of the activity</param>
            <param name="arguments">A dictionary of name/values matching the activity argument properties</param>
        </member>
        <member name="M:MassTransit.RoutingSlipBuilder.AddVariable(System.String,System.String)">
            <summary>
            Add a string value to the routing slip
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:MassTransit.RoutingSlipBuilder.AddVariable(System.String,System.Object)">
            <summary>
            Add an object variable to the routing slip
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:MassTransit.RoutingSlipBuilder.SetVariables(System.Object)">
            <summary>
            Sets the value of any existing variables to the value in the anonymous object,
            as well as adding any additional variables that did not exist previously.
            For example, SetVariables(new { IntValue = 27, StringValue = "Hello, World." });
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:MassTransit.RoutingSlipBuilder.AddActivitiesFromSourceItinerary">
            <summary>
            Adds the activities from the source itinerary to the new routing slip and removes them from the
            source itinerary.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.RoutingSlipBuilder.AddSubscription(System.Uri,MassTransit.Courier.Contracts.RoutingSlipEvents)">
            <summary>
            Add an explicit subscription to the routing slip events
            </summary>
            <param name="address">The destination address where the events are sent</param>
            <param name="events">The events to include in the subscription</param>
        </member>
        <member name="M:MassTransit.RoutingSlipBuilder.AddSubscription(System.Uri,MassTransit.Courier.Contracts.RoutingSlipEvents,MassTransit.Courier.Contracts.RoutingSlipEventContents)">
            <summary>
            Add an explicit subscription to the routing slip events
            </summary>
            <param name="address">The destination address where the events are sent</param>
            <param name="events">The events to include in the subscription</param>
            <param name="contents">The contents of the routing slip event</param>
        </member>
        <member name="M:MassTransit.RoutingSlipBuilder.AddSubscription(System.Uri,MassTransit.Courier.Contracts.RoutingSlipEvents,MassTransit.Courier.Contracts.RoutingSlipEventContents,System.String)">
            <summary>
            Add an explicit subscription to the routing slip events
            </summary>
            <param name="address">The destination address where the events are sent</param>
            <param name="events">The events to include in the subscription</param>
            <param name="contents">The contents of the routing slip event</param>
            <param name="activityName">Only send events for the specified activity</param>
        </member>
        <member name="M:MassTransit.RoutingSlipBuilder.AddSubscription(System.Uri,MassTransit.Courier.Contracts.RoutingSlipEvents,System.Func{MassTransit.ISendEndpoint,System.Threading.Tasks.Task})">
            <summary>
            Adds a message subscription to the routing slip that will be sent at the specified event points
            </summary>
            <param name="address"></param>
            <param name="events"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.RoutingSlipBuilder.AddSubscription(System.Uri,MassTransit.Courier.Contracts.RoutingSlipEvents,MassTransit.Courier.Contracts.RoutingSlipEventContents,System.Func{MassTransit.ISendEndpoint,System.Threading.Tasks.Task})">
            <summary>
            Adds a message subscription to the routing slip that will be sent at the specified event points
            </summary>
            <param name="address"></param>
            <param name="events"></param>
            <param name="contents"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.RoutingSlipBuilder.AddSubscription(System.Uri,MassTransit.Courier.Contracts.RoutingSlipEvents,MassTransit.Courier.Contracts.RoutingSlipEventContents,System.String,System.Func{MassTransit.ISendEndpoint,System.Threading.Tasks.Task})">
            <summary>
            Adds a message subscription to the routing slip that will be sent at the specified event points
            </summary>
            <param name="address"></param>
            <param name="events"></param>
            <param name="activityName">Only send events for the specified activity</param>
            <param name="contents"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.RoutingSlipBuilder.MassTransit#Courier#IRoutingSlipSendEndpointTarget#AddSubscription(System.Uri,MassTransit.Courier.Contracts.RoutingSlipEvents,MassTransit.Courier.Contracts.RoutingSlipEventContents,System.String,MassTransit.Serialization.MessageEnvelope)">
            <summary>
            Adds a custom subscription message to the routing slip which is sent at the specified events
            </summary>
            <param name="address">The destination address where the events are sent</param>
            <param name="events">The events to include in the subscription</param>
            <param name="contents">The contents of the routing slip event</param>
            <param name="activityName"></param>
            <param name="message">The custom message to be sent</param>
        </member>
        <member name="M:MassTransit.RoutingSlipBuilder.Build">
            <summary>
            Builds the routing slip using the current state of the builder
            </summary>
            <returns>The RoutingSlip</returns>
        </member>
        <member name="M:MassTransit.RoutingSlipBuilder.AddActivityException(MassTransit.HostInfo,System.String,System.Guid,System.DateTime,System.TimeSpan,System.Exception)">
            <summary>
            Adds an activity exception to the routing slip
            </summary>
            <param name="host"></param>
            <param name="name">The name of the faulted activity</param>
            <param name="activityTrackingNumber">The activity tracking number</param>
            <param name="timestamp">The timestamp of the exception</param>
            <param name="elapsed">The time elapsed from the start of the activity to the exception</param>
            <param name="exception">The exception thrown by the activity</param>
        </member>
        <member name="M:MassTransit.RoutingSlipBuilder.AddActivityException(MassTransit.HostInfo,System.String,System.Guid,System.DateTime,System.TimeSpan,MassTransit.ExceptionInfo)">
            <summary>
            Adds an activity exception to the routing slip
            </summary>
            <param name="host"></param>
            <param name="name">The name of the faulted activity</param>
            <param name="activityTrackingNumber">The activity tracking number</param>
            <param name="timestamp">The timestamp of the exception</param>
            <param name="elapsed">The time elapsed from the start of the activity to the exception</param>
            <param name="exceptionInfo"></param>
        </member>
        <member name="P:MassTransit.Components.RequestState.SagaCorrelationId">
            <summary>
            The correlationId of the original saga instance
            </summary>
        </member>
        <member name="P:MassTransit.Components.RequestState.SagaAddress">
            <summary>
            The saga address where the request should be redelivered
            </summary>
        </member>
        <member name="P:MassTransit.Components.RequestState.CorrelationId">
            <summary>
            Same as RequestId from the original request
            </summary>
        </member>
        <member name="T:MassTransit.Components.RequestStateMachine">
            <summary>
            Tracks a request, which was sent to a saga, and the saga deferred until some operation
            is completed, after which it will produce an event to trigger the response.
            </summary>
        </member>
        <member name="M:MassTransit.Components.RequestStateMachine.RedeliverOnMissingInstance(System.Action{MassTransit.IMissingInstanceRedeliveryConfigurator})">
            <summary>
            Configure the state machine to redeliver <see cref="T:MassTransit.Contracts.RequestCompleted" /> and <see cref="T:MassTransit.Contracts.RequestFaulted" /> events
            in the scenario where they arrive prior to the <see cref="T:MassTransit.Contracts.RequestStarted" /> event.
            </summary>
            <param name="configure">A redelivery configuration callback</param>
        </member>
        <member name="M:MassTransit.ContainerActivityExtensions.Activity``2(MassTransit.EventActivityBinder{``0,``1},System.Func{MassTransit.IStateMachineActivitySelector{``0,``1},MassTransit.EventActivityBinder{``0,``1}})">
            <summary>
            Adds an activity to the state machine that is resolved from the container, rather than being initialized directly.
            </summary>
            <typeparam name="TInstance"></typeparam>
            <typeparam name="TData"></typeparam>
            <param name="binder"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ContainerActivityExtensions.Activity``1(MassTransit.EventActivityBinder{``0},System.Func{MassTransit.IStateMachineActivitySelector{``0},MassTransit.EventActivityBinder{``0}})">
            <summary>
            Adds an activity to the state machine that is resolved from the container, rather than being initialized directly.
            </summary>
            <typeparam name="TInstance"></typeparam>
            <param name="binder"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ContainerActivityExtensions.Activity``2(MassTransit.ExceptionActivityBinder{``0,``1},System.Func{MassTransit.IStateMachineFaultedActivitySelector{``0,``1},MassTransit.ExceptionActivityBinder{``0,``1}})">
            <summary>
            Adds an activity to the state machine that is resolved from the container, but only handles Faulted behaviors
            </summary>
            <param name="binder"></param>
            <param name="configure"></param>
            <typeparam name="TInstance"></typeparam>
            <typeparam name="TException"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ContainerActivityExtensions.Activity``3(MassTransit.ExceptionActivityBinder{``0,``1,``2},System.Func{MassTransit.IStateMachineFaultedActivitySelector{``0,``1,``2},MassTransit.ExceptionActivityBinder{``0,``1,``2}})">
            <summary>
            Adds an activity to the state machine that is resolved from the container, but only handles Faulted behaviors
            </summary>
            <param name="binder"></param>
            <param name="configure"></param>
            <typeparam name="TInstance"></typeparam>
            <typeparam name="TException"></typeparam>
            <typeparam name="TMessage"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.EventActivityBinder`1.Catch``1(System.Func{MassTransit.ExceptionActivityBinder{`0,``0},MassTransit.ExceptionActivityBinder{`0,``0}})">
            <summary>
            Catch the exception of type T, and execute the compensation chain
            </summary>
            <typeparam name="T"></typeparam>
            <param name="activityCallback"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.EventActivityBinder`1.Retry(System.Action{MassTransit.IRetryConfigurator},System.Func{MassTransit.EventActivityBinder{`0},MassTransit.EventActivityBinder{`0}})">
            <summary>
            Retry the behavior, using the specified retry policy
            </summary>
            <param name="configure">Configures the retry</param>
            <param name="activityCallback"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.EventActivityBinder`1.If(MassTransit.StateMachineCondition{`0},System.Func{MassTransit.EventActivityBinder{`0},MassTransit.EventActivityBinder{`0}})">
            <summary>
            Create a conditional branch of activities for processing
            </summary>
            <param name="condition"></param>
            <param name="activityCallback"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.EventActivityBinder`1.IfAsync(MassTransit.StateMachineAsyncCondition{`0},System.Func{MassTransit.EventActivityBinder{`0},MassTransit.EventActivityBinder{`0}})">
            <summary>
            Create a conditional branch of activities for processing
            </summary>
            <param name="condition"></param>
            <param name="activityCallback"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.EventActivityBinder`1.IfElse(MassTransit.StateMachineCondition{`0},System.Func{MassTransit.EventActivityBinder{`0},MassTransit.EventActivityBinder{`0}},System.Func{MassTransit.EventActivityBinder{`0},MassTransit.EventActivityBinder{`0}})">
            <summary>
            Create a conditional branch of activities for processing
            </summary>
            <param name="condition"></param>
            <param name="thenActivityCallback"></param>
            <param name="elseActivityCallback"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.EventActivityBinder`1.IfElseAsync(MassTransit.StateMachineAsyncCondition{`0},System.Func{MassTransit.EventActivityBinder{`0},MassTransit.EventActivityBinder{`0}},System.Func{MassTransit.EventActivityBinder{`0},MassTransit.EventActivityBinder{`0}})">
            <summary>
            Create a conditional branch of activities for processing
            </summary>
            <param name="condition"></param>
            <param name="thenActivityCallback"></param>
            <param name="elseActivityCallback"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.EventActivityBinder`2.Catch``1(System.Func{MassTransit.ExceptionActivityBinder{`0,`1,``0},MassTransit.ExceptionActivityBinder{`0,`1,``0}})">
            <summary>
            Catch the exception of type T, and execute the compensation chain
            </summary>
            <typeparam name="T"></typeparam>
            <param name="activityCallback"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.EventActivityBinder`2.Retry(System.Action{MassTransit.IRetryConfigurator},System.Func{MassTransit.EventActivityBinder{`0,`1},MassTransit.EventActivityBinder{`0,`1}})">
            <summary>
            Retry the behavior, using the specified retry policy
            </summary>
            <param name="configure">Configures the retry</param>
            <param name="activityCallback"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.EventActivityBinder`2.If(MassTransit.StateMachineCondition{`0,`1},System.Func{MassTransit.EventActivityBinder{`0,`1},MassTransit.EventActivityBinder{`0,`1}})">
            <summary>
            Create a conditional branch of activities for processing
            </summary>
            <param name="condition"></param>
            <param name="activityCallback"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.EventActivityBinder`2.IfAsync(MassTransit.StateMachineAsyncCondition{`0,`1},System.Func{MassTransit.EventActivityBinder{`0,`1},MassTransit.EventActivityBinder{`0,`1}})">
            <summary>
            Create a conditional branch of activities for processing
            </summary>
            <param name="condition"></param>
            <param name="activityCallback"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.EventActivityBinder`2.IfElse(MassTransit.StateMachineCondition{`0,`1},System.Func{MassTransit.EventActivityBinder{`0,`1},MassTransit.EventActivityBinder{`0,`1}},System.Func{MassTransit.EventActivityBinder{`0,`1},MassTransit.EventActivityBinder{`0,`1}})">
            <summary>
            Create a conditional branch of activities for processing
            </summary>
            <param name="condition"></param>
            <param name="thenActivityCallback"></param>
            <param name="elseActivityCallback"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.EventActivityBinder`2.IfElseAsync(MassTransit.StateMachineAsyncCondition{`0,`1},System.Func{MassTransit.EventActivityBinder{`0,`1},MassTransit.EventActivityBinder{`0,`1}},System.Func{MassTransit.EventActivityBinder{`0,`1},MassTransit.EventActivityBinder{`0,`1}})">
            <summary>
            Create a conditional branch of activities for processing
            </summary>
            <param name="condition"></param>
            <param name="thenActivityCallback"></param>
            <param name="elseActivityCallback"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ExceptionActivityBinder`2.Catch``1(System.Func{MassTransit.ExceptionActivityBinder{`0,``0},MassTransit.ExceptionActivityBinder{`0,``0}})">
            <summary>
            Catch an exception and execute the compensating activities
            </summary>
            <typeparam name="T"></typeparam>
            <param name="activityCallback"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ExceptionActivityBinder`2.If(MassTransit.StateMachineExceptionCondition{`0,`1},System.Func{MassTransit.ExceptionActivityBinder{`0,`1},MassTransit.ExceptionActivityBinder{`0,`1}})">
            <summary>
            Create a conditional branch of activities for processing
            </summary>
            <param name="condition"></param>
            <param name="activityCallback"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ExceptionActivityBinder`2.IfAsync(MassTransit.StateMachineAsyncExceptionCondition{`0,`1},System.Func{MassTransit.ExceptionActivityBinder{`0,`1},MassTransit.ExceptionActivityBinder{`0,`1}})">
            <summary>
            Create a conditional branch of activities for processing
            </summary>
            <param name="condition"></param>
            <param name="activityCallback"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ExceptionActivityBinder`2.IfElse(MassTransit.StateMachineExceptionCondition{`0,`1},System.Func{MassTransit.ExceptionActivityBinder{`0,`1},MassTransit.ExceptionActivityBinder{`0,`1}},System.Func{MassTransit.ExceptionActivityBinder{`0,`1},MassTransit.ExceptionActivityBinder{`0,`1}})">
            <summary>
            Create a conditional branch of activities for processing
            </summary>
            <param name="condition"></param>
            <param name="thenActivityCallback"></param>
            <param name="elseActivityCallback"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ExceptionActivityBinder`2.IfElseAsync(MassTransit.StateMachineAsyncExceptionCondition{`0,`1},System.Func{MassTransit.ExceptionActivityBinder{`0,`1},MassTransit.ExceptionActivityBinder{`0,`1}},System.Func{MassTransit.ExceptionActivityBinder{`0,`1},MassTransit.ExceptionActivityBinder{`0,`1}})">
            <summary>
            Create a conditional branch of activities for processing
            </summary>
            <param name="condition"></param>
            <param name="thenActivityCallback"></param>
            <param name="elseActivityCallback"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ExceptionActivityBinder`3.Catch``1(System.Func{MassTransit.ExceptionActivityBinder{`0,`1,``0},MassTransit.ExceptionActivityBinder{`0,`1,``0}})">
            <summary>
            Catch an exception and execute the compensating activities
            </summary>
            <typeparam name="T"></typeparam>
            <param name="activityCallback"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ExceptionActivityBinder`3.If(MassTransit.StateMachineExceptionCondition{`0,`1,`2},System.Func{MassTransit.ExceptionActivityBinder{`0,`1,`2},MassTransit.ExceptionActivityBinder{`0,`1,`2}})">
            <summary>
            Create a conditional branch of activities for processing
            </summary>
            <param name="condition"></param>
            <param name="activityCallback"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ExceptionActivityBinder`3.IfAsync(MassTransit.StateMachineAsyncExceptionCondition{`0,`1,`2},System.Func{MassTransit.ExceptionActivityBinder{`0,`1,`2},MassTransit.ExceptionActivityBinder{`0,`1,`2}})">
            <summary>
            Create a conditional branch of activities for processing
            </summary>
            <param name="condition"></param>
            <param name="activityCallback"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ExceptionActivityBinder`3.IfElse(MassTransit.StateMachineExceptionCondition{`0,`1,`2},System.Func{MassTransit.ExceptionActivityBinder{`0,`1,`2},MassTransit.ExceptionActivityBinder{`0,`1,`2}},System.Func{MassTransit.ExceptionActivityBinder{`0,`1,`2},MassTransit.ExceptionActivityBinder{`0,`1,`2}})">
            <summary>
            Create a conditional branch of activities for processing
            </summary>
            <param name="condition"></param>
            <param name="thenActivityCallback"></param>
            <param name="elseActivityCallback"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ExceptionActivityBinder`3.IfElseAsync(MassTransit.StateMachineAsyncExceptionCondition{`0,`1,`2},System.Func{MassTransit.ExceptionActivityBinder{`0,`1,`2},MassTransit.ExceptionActivityBinder{`0,`1,`2}},System.Func{MassTransit.ExceptionActivityBinder{`0,`1,`2},MassTransit.ExceptionActivityBinder{`0,`1,`2}})">
            <summary>
            Create a conditional branch of activities for processing
            </summary>
            <param name="condition"></param>
            <param name="thenActivityCallback"></param>
            <param name="elseActivityCallback"></param>
            <returns></returns>
        </member>
        <member name="P:MassTransit.IMissingInstanceRedeliveryConfigurator.UseMessageScheduler">
            <summary>
            Use the message scheduler context instead of the redelivery context (only use when transport-level redelivery is not available)
            </summary>
        </member>
        <member name="M:MassTransit.IStateMachineActivitySelector`2.OfType``1">
            <summary>
            An activity which accepts the instance and data from the event
            </summary>
            <typeparam name="TActivity"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IStateMachineActivitySelector`2.OfInstanceType``1">
            <summary>
            An activity that only accepts the instance, and does not require the event data
            </summary>
            <typeparam name="TActivity"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IStateMachineActivitySelector`1.OfType``1">
            <summary>
            An activity which accepts the instance and data from the event
            </summary>
            <typeparam name="TActivity"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IStateMachineFaultedActivitySelector`3.OfType``1">
            <summary>
            An activity which accepts the instance and data from the event
            </summary>
            <typeparam name="TActivity"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IStateMachineFaultedActivitySelector`3.OfInstanceType``1">
            <summary>
            An activity that only accepts the instance, and does not require the event data
            </summary>
            <typeparam name="TActivity"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IStateMachineFaultedActivitySelector`2.OfType``1">
            <summary>
            An activity which accepts the instance and data from the event
            </summary>
            <typeparam name="TActivity"></typeparam>
            <returns></returns>
        </member>
        <member name="T:MassTransit.MassTransitStateMachine`1">
            <summary>
            A MassTransit state machine adds functionality on top of Automatonymous supporting
            things like request/response, and correlating events to the state machine, as well
            as retry and policy configuration.
            </summary>
            <typeparam name="TInstance">The state instance type</typeparam>
        </member>
        <member name="M:MassTransit.MassTransitStateMachine`1.InstanceState(System.Linq.Expressions.Expression{System.Func{`0,MassTransit.State}})">
            <summary>
            Declares what property holds the TInstance's state on the current instance of the state machine
            </summary>
            <param name="instanceStateProperty"></param>
            <remarks>
            Setting the state accessor more than once will cause the property managed by the state machine to change each time.
            Please note, the state machine can only manage one property at a given time per instance,
            and the best practice is to manage one property per machine.
            </remarks>
        </member>
        <member name="M:MassTransit.MassTransitStateMachine`1.InstanceState(System.Linq.Expressions.Expression{System.Func{`0,System.String}})">
            <summary>
            Declares the property to hold the instance's state as a string (the state name is stored in the property)
            </summary>
            <param name="instanceStateProperty"></param>
        </member>
        <member name="M:MassTransit.MassTransitStateMachine`1.InstanceState(System.Linq.Expressions.Expression{System.Func{`0,System.Int32}},MassTransit.State[])">
            <summary>
            Declares the property to hold the instance's state as an int (0 - none, 1 = initial, 2 = final, 3... the rest)
            </summary>
            <param name="instanceStateProperty"></param>
            <param name="states">Specifies the states, in order, to which the int values should be assigned</param>
        </member>
        <member name="M:MassTransit.MassTransitStateMachine`1.Name(System.String)">
            <summary>
            Specifies the name of the state machine
            </summary>
            <param name="machineName"></param>
        </member>
        <member name="M:MassTransit.MassTransitStateMachine`1.Event(System.Linq.Expressions.Expression{System.Func{MassTransit.Event}})">
            <summary>
            Declares an event, and initializes the event property
            </summary>
            <param name="propertyExpression"></param>
        </member>
        <member name="M:MassTransit.MassTransitStateMachine`1.SetCompleted(System.Func{`0,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Sets the method used to determine if a state machine instance has completed. The saga repository removes completed state machine instances.
            </summary>
            <param name="completed"></param>
        </member>
        <member name="M:MassTransit.MassTransitStateMachine`1.SetCompletedWhenFinalized">
            <summary>
            Sets the state machine instance to Completed when in the final state. The saga repository removes completed state machine instances.
            </summary>
        </member>
        <member name="M:MassTransit.MassTransitStateMachine`1.Event``1(System.Linq.Expressions.Expression{System.Func{MassTransit.Event{``0}}},System.Action{MassTransit.IEventCorrelationConfigurator{`0,``0}})">
            <summary>
            Declares an Event on the state machine with the specified data type, and allows the correlation of the event
            to be configured.
            </summary>
            <typeparam name="T">The event data type</typeparam>
            <param name="propertyExpression">The event property</param>
            <param name="configureEventCorrelation">Configuration callback for the event</param>
        </member>
        <member name="M:MassTransit.MassTransitStateMachine`1.Event``2(System.Linq.Expressions.Expression{System.Func{``0}},System.Linq.Expressions.Expression{System.Func{``0,MassTransit.Event{``1}}},System.Action{MassTransit.IEventCorrelationConfigurator{`0,``1}})">
            <summary>
            Declares an Event on the state machine with the specified data type, and allows the correlation of the event
            to be configured.
            </summary>
            <typeparam name="T">The event data type</typeparam>
            <typeparam name="TProperty">The property type</typeparam>
            <param name="propertyExpression">The containing property</param>
            <param name="eventPropertyExpression">The event property expression</param>
            <param name="configureEventCorrelation">Configuration callback for the event</param>
        </member>
        <member name="M:MassTransit.MassTransitStateMachine`1.Event``2(System.Linq.Expressions.Expression{System.Func{``0}},System.Linq.Expressions.Expression{System.Func{``0,MassTransit.Event{``1}}})">
            <summary>
            Declares a data event on a property of the state machine, and initializes the property
            </summary>
            <param name="propertyExpression">The property</param>
            <param name="eventPropertyExpression">The event property on the property</param>
        </member>
        <member name="M:MassTransit.MassTransitStateMachine`1.Event``1(System.Linq.Expressions.Expression{System.Func{MassTransit.Event{``0}}})">
            <summary>
            Declares an event on the state machine with the specified data type, where the data type contains the
            CorrelatedBy(Guid) interface. The correlation by CorrelationId is automatically configured to the saga
            instance.
            </summary>
            <typeparam name="T">The event data type</typeparam>
            <param name="propertyExpression">The property to initialize</param>
        </member>
        <member name="M:MassTransit.MassTransitStateMachine`1.Event``1(System.String)">
            <summary>
            Declares an Event on the state machine with the specified data type, and allows the correlation of the event
            to be configured.
            </summary>
            <typeparam name="T">The event data type</typeparam>
            <param name="name">The event name (must be unique)</param>
        </member>
        <member name="M:MassTransit.MassTransitStateMachine`1.Event``1(System.String,System.Action{MassTransit.IEventCorrelationConfigurator{`0,``0}})">
            <summary>
            Declares an Event on the state machine with the specified data type, and allows the correlation of the event
            to be configured.
            </summary>
            <typeparam name="T">The event data type</typeparam>
            <param name="name">The event name (must be unique)</param>
            <param name="configure">Configuration callback method</param>
        </member>
        <member name="M:MassTransit.MassTransitStateMachine`1.CompositeEvent(System.Linq.Expressions.Expression{System.Func{MassTransit.Event}},System.Linq.Expressions.Expression{System.Func{`0,MassTransit.CompositeEventStatus}},MassTransit.Event[])">
            <summary>
            Adds a composite event to the state machine. A composite event is triggered when all
            off the required events have been raised. Note that required events cannot be in the initial
            state since it would cause extra instances of the state machine to be created
            </summary>
            <param name="propertyExpression">The composite event</param>
            <param name="trackingPropertyExpression">The property in the instance used to track the state of the composite event</param>
            <param name="events">The events that must be raised before the composite event is raised</param>
        </member>
        <member name="M:MassTransit.MassTransitStateMachine`1.CompositeEvent(System.Linq.Expressions.Expression{System.Func{MassTransit.Event}},System.Linq.Expressions.Expression{System.Func{`0,MassTransit.CompositeEventStatus}},MassTransit.CompositeEventOptions,MassTransit.Event[])">
            <summary>
            Adds a composite event to the state machine. A composite event is triggered when all
            off the required events have been raised. Note that required events cannot be in the initial
            state since it would cause extra instances of the state machine to be created
            </summary>
            <param name="propertyExpression">The composite event</param>
            <param name="trackingPropertyExpression">The property in the instance used to track the state of the composite event</param>
            <param name="options">Options on the composite event</param>
            <param name="events">The events that must be raised before the composite event is raised</param>
        </member>
        <member name="M:MassTransit.MassTransitStateMachine`1.CompositeEvent(System.Linq.Expressions.Expression{System.Func{MassTransit.Event}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}},MassTransit.Event[])">
            <summary>
            Adds a composite event to the state machine. A composite event is triggered when all
            off the required events have been raised. Note that required events cannot be in the initial
            state since it would cause extra instances of the state machine to be created
            </summary>
            <param name="propertyExpression">The composite event</param>
            <param name="trackingPropertyExpression">The property in the instance used to track the state of the composite event</param>
            <param name="events">The events that must be raised before the composite event is raised</param>
        </member>
        <member name="M:MassTransit.MassTransitStateMachine`1.CompositeEvent(System.Linq.Expressions.Expression{System.Func{MassTransit.Event}},System.Linq.Expressions.Expression{System.Func{`0,System.Int32}},MassTransit.CompositeEventOptions,MassTransit.Event[])">
            <summary>
            Adds a composite event to the state machine. A composite event is triggered when all
            off the required events have been raised. Note that required events cannot be in the initial
            state since it would cause extra instances of the state machine to be created
            </summary>
            <param name="propertyExpression">The composite event</param>
            <param name="trackingPropertyExpression">The property in the instance used to track the state of the composite event</param>
            <param name="options">Options on the composite event</param>
            <param name="events">The events that must be raised before the composite event is raised</param>
        </member>
        <member name="M:MassTransit.MassTransitStateMachine`1.State(System.Linq.Expressions.Expression{System.Func{MassTransit.State}})">
            <summary>
            Declares a state on the state machine, and initialized the property
            </summary>
            <param name="propertyExpression">The state property</param>
        </member>
        <member name="M:MassTransit.MassTransitStateMachine`1.State``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Linq.Expressions.Expression{System.Func{``0,MassTransit.State}})">
            <summary>
            Declares a state on the state machine, and initialized the property
            </summary>
            <param name="propertyExpression">The property containing the state</param>
            <param name="statePropertyExpression">The state property</param>
        </member>
        <member name="M:MassTransit.MassTransitStateMachine`1.SubState(System.Linq.Expressions.Expression{System.Func{MassTransit.State}},MassTransit.State)">
            <summary>
            Declares a sub-state on the machine. A sub-state is a state that is valid within a super-state,
            allowing a state machine to have multiple "states" -- nested parts of an overall state.
            </summary>
            <param name="propertyExpression">The state property expression</param>
            <param name="superState">The superstate of which this state is a substate</param>
        </member>
        <member name="M:MassTransit.MassTransitStateMachine`1.SubState``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Linq.Expressions.Expression{System.Func{``0,MassTransit.State}},MassTransit.State)">
            <summary>
            Declares a state on the state machine, and initialized the property
            </summary>
            <param name="propertyExpression">The property containing the state</param>
            <param name="statePropertyExpression">The state property</param>
            <param name="superState">The superstate of which this state is a substate</param>
        </member>
        <member name="M:MassTransit.MassTransitStateMachine`1.SetState(System.String,MassTransit.SagaStateMachine.StateMachineState{`0})">
            <summary>
            Adds the state, and state transition events, to the cache
            </summary>
            <param name="name"></param>
            <param name="state"></param>
        </member>
        <member name="M:MassTransit.MassTransitStateMachine`1.During(MassTransit.State,MassTransit.EventActivities{`0}[])">
            <summary>
            Declares the events and associated activities that are handled during the specified state
            </summary>
            <param name="state">The state</param>
            <param name="activities">The event and activities</param>
        </member>
        <member name="M:MassTransit.MassTransitStateMachine`1.During(MassTransit.State,MassTransit.State,MassTransit.EventActivities{`0}[])">
            <summary>
            Declares the events and associated activities that are handled during the specified states
            </summary>
            <param name="state1">The state</param>
            <param name="state2">The other state</param>
            <param name="activities">The event and activities</param>
        </member>
        <member name="M:MassTransit.MassTransitStateMachine`1.During(MassTransit.State,MassTransit.State,MassTransit.State,MassTransit.EventActivities{`0}[])">
            <summary>
            Declares the events and associated activities that are handled during the specified states
            </summary>
            <param name="state1">The state</param>
            <param name="state2">The other state</param>
            <param name="state3">The other other state</param>
            <param name="activities">The event and activities</param>
        </member>
        <member name="M:MassTransit.MassTransitStateMachine`1.During(MassTransit.State,MassTransit.State,MassTransit.State,MassTransit.State,MassTransit.EventActivities{`0}[])">
            <summary>
            Declares the events and associated activities that are handled during the specified states
            </summary>
            <param name="state1">The state</param>
            <param name="state2">The other state</param>
            <param name="state3">The other other state</param>
            <param name="state4">Okay, this is getting a bit ridiculous at this point</param>
            <param name="activities">The event and activities</param>
        </member>
        <member name="M:MassTransit.MassTransitStateMachine`1.During(System.Collections.Generic.IEnumerable{MassTransit.State},MassTransit.EventActivities{`0}[])">
            <summary>
            Declares the events and associated activities that are handled during the specified states
            </summary>
            <param name="states">The states</param>
            <param name="activities">The event and activities</param>
        </member>
        <member name="M:MassTransit.MassTransitStateMachine`1.Initially(MassTransit.EventActivities{`0}[])">
            <summary>
            Declares the events and activities that are handled during the initial state
            </summary>
            <param name="activities">The event and activities</param>
        </member>
        <member name="M:MassTransit.MassTransitStateMachine`1.DuringAny(MassTransit.EventActivities{`0}[])">
            <summary>
            Declares events and activities that are handled during any state except the Initial and Final
            </summary>
            <param name="activities">The event and activities</param>
        </member>
        <member name="M:MassTransit.MassTransitStateMachine`1.Finally(System.Func{MassTransit.EventActivityBinder{`0},MassTransit.EventActivityBinder{`0}})">
            <summary>
            When the Final state is entered, execute the chained activities. This occurs in any state that is not the initial or final state
            </summary>
            <param name="activityCallback">Specify the activities that are executes when the Final state is entered.</param>
        </member>
        <member name="M:MassTransit.MassTransitStateMachine`1.When(MassTransit.Event)">
            <summary>
            When the event is fired in this state, execute the chained activities
            </summary>
            <param name="event">The fired event</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.MassTransitStateMachine`1.When(MassTransit.Event,MassTransit.StateMachineCondition{`0})">
            <summary>
            When the event is fired in this state, and the event data matches the filter expression, execute the chained activities
            </summary>
            <param name="event">The fired event</param>
            <param name="filter">The filter applied to the event</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.MassTransitStateMachine`1.WhenEnter(MassTransit.State,System.Func{MassTransit.EventActivityBinder{`0},MassTransit.EventActivityBinder{`0}})">
            <summary>
            When entering the specified state
            </summary>
            <param name="state"></param>
            <param name="activityCallback"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.MassTransitStateMachine`1.WhenEnterAny(System.Func{MassTransit.EventActivityBinder{`0},MassTransit.EventActivityBinder{`0}})">
            <summary>
            When entering any state
            </summary>
            <param name="activityCallback"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.MassTransitStateMachine`1.WhenLeaveAny(System.Func{MassTransit.EventActivityBinder{`0},MassTransit.EventActivityBinder{`0}})">
            <summary>
            When leaving any state
            </summary>
            <param name="activityCallback"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.MassTransitStateMachine`1.BeforeEnterAny(System.Func{MassTransit.EventActivityBinder{`0,MassTransit.State},MassTransit.EventActivityBinder{`0,MassTransit.State}})">
            <summary>
            Before entering any state
            </summary>
            <param name="activityCallback"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.MassTransitStateMachine`1.AfterLeaveAny(System.Func{MassTransit.EventActivityBinder{`0,MassTransit.State},MassTransit.EventActivityBinder{`0,MassTransit.State}})">
            <summary>
            After leaving any state
            </summary>
            <param name="activityCallback"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.MassTransitStateMachine`1.WhenLeave(MassTransit.State,System.Func{MassTransit.EventActivityBinder{`0},MassTransit.EventActivityBinder{`0}})">
            <summary>
            When leaving the specified state
            </summary>
            <param name="state"></param>
            <param name="activityCallback"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.MassTransitStateMachine`1.BeforeEnter(MassTransit.State,System.Func{MassTransit.EventActivityBinder{`0,MassTransit.State},MassTransit.EventActivityBinder{`0,MassTransit.State}})">
            <summary>
            Before entering the specified state
            </summary>
            <param name="state"></param>
            <param name="activityCallback"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.MassTransitStateMachine`1.AfterLeave(MassTransit.State,System.Func{MassTransit.EventActivityBinder{`0,MassTransit.State},MassTransit.EventActivityBinder{`0,MassTransit.State}})">
            <summary>
            After leaving the specified state
            </summary>
            <param name="state"></param>
            <param name="activityCallback"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.MassTransitStateMachine`1.When``1(MassTransit.Event{``0})">
            <summary>
            When the event is fired in this state, execute the chained activities
            </summary>
            <typeparam name="TMessage">The event data type</typeparam>
            <param name="event">The fired event</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.MassTransitStateMachine`1.When``1(MassTransit.Event{``0},MassTransit.StateMachineCondition{`0,``0})">
            <summary>
            When the event is fired in this state, and the event data matches the filter expression, execute the chained activities
            </summary>
            <typeparam name="TMessage">The event data type</typeparam>
            <param name="event">The fired event</param>
            <param name="filter">The filter applied to the event</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.MassTransitStateMachine`1.Ignore(MassTransit.Event)">
            <summary>
            Ignore the event in this state (no exception is thrown)
            </summary>
            <param name="event">The ignored event</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.MassTransitStateMachine`1.Ignore``1(MassTransit.Event{``0})">
            <summary>
            Ignore the event in this state (no exception is thrown)
            </summary>
            <typeparam name="TData">The event data type</typeparam>
            <param name="event">The ignored event</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.MassTransitStateMachine`1.Ignore``1(MassTransit.Event{``0},MassTransit.StateMachineCondition{`0,``0})">
            <summary>
            Ignore the event in this state (no exception is thrown)
            </summary>
            <typeparam name="TData">The event data type</typeparam>
            <param name="event">The ignored event</param>
            <param name="filter">The filter to apply to the event data</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.MassTransitStateMachine`1.OnUnhandledEvent(MassTransit.UnhandledEventCallback{`0})">
            <summary>
            Specifies a callback to invoke when an event is raised in a state where the event is not handled
            </summary>
            <param name="callback">The unhandled event callback</param>
        </member>
        <member name="M:MassTransit.MassTransitStateMachine`1.Request``2(System.Linq.Expressions.Expression{System.Func{MassTransit.Request{`0,``0,``1}}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Guid}}},System.Action{MassTransit.IRequestConfigurator{`0,``0,``1}})">
            <summary>
            Declares a request that is sent by the state machine to a service, and the associated response, fault, and
            timeout handling. The property is initialized with the fully built Request. The request must be declared before
            it is used in the state/event declaration statements.
            </summary>
            <typeparam name="TRequest">The request type</typeparam>
            <typeparam name="TResponse">The response type</typeparam>
            <param name="propertyExpression">The request property on the state machine</param>
            <param name="requestIdExpression">The property where the requestId is stored</param>
            <param name="configureRequest">Allow the request settings to be specified inline</param>
        </member>
        <member name="M:MassTransit.MassTransitStateMachine`1.Request``2(System.Linq.Expressions.Expression{System.Func{MassTransit.Request{`0,``0,``1}}},System.Action{MassTransit.IRequestConfigurator{`0,``0,``1}})">
            <summary>
            Declares a request that is sent by the state machine to a service, and the associated response, fault, and
            timeout handling. The property is initialized with the fully built Request. The request must be declared before
            it is used in the state/event declaration statements.
            Uses the Saga CorrelationId as the RequestId
            </summary>
            <typeparam name="TRequest">The request type</typeparam>
            <typeparam name="TResponse">The response type</typeparam>
            <param name="propertyExpression">The request property on the state machine</param>
            <param name="configureRequest">Allow the request settings to be specified inline</param>
        </member>
        <member name="M:MassTransit.MassTransitStateMachine`1.Request``2(System.Linq.Expressions.Expression{System.Func{MassTransit.Request{`0,``0,``1}}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Guid}}},MassTransit.RequestSettings{`0,``0,``1})">
            <summary>
            Declares a request that is sent by the state machine to a service, and the associated response, fault, and
            timeout handling. The property is initialized with the fully built Request. The request must be declared before
            it is used in the state/event declaration statements.
            </summary>
            <typeparam name="TRequest">The request type</typeparam>
            <typeparam name="TResponse">The response type</typeparam>
            <param name="propertyExpression">The request property on the state machine</param>
            <param name="requestIdExpression">The property where the requestId is stored</param>
            <param name="settings">The request settings (which can be read from configuration, etc.)</param>
        </member>
        <member name="M:MassTransit.MassTransitStateMachine`1.Request``2(System.Linq.Expressions.Expression{System.Func{MassTransit.Request{`0,``0,``1}}},MassTransit.RequestSettings{`0,``0,``1})">
            <summary>
            Declares a request that is sent by the state machine to a service, and the associated response, fault, and
            timeout handling. The property is initialized with the fully built Request. The request must be declared before
            it is used in the state/event declaration statements.
            Uses the Saga CorrelationId as the RequestId
            </summary>
            <typeparam name="TRequest">The request type</typeparam>
            <typeparam name="TResponse">The response type</typeparam>
            <param name="propertyExpression">The request property on the state machine</param>
            <param name="settings">The request settings (which can be read from configuration, etc.)</param>
        </member>
        <member name="M:MassTransit.MassTransitStateMachine`1.Request``3(System.Linq.Expressions.Expression{System.Func{MassTransit.Request{`0,``0,``1,``2}}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Guid}}},System.Action{MassTransit.IRequestConfigurator{`0,``0,``1,``2}})">
            <summary>
            Declares a request that is sent by the state machine to a service, and the associated response, fault, and
            timeout handling. The property is initialized with the fully built Request. The request must be declared before
            it is used in the state/event declaration statements.
            </summary>
            <typeparam name="TRequest">The request type</typeparam>
            <typeparam name="TResponse">The response type</typeparam>
            <typeparam name="TResponse2">The alternate response type</typeparam>
            <param name="propertyExpression">The request property on the state machine</param>
            <param name="requestIdExpression">The property where the requestId is stored</param>
            <param name="configureRequest">Allow the request settings to be specified inline</param>
        </member>
        <member name="M:MassTransit.MassTransitStateMachine`1.Request``3(System.Linq.Expressions.Expression{System.Func{MassTransit.Request{`0,``0,``1,``2}}},System.Action{MassTransit.IRequestConfigurator{`0,``0,``1,``2}})">
            <summary>
            Declares a request that is sent by the state machine to a service, and the associated response, fault, and
            timeout handling. The property is initialized with the fully built Request. The request must be declared before
            it is used in the state/event declaration statements.
            Uses the Saga CorrelationId as the RequestId
            </summary>
            <typeparam name="TRequest">The request type</typeparam>
            <typeparam name="TResponse">The response type</typeparam>
            <typeparam name="TResponse2">The alternate response type</typeparam>
            <param name="propertyExpression">The request property on the state machine</param>
            <param name="configureRequest">Allow the request settings to be specified inline</param>
        </member>
        <member name="M:MassTransit.MassTransitStateMachine`1.Request``3(System.Linq.Expressions.Expression{System.Func{MassTransit.Request{`0,``0,``1,``2}}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Guid}}},MassTransit.RequestSettings{`0,``0,``1,``2})">
            <summary>
            Declares a request that is sent by the state machine to a service, and the associated response, fault, and
            timeout handling. The property is initialized with the fully built Request. The request must be declared before
            it is used in the state/event declaration statements.
            </summary>
            <typeparam name="TRequest">The request type</typeparam>
            <typeparam name="TResponse">The response type</typeparam>
            <typeparam name="TResponse2">The alternate response type</typeparam>
            <param name="propertyExpression">The request property on the state machine</param>
            <param name="requestIdExpression">The property where the requestId is stored</param>
            <param name="settings">The request settings (which can be read from configuration, etc.)</param>
        </member>
        <member name="M:MassTransit.MassTransitStateMachine`1.Request``3(System.Linq.Expressions.Expression{System.Func{MassTransit.Request{`0,``0,``1,``2}}},MassTransit.RequestSettings{`0,``0,``1,``2})">
            <summary>
            Declares a request that is sent by the state machine to a service, and the associated response, fault, and
            timeout handling. The property is initialized with the fully built Request. The request must be declared before
            it is used in the state/event declaration statements.
            Uses the Saga CorrelationId as the RequestId
            </summary>
            <typeparam name="TRequest">The request type</typeparam>
            <typeparam name="TResponse">The response type</typeparam>
            <typeparam name="TResponse2">The alternate response type</typeparam>
            <param name="propertyExpression">The request property on the state machine</param>
            <param name="settings">The request settings (which can be read from configuration, etc.)</param>
        </member>
        <member name="M:MassTransit.MassTransitStateMachine`1.Request``4(System.Linq.Expressions.Expression{System.Func{MassTransit.Request{`0,``0,``1,``2,``3}}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Guid}}},System.Action{MassTransit.IRequestConfigurator{`0,``0,``1,``2,``3}})">
            <summary>
            Declares a request that is sent by the state machine to a service, and the associated response, fault, and
            timeout handling. The property is initialized with the fully built Request. The request must be declared before
            it is used in the state/event declaration statements.
            </summary>
            <typeparam name="TRequest">The request type</typeparam>
            <typeparam name="TResponse">The response type</typeparam>
            <typeparam name="TResponse2">The alternate response type</typeparam>
            <typeparam name="TResponse3"></typeparam>
            <param name="propertyExpression">The request property on the state machine</param>
            <param name="requestIdExpression">The property where the requestId is stored</param>
            <param name="configureRequest">Allow the request settings to be specified inline</param>
        </member>
        <member name="M:MassTransit.MassTransitStateMachine`1.Request``4(System.Linq.Expressions.Expression{System.Func{MassTransit.Request{`0,``0,``1,``2,``3}}},System.Action{MassTransit.IRequestConfigurator{`0,``0,``1,``2,``3}})">
            <summary>
            Declares a request that is sent by the state machine to a service, and the associated response, fault, and
            timeout handling. The property is initialized with the fully built Request. The request must be declared before
            it is used in the state/event declaration statements.
            Uses the Saga CorrelationId as the RequestId
            </summary>
            <typeparam name="TRequest">The request type</typeparam>
            <typeparam name="TResponse">The response type</typeparam>
            <typeparam name="TResponse2">The alternate response type</typeparam>
            <typeparam name="TResponse3"></typeparam>
            <param name="propertyExpression">The request property on the state machine</param>
            <param name="configureRequest">Allow the request settings to be specified inline</param>
        </member>
        <member name="M:MassTransit.MassTransitStateMachine`1.Request``4(System.Linq.Expressions.Expression{System.Func{MassTransit.Request{`0,``0,``1,``2,``3}}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Guid}}},MassTransit.RequestSettings{`0,``0,``1,``2,``3})">
            <summary>
            Declares a request that is sent by the state machine to a service, and the associated response, fault, and
            timeout handling. The property is initialized with the fully built Request. The request must be declared before
            it is used in the state/event declaration statements.
            </summary>
            <typeparam name="TRequest">The request type</typeparam>
            <typeparam name="TResponse">The response type</typeparam>
            <typeparam name="TResponse2">The alternate response type</typeparam>
            <typeparam name="TResponse3"></typeparam>
            <param name="propertyExpression">The request property on the state machine</param>
            <param name="requestIdExpression">The property where the requestId is stored</param>
            <param name="settings">The request settings (which can be read from configuration, etc.)</param>
        </member>
        <member name="M:MassTransit.MassTransitStateMachine`1.Request``4(System.Linq.Expressions.Expression{System.Func{MassTransit.Request{`0,``0,``1,``2,``3}}},MassTransit.RequestSettings{`0,``0,``1,``2,``3})">
            <summary>
            Declares a request that is sent by the state machine to a service, and the associated response, fault, and
            timeout handling. The property is initialized with the fully built Request. The request must be declared before
            it is used in the state/event declaration statements.
            Uses the Saga CorrelationId as the RequestId
            </summary>
            <typeparam name="TRequest">The request type</typeparam>
            <typeparam name="TResponse">The response type</typeparam>
            <typeparam name="TResponse2">The alternate response type</typeparam>
            <typeparam name="TResponse3"></typeparam>
            <param name="propertyExpression">The request property on the state machine</param>
            <param name="settings">The request settings (which can be read from configuration, etc.)</param>
        </member>
        <member name="M:MassTransit.MassTransitStateMachine`1.Schedule``1(System.Linq.Expressions.Expression{System.Func{MassTransit.Schedule{`0,``0}}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Guid}}},System.Action{MassTransit.IScheduleConfigurator{`0,``0}})">
            <summary>
            Declares a schedule placeholder that is stored with the state machine instance
            </summary>
            <typeparam name="TMessage">The request type</typeparam>
            <param name="propertyExpression">The schedule property on the state machine</param>
            <param name="tokenIdExpression">The property where the tokenId is stored</param>
            <param name="configureSchedule">The callback to configure the schedule</param>
        </member>
        <member name="M:MassTransit.MassTransitStateMachine`1.Schedule``1(System.Linq.Expressions.Expression{System.Func{MassTransit.Schedule{`0,``0}}},System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Guid}}},MassTransit.ScheduleSettings{`0,``0})">
            <summary>
            Declares a schedule placeholder that is stored with the state machine instance
            </summary>
            <typeparam name="TMessage">The scheduled message type</typeparam>
            <param name="propertyExpression">The schedule property on the state machine</param>
            <param name="tokenIdExpression">The property where the tokenId is stored</param>
            <param name="settings">The request settings (which can be read from configuration, etc.)</param>
        </member>
        <member name="M:MassTransit.MassTransitStateMachine`1.RegisterImplicit">
            <summary>
            Register all remaining events and states that have not been explicitly declared.
            </summary>
        </member>
        <member name="M:MassTransit.MassTransitStateMachine`1.New(System.Action{MassTransit.IStateMachineModifier{`0}})">
            <summary>
            Create a new state machine using the builder pattern
            </summary>
            <param name="modifier"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.MissingInstanceRedeliveryExtensions.Redeliver``2(MassTransit.IMissingInstanceConfigurator{``0,``1},System.Action{MassTransit.IMissingInstanceRedeliveryConfigurator{``0,``1}})">
            <summary>
            Redeliver uses the message scheduler to deliver the message to the queue at a future
            time. The delivery count is incremented.
            A message scheduler must be configured on the bus for redelivery to be enabled.
            </summary>
            <typeparam name="TInstance">The instance type</typeparam>
            <typeparam name="TData">The event data type</typeparam>
            <param name="configurator">The consume context of the message</param>
            <param name="configure">Configure the retry policy for the message redelivery</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.RequestEventExtensions.RequestStarted``2(MassTransit.EventActivityBinder{``0,``1})">
            <summary>
            Publishes the <see cref="T:MassTransit.Contracts.RequestStarted" /> event, used by the request state machine to track
            pending requests for a saga instance.
            </summary>
            <param name="source"></param>
            <typeparam name="TInstance"></typeparam>
            <typeparam name="TData"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.RequestEventExtensions.RequestCompleted``2(MassTransit.EventActivityBinder{``0,``1})">
            <summary>
            Publishes the <see cref="T:MassTransit.Contracts.RequestCompleted" /> event, used by the request state machine to complete pending
            requests. The response type of the inbound request must be the same as the <typeparamref name="TData" /> type.
            </summary>
            <param name="source"></param>
            <typeparam name="TInstance"></typeparam>
            <typeparam name="TData"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.RequestEventExtensions.RequestCompleted``3(MassTransit.EventActivityBinder{``0,``1},MassTransit.AsyncEventMessageFactory{``0,``1,``2})">
            <summary>
            Publishes the <see cref="T:MassTransit.Contracts.RequestCompleted" /> event, used by the request state machine to complete pending
            requests.
            </summary>
            <param name="source"></param>
            <param name="messageFactory"></param>
            <typeparam name="TInstance"></typeparam>
            <typeparam name="TData"></typeparam>
            <typeparam name="TResponse"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.RequestEventExtensions.RequestFaulted``3(MassTransit.EventActivityBinder{``0,``1},MassTransit.Event{``2})">
            <summary>
            Publishes the <see cref="T:MassTransit.Contracts.RequestFaulted" /> event, used by the request state machine to fault pending requests
            </summary>
            <param name="source"></param>
            <param name="requestEvent"></param>
            <typeparam name="TInstance"></typeparam>
            <typeparam name="TData"></typeparam>
            <typeparam name="TRequest"></typeparam>
            <returns></returns>
        </member>
        <member name="T:MassTransit.SagaStateMachine.DefaultInstanceStateAccessor`1">
            <summary>
            The default state accessor will attempt to find and use a single State property on the
            instance type. If no State property is found, or more than one is found, an exception
            will be thrown
            </summary>
        </member>
        <member name="T:MassTransit.SagaStateMachine.IntStateAccessor`1">
            <summary>
            Accesses the current state as a string property
            </summary>
            <typeparam name="TSaga">The instance type</typeparam>
        </member>
        <member name="T:MassTransit.SagaStateMachine.StringStateAccessor`1">
            <summary>
            Accesses the current state as a string property
            </summary>
            <typeparam name="TSaga">The instance type</typeparam>
        </member>
        <member name="T:MassTransit.SagaStateMachine.CatchFaultActivity`2">
            <summary>
            Catches an exception of a specific type and compensates using the behavior
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TException"></typeparam>
        </member>
        <member name="T:MassTransit.SagaStateMachine.RequestActivityImpl`3.SendRequestPipe">
            <summary>
            Handles the sending of a request to the endpoint specified
            </summary>
        </member>
        <member name="T:MassTransit.SagaStateMachine.RequestCompletedActivity`2">
            <summary>
            Publishes the <see cref="T:MassTransit.Contracts.RequestCompleted" /> event, used by the request state machine to track
            pending requests for a saga instance.
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.SagaStateMachine.RequestCompletedActivity`3">
            <summary>
            Publishes the <see cref="T:MassTransit.Contracts.RequestCompleted" /> event, used by the request state machine to track
            pending requests for a saga instance.
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="TResponse"></typeparam>
        </member>
        <member name="T:MassTransit.SagaStateMachine.RequestFaultedActivity`3">
            <summary>
            Publishes the <see cref="T:MassTransit.Contracts.RequestCompleted" /> event, used by the request state machine to track
            pending requests for a saga instance.
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="TRequest"></typeparam>
        </member>
        <member name="T:MassTransit.SagaStateMachine.RequestStartedActivity`2">
            <summary>
            Publishes the <see cref="T:MassTransit.Contracts.RequestStarted" /> event, used by the request state machine to track
            pending requests for a saga instance.
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.SagaStateMachine.SlimActivity`2">
            <summary>
            Adapts an Activity to a Data Activity context
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.SagaStateMachine.Behavior">
            <summary>
            A behavior is invoked by a state when an event is raised on the instance and embodies
            the activities that are executed in response to the event.
            </summary>
        </member>
        <member name="M:MassTransit.SagaStateMachine.Behavior.Empty``1">
            <summary>
            Returns an empty pipe of the specified context type
            </summary>
            <typeparam name="TSaga">The context type</typeparam>
            <returns></returns>
        </member>
        <member name="T:MassTransit.SagaStateMachine.DataBehavior`2">
            <summary>
            Splits apart the data from the behavior so it can be invoked properly.
            </summary>
            <typeparam name="TSaga">The instance type</typeparam>
            <typeparam name="TMessage">The event data type</typeparam>
        </member>
        <member name="T:MassTransit.SagaStateMachine.LastBehavior`1">
            <summary>
            The last behavior either completes the last activity in the behavior or
            throws the exception if a compensation is in progress
            </summary>
            <typeparam name="TSaga"></typeparam>
        </member>
        <member name="T:MassTransit.SagaStateMachine.LastCatchBehavior`1">
            <summary>
            In a catch, after the last activity, the fault is completed as handled. An activity should throw the
            exception if desired.
            </summary>
            <typeparam name="TSaga"></typeparam>
        </member>
        <member name="T:MassTransit.SagaStateMachine.CatchActivityBinder`2">
            <summary>
            Creates a compensation activity with the compensation behavior
            </summary>
            <typeparam name="TInstance"></typeparam>
            <typeparam name="TException"></typeparam>
        </member>
        <member name="T:MassTransit.SagaStateMachine.ExecuteActivityBinder`1">
            <summary>
            Routes event activities to an activities
            </summary>
            <typeparam name="TInstance"></typeparam>
        </member>
        <member name="M:MassTransit.SagaStateMachine.IActivityBinder`1.IsStateTransitionEvent(MassTransit.State)">
            <summary>
            Returns True if the event is a state transition event (enter/leave/afterLeave/beforeEnter)
            for the specified state.
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.SagaStateMachine.IActivityBinder`1.Bind(MassTransit.State{`0})">
            <summary>
            Binds the activity to the state, may also just ignore the event if it's an ignore event
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:MassTransit.SagaStateMachine.IActivityBinder`1.Bind(MassTransit.SagaStateMachine.IBehaviorBuilder{`0})">
            <summary>
            Bind the activities to the builder
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:MassTransit.ScheduleTimeSpanExtensions.Unschedule``2(MassTransit.EventActivityBinder{``0,``1},MassTransit.Schedule{``0})">
            <summary>
            Unschedule a message, if the message was scheduled.
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TData"></typeparam>
            <param name="source"></param>
            <param name="schedule"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ScheduleTimeSpanExtensions.Unschedule``3(MassTransit.ExceptionActivityBinder{``0,``1,``2},MassTransit.Schedule{``0})">
            <summary>
            Unschedule a message, if the message was scheduled.
            </summary>
            <param name="source"></param>
            <param name="schedule"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ScheduleTimeSpanExtensions.Unschedule``1(MassTransit.EventActivityBinder{``0},MassTransit.Schedule{``0})">
            <summary>
            Unschedule a message, if the message was scheduled.
            </summary>
            <typeparam name="TSaga"></typeparam>
            <param name="source"></param>
            <param name="schedule"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ScheduleTimeSpanExtensions.Unschedule``2(MassTransit.ExceptionActivityBinder{``0,``1},MassTransit.Schedule{``0})">
            <summary>
            Unschedule a message, if the message was scheduled.
            </summary>
            <param name="source"></param>
            <param name="schedule"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.StateMachineExtensions.TransitionToState``1(MassTransit.BehaviorContext{``0},MassTransit.State)">
            <summary>
            Transition a state machine instance to a specific state, producing any events related
            to the transaction such as leaving the previous state and entering the target state
            </summary>
            <typeparam name="TSaga">The state instance type</typeparam>
            <param name="context"></param>
            <param name="state">The target state</param>
        </member>
        <member name="M:MassTransit.StateMachineRequestExtensions.Request``4(MassTransit.EventActivityBinder{``0,``1},MassTransit.Request{``0,``2,``3},MassTransit.EventMessageFactory{``0,``1,``2})">
            <summary>
            Send a request to the configured service endpoint, and setup the state machine to accept the response.
            </summary>
            <typeparam name="TInstance">The state instance type</typeparam>
            <typeparam name="TData">The event data type</typeparam>
            <typeparam name="TRequest">The request message type</typeparam>
            <typeparam name="TResponse">The response message type</typeparam>
            <param name="binder">The event binder</param>
            <param name="request">The configured request to use</param>
            <param name="messageFactory">The request message factory</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.StateMachineRequestExtensions.Request``4(MassTransit.EventActivityBinder{``0,``1},MassTransit.Request{``0,``2,``3},MassTransit.AsyncEventMessageFactory{``0,``1,``2})">
            <summary>
            Send a request to the configured service endpoint, and setup the state machine to accept the response.
            </summary>
            <typeparam name="TInstance">The state instance type</typeparam>
            <typeparam name="TData">The event data type</typeparam>
            <typeparam name="TRequest">The request message type</typeparam>
            <typeparam name="TResponse">The response message type</typeparam>
            <param name="binder">The event binder</param>
            <param name="request">The configured request to use</param>
            <param name="messageFactory">The request message factory</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.StateMachineRequestExtensions.Request``4(MassTransit.EventActivityBinder{``0,``1},MassTransit.Request{``0,``2,``3},System.Func{MassTransit.BehaviorContext{``0,``1},System.Threading.Tasks.Task{MassTransit.SendTuple{``2}}})">
            <summary>
            Send a request to the configured service endpoint, and setup the state machine to accept the response.
            </summary>
            <typeparam name="TInstance">The state instance type</typeparam>
            <typeparam name="TData">The event data type</typeparam>
            <typeparam name="TRequest">The request message type</typeparam>
            <typeparam name="TResponse">The response message type</typeparam>
            <param name="binder">The event binder</param>
            <param name="request">The configured request to use</param>
            <param name="messageFactory">The request message factory</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.StateMachineRequestExtensions.Request``4(MassTransit.EventActivityBinder{``0,``1},MassTransit.Request{``0,``2,``3},MassTransit.ServiceAddressProvider{``0,``1},MassTransit.EventMessageFactory{``0,``1,``2})">
            <summary>
            Send a request to the configured service endpoint, and setup the state machine to accept the response.
            </summary>
            <typeparam name="TInstance">The state instance type</typeparam>
            <typeparam name="TData">The event data type</typeparam>
            <typeparam name="TRequest">The request message type</typeparam>
            <typeparam name="TResponse">The response message type</typeparam>
            <param name="binder">The event binder</param>
            <param name="request">The configured request to use</param>
            <param name="serviceAddressProvider">A provider for the address used for the request</param>
            <param name="messageFactory">The request message factory</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.StateMachineRequestExtensions.Request``4(MassTransit.EventActivityBinder{``0,``1},MassTransit.Request{``0,``2,``3},MassTransit.ServiceAddressProvider{``0,``1},MassTransit.AsyncEventMessageFactory{``0,``1,``2})">
            <summary>
            Send a request to the configured service endpoint, and setup the state machine to accept the response.
            </summary>
            <typeparam name="TInstance">The state instance type</typeparam>
            <typeparam name="TData">The event data type</typeparam>
            <typeparam name="TRequest">The request message type</typeparam>
            <typeparam name="TResponse">The response message type</typeparam>
            <param name="binder">The event binder</param>
            <param name="request">The configured request to use</param>
            <param name="serviceAddressProvider">A provider for the address used for the request</param>
            <param name="messageFactory">The request message factory</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.StateMachineRequestExtensions.Request``4(MassTransit.EventActivityBinder{``0,``1},MassTransit.Request{``0,``2,``3},MassTransit.ServiceAddressProvider{``0,``1},System.Func{MassTransit.BehaviorContext{``0,``1},System.Threading.Tasks.Task{MassTransit.SendTuple{``2}}})">
            <summary>
            Send a request to the configured service endpoint, and setup the state machine to accept the response.
            </summary>
            <typeparam name="TInstance">The state instance type</typeparam>
            <typeparam name="TData">The event data type</typeparam>
            <typeparam name="TRequest">The request message type</typeparam>
            <typeparam name="TResponse">The response message type</typeparam>
            <param name="binder">The event binder</param>
            <param name="request">The configured request to use</param>
            <param name="serviceAddressProvider">A provider for the address used for the request</param>
            <param name="messageFactory">The request message factory</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.StateMachineRequestExtensions.Request``4(MassTransit.ExceptionActivityBinder{``0,``1},MassTransit.Request{``0,``2,``3},MassTransit.EventExceptionMessageFactory{``0,``1,``2})">
            <summary>
            Send a request to the configured service endpoint, and setup the state machine to accept the response.
            </summary>
            <typeparam name="TInstance">The state instance type</typeparam>
            <typeparam name="TRequest">The request message type</typeparam>
            <typeparam name="TResponse">The response message type</typeparam>
            <typeparam name="TException"></typeparam>
            <param name="binder">The event binder</param>
            <param name="request">The configured request to use</param>
            <param name="messageFactory">The request message factory</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.StateMachineRequestExtensions.Request``4(MassTransit.ExceptionActivityBinder{``0,``1},MassTransit.Request{``0,``2,``3},MassTransit.AsyncEventExceptionMessageFactory{``0,``1,``2})">
            <summary>
            Send a request to the configured service endpoint, and setup the state machine to accept the response.
            </summary>
            <typeparam name="TInstance">The state instance type</typeparam>
            <typeparam name="TRequest">The request message type</typeparam>
            <typeparam name="TResponse">The response message type</typeparam>
            <typeparam name="TException"></typeparam>
            <param name="binder">The event binder</param>
            <param name="request">The configured request to use</param>
            <param name="messageFactory">The request message factory</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.StateMachineRequestExtensions.Request``4(MassTransit.ExceptionActivityBinder{``0,``1},MassTransit.Request{``0,``2,``3},System.Func{MassTransit.BehaviorExceptionContext{``0,``1},System.Threading.Tasks.Task{MassTransit.SendTuple{``2}}})">
            <summary>
            Send a request to the configured service endpoint, and setup the state machine to accept the response.
            </summary>
            <typeparam name="TInstance">The state instance type</typeparam>
            <typeparam name="TRequest">The request message type</typeparam>
            <typeparam name="TResponse">The response message type</typeparam>
            <typeparam name="TException"></typeparam>
            <param name="binder">The event binder</param>
            <param name="request">The configured request to use</param>
            <param name="messageFactory">The request message factory</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.StateMachineRequestExtensions.Request``4(MassTransit.ExceptionActivityBinder{``0,``1},MassTransit.Request{``0,``2,``3},MassTransit.ServiceAddressExceptionProvider{``0,``1},MassTransit.EventExceptionMessageFactory{``0,``1,``2})">
            <summary>
            Send a request to the configured service endpoint, and setup the state machine to accept the response.
            </summary>
            <typeparam name="TInstance">The state instance type</typeparam>
            <typeparam name="TRequest">The request message type</typeparam>
            <typeparam name="TResponse">The response message type</typeparam>
            <typeparam name="TException"></typeparam>
            <param name="binder">The event binder</param>
            <param name="request">The configured request to use</param>
            <param name="serviceAddressProvider"></param>
            <param name="messageFactory">The request message factory</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.StateMachineRequestExtensions.Request``4(MassTransit.ExceptionActivityBinder{``0,``1},MassTransit.Request{``0,``2,``3},MassTransit.ServiceAddressExceptionProvider{``0,``1},MassTransit.AsyncEventExceptionMessageFactory{``0,``1,``2})">
            <summary>
            Send a request to the configured service endpoint, and setup the state machine to accept the response.
            </summary>
            <typeparam name="TInstance">The state instance type</typeparam>
            <typeparam name="TRequest">The request message type</typeparam>
            <typeparam name="TResponse">The response message type</typeparam>
            <typeparam name="TException"></typeparam>
            <param name="binder">The event binder</param>
            <param name="request">The configured request to use</param>
            <param name="serviceAddressProvider"></param>
            <param name="messageFactory">The request message factory</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.StateMachineRequestExtensions.Request``4(MassTransit.ExceptionActivityBinder{``0,``1},MassTransit.Request{``0,``2,``3},MassTransit.ServiceAddressExceptionProvider{``0,``1},System.Func{MassTransit.BehaviorExceptionContext{``0,``1},System.Threading.Tasks.Task{MassTransit.SendTuple{``2}}})">
            <summary>
            Send a request to the configured service endpoint, and setup the state machine to accept the response.
            </summary>
            <typeparam name="TInstance">The state instance type</typeparam>
            <typeparam name="TRequest">The request message type</typeparam>
            <typeparam name="TResponse">The response message type</typeparam>
            <typeparam name="TException"></typeparam>
            <param name="binder">The event binder</param>
            <param name="request">The configured request to use</param>
            <param name="serviceAddressProvider"></param>
            <param name="messageFactory">The request message factory</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.StateMachineRequestExtensions.Request``5(MassTransit.ExceptionActivityBinder{``0,``1,``2},MassTransit.Request{``0,``3,``4},MassTransit.EventExceptionMessageFactory{``0,``1,``2,``3})">
            <summary>
            Send a request to the configured service endpoint, and setup the state machine to accept the response.
            </summary>
            <typeparam name="TInstance">The state instance type</typeparam>
            <typeparam name="TData">The event data type</typeparam>
            <typeparam name="TRequest">The request message type</typeparam>
            <typeparam name="TResponse">The response message type</typeparam>
            <typeparam name="TException"></typeparam>
            <param name="binder">The event binder</param>
            <param name="request">The configured request to use</param>
            <param name="messageFactory">The request message factory</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.StateMachineRequestExtensions.Request``5(MassTransit.ExceptionActivityBinder{``0,``1,``2},MassTransit.Request{``0,``3,``4},MassTransit.AsyncEventExceptionMessageFactory{``0,``1,``2,``3})">
            <summary>
            Send a request to the configured service endpoint, and setup the state machine to accept the response.
            </summary>
            <typeparam name="TInstance">The state instance type</typeparam>
            <typeparam name="TData">The event data type</typeparam>
            <typeparam name="TRequest">The request message type</typeparam>
            <typeparam name="TResponse">The response message type</typeparam>
            <typeparam name="TException"></typeparam>
            <param name="binder">The event binder</param>
            <param name="request">The configured request to use</param>
            <param name="messageFactory">The request message factory</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.StateMachineRequestExtensions.Request``5(MassTransit.ExceptionActivityBinder{``0,``1,``2},MassTransit.Request{``0,``3,``4},System.Func{MassTransit.BehaviorExceptionContext{``0,``1,``2},System.Threading.Tasks.Task{MassTransit.SendTuple{``3}}})">
            <summary>
            Send a request to the configured service endpoint, and setup the state machine to accept the response.
            </summary>
            <typeparam name="TInstance">The state instance type</typeparam>
            <typeparam name="TData">The event data type</typeparam>
            <typeparam name="TRequest">The request message type</typeparam>
            <typeparam name="TResponse">The response message type</typeparam>
            <typeparam name="TException"></typeparam>
            <param name="binder">The event binder</param>
            <param name="request">The configured request to use</param>
            <param name="messageFactory">The request message factory</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.StateMachineRequestExtensions.Request``5(MassTransit.ExceptionActivityBinder{``0,``1,``2},MassTransit.Request{``0,``3,``4},MassTransit.ServiceAddressExceptionProvider{``0,``1,``2},MassTransit.EventExceptionMessageFactory{``0,``1,``2,``3})">
            <summary>
            Send a request to the configured service endpoint, and setup the state machine to accept the response.
            </summary>
            <typeparam name="TInstance">The state instance type</typeparam>
            <typeparam name="TData">The event data type</typeparam>
            <typeparam name="TRequest">The request message type</typeparam>
            <typeparam name="TResponse">The response message type</typeparam>
            <typeparam name="TException"></typeparam>
            <param name="binder">The event binder</param>
            <param name="request">The configured request to use</param>
            <param name="serviceAddressProvider"></param>
            <param name="messageFactory">The request message factory</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.StateMachineRequestExtensions.Request``5(MassTransit.ExceptionActivityBinder{``0,``1,``2},MassTransit.Request{``0,``3,``4},MassTransit.ServiceAddressExceptionProvider{``0,``1,``2},MassTransit.AsyncEventExceptionMessageFactory{``0,``1,``2,``3})">
            <summary>
            Send a request to the configured service endpoint, and setup the state machine to accept the response.
            </summary>
            <typeparam name="TInstance">The state instance type</typeparam>
            <typeparam name="TData">The event data type</typeparam>
            <typeparam name="TRequest">The request message type</typeparam>
            <typeparam name="TResponse">The response message type</typeparam>
            <typeparam name="TException"></typeparam>
            <param name="binder">The event binder</param>
            <param name="request">The configured request to use</param>
            <param name="serviceAddressProvider"></param>
            <param name="messageFactory">The request message factory</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.StateMachineRequestExtensions.Request``5(MassTransit.ExceptionActivityBinder{``0,``1,``2},MassTransit.Request{``0,``3,``4},MassTransit.ServiceAddressExceptionProvider{``0,``1,``2},System.Func{MassTransit.BehaviorExceptionContext{``0,``1,``2},System.Threading.Tasks.Task{MassTransit.SendTuple{``3}}})">
            <summary>
            Send a request to the configured service endpoint, and setup the state machine to accept the response.
            </summary>
            <typeparam name="TInstance">The state instance type</typeparam>
            <typeparam name="TData">The event data type</typeparam>
            <typeparam name="TRequest">The request message type</typeparam>
            <typeparam name="TResponse">The response message type</typeparam>
            <typeparam name="TException"></typeparam>
            <param name="binder">The event binder</param>
            <param name="request">The configured request to use</param>
            <param name="serviceAddressProvider"></param>
            <param name="messageFactory">The request message factory</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.StateMachineRequestExtensions.Request``3(MassTransit.EventActivityBinder{``0},MassTransit.Request{``0,``1,``2},MassTransit.EventMessageFactory{``0,``1})">
            <summary>
            Send a request to the configured service endpoint, and setup the state machine to accept the response.
            </summary>
            <typeparam name="TInstance">The state instance type</typeparam>
            <typeparam name="TRequest">The request message type</typeparam>
            <typeparam name="TResponse">The response message type</typeparam>
            <param name="binder">The event binder</param>
            <param name="request">The configured request to use</param>
            <param name="messageFactory">The request message factory</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.StateMachineRequestExtensions.Request``3(MassTransit.EventActivityBinder{``0},MassTransit.Request{``0,``1,``2},MassTransit.AsyncEventMessageFactory{``0,``1})">
            <summary>
            Send a request to the configured service endpoint, and setup the state machine to accept the response.
            </summary>
            <typeparam name="TInstance">The state instance type</typeparam>
            <typeparam name="TRequest">The request message type</typeparam>
            <typeparam name="TResponse">The response message type</typeparam>
            <param name="binder">The event binder</param>
            <param name="request">The configured request to use</param>
            <param name="messageFactory">The request message factory</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.StateMachineRequestExtensions.Request``3(MassTransit.EventActivityBinder{``0},MassTransit.Request{``0,``1,``2},System.Func{MassTransit.BehaviorContext{``0},System.Threading.Tasks.Task{MassTransit.SendTuple{``1}}})">
            <summary>
            Send a request to the configured service endpoint, and setup the state machine to accept the response.
            </summary>
            <typeparam name="TInstance">The state instance type</typeparam>
            <typeparam name="TRequest">The request message type</typeparam>
            <typeparam name="TResponse">The response message type</typeparam>
            <param name="binder">The event binder</param>
            <param name="request">The configured request to use</param>
            <param name="messageFactory">The request message factory</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.StateMachineRequestExtensions.Request``3(MassTransit.EventActivityBinder{``0},MassTransit.Request{``0,``1,``2},MassTransit.ServiceAddressProvider{``0},MassTransit.EventMessageFactory{``0,``1})">
            <summary>
            Send a request to the configured service endpoint, and setup the state machine to accept the response.
            </summary>
            <typeparam name="TInstance">The state instance type</typeparam>
            <typeparam name="TRequest">The request message type</typeparam>
            <typeparam name="TResponse">The response message type</typeparam>
            <param name="binder">The event binder</param>
            <param name="request">The configured request to use</param>
            <param name="serviceAddressProvider"></param>
            <param name="messageFactory">The request message factory</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.StateMachineRequestExtensions.Request``3(MassTransit.EventActivityBinder{``0},MassTransit.Request{``0,``1,``2},MassTransit.ServiceAddressProvider{``0},MassTransit.AsyncEventMessageFactory{``0,``1})">
            <summary>
            Send a request to the configured service endpoint, and setup the state machine to accept the response.
            </summary>
            <typeparam name="TInstance">The state instance type</typeparam>
            <typeparam name="TRequest">The request message type</typeparam>
            <typeparam name="TResponse">The response message type</typeparam>
            <param name="binder">The event binder</param>
            <param name="request">The configured request to use</param>
            <param name="serviceAddressProvider"></param>
            <param name="messageFactory">The request message factory</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.StateMachineRequestExtensions.Request``3(MassTransit.EventActivityBinder{``0},MassTransit.Request{``0,``1,``2},MassTransit.ServiceAddressProvider{``0},System.Func{MassTransit.BehaviorContext{``0},System.Threading.Tasks.Task{MassTransit.SendTuple{``1}}})">
            <summary>
            Send a request to the configured service endpoint, and setup the state machine to accept the response.
            </summary>
            <typeparam name="TInstance">The state instance type</typeparam>
            <typeparam name="TRequest">The request message type</typeparam>
            <typeparam name="TResponse">The response message type</typeparam>
            <param name="binder">The event binder</param>
            <param name="request">The configured request to use</param>
            <param name="serviceAddressProvider"></param>
            <param name="messageFactory">The request message factory</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.StateMachineRequestExtensions.CancelRequestTimeout``4(MassTransit.EventActivityBinder{``0,``1},MassTransit.Request{``0,``2,``3})">
            <summary>
            Cancels the request timeout, and clears the request data from the state instance
            </summary>
            <typeparam name="TInstance"></typeparam>
            <typeparam name="TData"></typeparam>
            <typeparam name="TRequest"></typeparam>
            <typeparam name="TResponse"></typeparam>
            <param name="binder"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.StateMachineRequestExtensions.ClearRequest``4(MassTransit.EventActivityBinder{``0,``1},MassTransit.Request{``0,``2,``3})">
            <summary>
            Clears the requestId on the state
            </summary>
            <typeparam name="TInstance"></typeparam>
            <typeparam name="TData"></typeparam>
            <typeparam name="TRequest"></typeparam>
            <typeparam name="TResponse"></typeparam>
            <param name="binder"></param>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ThenExtensions.Then``1(MassTransit.EventActivityBinder{``0},System.Action{MassTransit.BehaviorContext{``0}})">
            <summary>
            Adds a synchronous delegate activity to the event's behavior
            </summary>
            <typeparam name="TSaga">The state machine instance type</typeparam>
            <param name="binder">The event binder</param>
            <param name="action">The synchronous delegate</param>
        </member>
        <member name="M:MassTransit.ThenExtensions.Then``2(MassTransit.ExceptionActivityBinder{``0,``1},System.Action{MassTransit.BehaviorExceptionContext{``0,``1}})">
            <summary>
            Adds a synchronous delegate activity to the event's behavior
            </summary>
            <typeparam name="TSaga">The state machine instance type</typeparam>
            <typeparam name="TException">The exception type</typeparam>
            <param name="binder">The event binder</param>
            <param name="action">The synchronous delegate</param>
        </member>
        <member name="M:MassTransit.ThenExtensions.ThenAsync``2(MassTransit.ExceptionActivityBinder{``0,``1},System.Func{MassTransit.BehaviorExceptionContext{``0,``1},System.Threading.Tasks.Task})">
            <summary>
            Adds a asynchronous delegate activity to the event's behavior
            </summary>
            <typeparam name="TSaga">The state machine instance type</typeparam>
            <typeparam name="TException">The exception type</typeparam>
            <param name="binder">The event binder</param>
            <param name="asyncAction">The asynchronous delegate</param>
        </member>
        <member name="M:MassTransit.ThenExtensions.ThenAsync``1(MassTransit.EventActivityBinder{``0},System.Func{MassTransit.BehaviorContext{``0},System.Threading.Tasks.Task})">
            <summary>
            Adds an asynchronous delegate activity to the event's behavior
            </summary>
            <typeparam name="TSaga">The state machine instance type</typeparam>
            <param name="binder">The event binder</param>
            <param name="action">The asynchronous delegate</param>
        </member>
        <member name="M:MassTransit.ThenExtensions.Then``2(MassTransit.EventActivityBinder{``0,``1},System.Action{MassTransit.BehaviorContext{``0,``1}})">
            <summary>
            Adds a synchronous delegate activity to the event's behavior
            </summary>
            <typeparam name="TSaga">The state machine instance type</typeparam>
            <typeparam name="TData">The event data type</typeparam>
            <param name="binder">The event binder</param>
            <param name="action">The synchronous delegate</param>
        </member>
        <member name="M:MassTransit.ThenExtensions.Then``3(MassTransit.ExceptionActivityBinder{``0,``1,``2},System.Action{MassTransit.BehaviorExceptionContext{``0,``1,``2}})">
            <summary>
            Adds a synchronous delegate activity to the event's behavior
            </summary>
            <typeparam name="TSaga">The state machine instance type</typeparam>
            <typeparam name="TException">The exception type</typeparam>
            <typeparam name="TData">The event data type</typeparam>
            <param name="binder">The event binder</param>
            <param name="action">The synchronous delegate</param>
        </member>
        <member name="M:MassTransit.ThenExtensions.ThenAsync``3(MassTransit.ExceptionActivityBinder{``0,``1,``2},System.Func{MassTransit.BehaviorExceptionContext{``0,``1,``2},System.Threading.Tasks.Task})">
            <summary>
            Adds a asynchronous delegate activity to the event's behavior
            </summary>
            <typeparam name="TSaga">The state machine instance type</typeparam>
            <typeparam name="TException">The exception type</typeparam>
            <typeparam name="TData">The event data type</typeparam>
            <param name="binder">The event binder</param>
            <param name="asyncAction">The asynchronous delegate</param>
        </member>
        <member name="M:MassTransit.ThenExtensions.ThenAsync``2(MassTransit.EventActivityBinder{``0,``1},System.Func{MassTransit.BehaviorContext{``0,``1},System.Threading.Tasks.Task})">
            <summary>
            Adds an asynchronous delegate activity to the event's behavior
            </summary>
            <typeparam name="TSaga">The state machine instance type</typeparam>
            <typeparam name="TData">The event data type</typeparam>
            <param name="binder">The event binder</param>
            <param name="action">The asynchronous delegate</param>
        </member>
        <member name="M:MassTransit.ThenExtensions.Execute``1(MassTransit.EventActivityBinder{``0},System.Func{MassTransit.BehaviorContext{``0},MassTransit.IStateMachineActivity{``0}})">
            <summary>
            Add an activity execution to the event's behavior
            </summary>
            <typeparam name="TSaga">The state machine instance type</typeparam>
            <param name="binder">The event binder</param>
            <param name="activityFactory">The factory method which returns the activity to execute</param>
        </member>
        <member name="M:MassTransit.ThenExtensions.Execute``1(MassTransit.EventActivityBinder{``0},MassTransit.IStateMachineActivity{``0})">
            <summary>
            Add an activity execution to the event's behavior
            </summary>
            <typeparam name="TSaga">The state machine instance type</typeparam>
            <param name="binder">The event binder</param>
            <param name="activity">An existing activity</param>
        </member>
        <member name="M:MassTransit.ThenExtensions.ExecuteAsync``1(MassTransit.EventActivityBinder{``0},System.Func{MassTransit.BehaviorContext{``0},System.Threading.Tasks.Task{MassTransit.IStateMachineActivity{``0}}})">
            <summary>
            Add an activity execution to the event's behavior
            </summary>
            <typeparam name="TSaga">The state machine instance type</typeparam>
            <param name="binder">The event binder</param>
            <param name="activityFactory">The factory method which returns the activity to execute</param>
        </member>
        <member name="M:MassTransit.ThenExtensions.Execute``2(MassTransit.EventActivityBinder{``0,``1},System.Func{MassTransit.BehaviorContext{``0,``1},MassTransit.IStateMachineActivity{``0,``1}})">
            <summary>
            Add an activity execution to the event's behavior
            </summary>
            <typeparam name="TSaga">The state machine instance type</typeparam>
            <typeparam name="TData">The event data type</typeparam>
            <param name="binder">The event binder</param>
            <param name="activityFactory">The factory method which returns the activity to execute</param>
        </member>
        <member name="M:MassTransit.ThenExtensions.ExecuteAsync``2(MassTransit.EventActivityBinder{``0,``1},System.Func{MassTransit.BehaviorContext{``0,``1},System.Threading.Tasks.Task{MassTransit.IStateMachineActivity{``0,``1}}})">
            <summary>
            Add an activity execution to the event's behavior
            </summary>
            <typeparam name="TSaga">The state machine instance type</typeparam>
            <typeparam name="TData">The event data type</typeparam>
            <param name="binder">The event binder</param>
            <param name="activityFactory">The factory method which returns the activity to execute</param>
        </member>
        <member name="M:MassTransit.ThenExtensions.Execute``2(MassTransit.EventActivityBinder{``0,``1},System.Func{MassTransit.BehaviorContext{``0,``1},MassTransit.IStateMachineActivity{``0}})">
            <summary>
            Add an activity execution to the event's behavior
            </summary>
            <typeparam name="TSaga">The state machine instance type</typeparam>
            <typeparam name="TData">The event data type</typeparam>
            <param name="binder">The event binder</param>
            <param name="activityFactory">The factory method which returns the activity to execute</param>
        </member>
        <member name="M:MassTransit.ThenExtensions.ExecuteAsync``2(MassTransit.EventActivityBinder{``0,``1},System.Func{MassTransit.BehaviorContext{``0,``1},System.Threading.Tasks.Task{MassTransit.IStateMachineActivity{``0}}})">
            <summary>
            Add an activity execution to the event's behavior
            </summary>
            <typeparam name="TSaga">The state machine instance type</typeparam>
            <typeparam name="TData">The event data type</typeparam>
            <param name="binder">The event binder</param>
            <param name="activityFactory">The factory method which returns the activity to execute</param>
        </member>
        <member name="M:MassTransit.TransitionExtensions.TransitionTo``1(MassTransit.EventActivityBinder{``0},MassTransit.State)">
            <summary>
            Transition the state machine to the specified state
            </summary>
        </member>
        <member name="M:MassTransit.TransitionExtensions.TransitionTo``2(MassTransit.ExceptionActivityBinder{``0,``1},MassTransit.State)">
            <summary>
            Transition the state machine to the specified state in response to an exception
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TException"></typeparam>
            <param name="source"></param>
            <param name="toState"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.TransitionExtensions.TransitionTo``2(MassTransit.EventActivityBinder{``0,``1},MassTransit.State)">
            <summary>
            Transition the state machine to the specified state
            </summary>
        </member>
        <member name="M:MassTransit.TransitionExtensions.TransitionTo``3(MassTransit.ExceptionActivityBinder{``0,``1,``2},MassTransit.State)">
            <summary>
            Transition the state machine to the specified state in response to an exception
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TException"></typeparam>
            <typeparam name="TMessage"></typeparam>
            <param name="source"></param>
            <param name="toState"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.TransitionExtensions.Finalize``2(MassTransit.EventActivityBinder{``0,``1})">
            <summary>
            Transition the state machine to the Final state
            </summary>
        </member>
        <member name="M:MassTransit.TransitionExtensions.Finalize``1(MassTransit.EventActivityBinder{``0})">
            <summary>
            Transition the state machine to the Final state
            </summary>
        </member>
        <member name="M:MassTransit.TransitionExtensions.Finalize``3(MassTransit.ExceptionActivityBinder{``0,``1,``2})">
            <summary>
            Transition the state machine to the Final state
            </summary>
        </member>
        <member name="M:MassTransit.TransitionExtensions.Finalize``2(MassTransit.ExceptionActivityBinder{``0,``1})">
            <summary>
            Transition the state machine to the Final state
            </summary>
        </member>
        <member name="M:MassTransit.SagaStateMachineExtensions.CreateSagaQuery``1(MassTransit.StateMachine{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MassTransit.State[])">
            <summary>
            Create a query that combines the specified expression with an expression that compares the instance state with the specified states
            </summary>
            <param name="machine">The state machine</param>
            <param name="expression">The query expression</param>
            <param name="states">The states that are valid for this query</param>
            <typeparam name="TInstance">The instance type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.SagaStateMachineExtensions.CreateSagaFilter``1(MassTransit.StateMachine{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},MassTransit.State[])">
            <summary>
            Create a query that combines the specified expression with an expression that compares the instance state with the specified states
            </summary>
            <param name="machine">The state machine</param>
            <param name="expression">The query expression</param>
            <param name="states">The states that are valid for this query</param>
            <typeparam name="TInstance">The instance type</typeparam>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Saga.AnyExistingSagaPolicy`2">
            <summary>
            Sends the message to any existing saga instances, failing silently if no saga instances are found.
            </summary>
            <typeparam name="TSaga">The saga type</typeparam>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="T:MassTransit.Saga.ExpressionSagaQueryFactory`2">
            <summary>
            Creates a saga query using the specified filter expression
            </summary>
            <typeparam name="TSaga">The saga type</typeparam>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="T:MassTransit.Saga.FactoryMethodSagaFactory`2">
            <summary>
            Creates a saga instance using the default factory method
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Saga.IIndexedSagaProperty`1">
            <summary>
            For the in-memory saga repository, this maintains an index of saga properties
            for fast searching
            </summary>
            <typeparam name="TSaga">The saga type</typeparam>
        </member>
        <member name="P:MassTransit.Saga.IIndexedSagaProperty`1.Item(System.Object)">
            <summary>
            Returns the saga with the specified key
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:MassTransit.Saga.IIndexedSagaProperty`1.Add(MassTransit.Saga.SagaInstance{`0})">
            <summary>
            Adds a new saga to the index
            </summary>
            <param name="newItem"></param>
        </member>
        <member name="M:MassTransit.Saga.IIndexedSagaProperty`1.Remove(MassTransit.Saga.SagaInstance{`0})">
            <summary>
            Removes a saga from the index
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:MassTransit.Saga.IIndexedSagaProperty`1.Where(System.Func{`0,System.Boolean})">
            <summary>
            Returns sagas matching the filter function
            </summary>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Saga.IIndexedSagaProperty`1.Where(System.Object,System.Func{`0,System.Boolean})">
            <summary>
            Returns sagas matching the filter function where the key also matches
            </summary>
            <param name="key"></param>
            <param name="filter"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Saga.IIndexedSagaProperty`1.Select``1(System.Func{`0,``0})">
            <summary>
            Selects sagas from the index, running the transformation function and returning the output type
            </summary>
            <param name="transformer"></param>
            <typeparam name="TResult"></typeparam>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Saga.IndexedSagaProperty`2">
            <summary>
            A dictionary index of the sagas
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TProperty"></typeparam>
        </member>
        <member name="M:MassTransit.Saga.IndexedSagaProperty`2.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Creates an index for the specified property of a saga
            </summary>
            <param name="propertyInfo"></param>
        </member>
        <member name="T:MassTransit.Saga.InMemorySagaRepositoryContextFactory`1">
            <summary>
            Supports the InMemorySagaRepository
            </summary>
            <typeparam name="TSaga"></typeparam>
        </member>
        <member name="T:MassTransit.Saga.ISagaConsumeContextFactory`2">
            <summary>
            Creates the <see cref="T:MassTransit.SagaConsumeContext`2" /> as needed by the <see cref="T:MassTransit.Saga.SagaRepositoryContext`1" />.
            </summary>
            <typeparam name="TContext"></typeparam>
            <typeparam name="TSaga"></typeparam>
        </member>
        <member name="M:MassTransit.Saga.ISagaConsumeContextFactory`2.CreateSagaConsumeContext``1(`0,MassTransit.ConsumeContext{``0},`1,MassTransit.Saga.SagaConsumeContextMode)">
            <summary>
            Create a new <see cref="T:MassTransit.SagaConsumeContext`2" />.
            </summary>
            <param name="context">The <see cref="T:MassTransit.Saga.SagaRepositoryContext`1" /></param>
            <param name="consumeContext">The message consume context being delivered to the saga</param>
            <param name="instance">The saga instance</param>
            <param name="mode">The creation mode of the saga instance</param>
            <typeparam name="T">The message type</typeparam>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Saga.ISagaConsumeContextFactory`1">
            <summary>
            Creates the <see cref="T:MassTransit.SagaConsumeContext`2" /> as needed by the <see cref="T:MassTransit.Saga.SagaRepositoryContext`1" />.
            </summary>
            <typeparam name="TSaga"></typeparam>
        </member>
        <member name="M:MassTransit.Saga.ISagaConsumeContextFactory`1.CreateSagaConsumeContext``1(MassTransit.ConsumeContext{``0},`0,MassTransit.Saga.SagaConsumeContextMode)">
            <summary>
            Create a new <see cref="T:MassTransit.SagaConsumeContext`2" />.
            </summary>
            <param name="consumeContext">The message consume context being delivered to the saga</param>
            <param name="instance">The saga instance</param>
            <param name="mode">The creation mode of the saga instance</param>
            <typeparam name="T">The message type</typeparam>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Saga.ISagaRepositoryContextFactory`1">
            <summary>
            </summary>
            <typeparam name="TSaga"></typeparam>
        </member>
        <member name="M:MassTransit.Saga.ISagaRepositoryContextFactory`1.Send``1(MassTransit.ConsumeContext{``0},MassTransit.IPipe{MassTransit.Saga.SagaRepositoryContext{`0,``0}})">
            <summary>
            Create a <see cref="T:MassTransit.Saga.SagaRepositoryContext`2" /> and send it to the next pipe.
            </summary>
            <param name="context"></param>
            <param name="next"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Saga.ISagaRepositoryContextFactory`1.SendQuery``1(MassTransit.ConsumeContext{``0},MassTransit.ISagaQuery{`0},MassTransit.IPipe{MassTransit.Saga.SagaRepositoryQueryContext{`0,``0}})">
            <summary>
            Create a <see cref="T:MassTransit.Saga.SagaRepositoryQueryContext`2" /> and send it to the next pipe.
            </summary>
            <param name="context"></param>
            <param name="query"></param>
            <param name="next"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Saga.ISagaRepositoryContextFactory`1.Execute``1(System.Func{MassTransit.Saga.SagaRepositoryContext{`0},System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            Create a <see cref="T:MassTransit.Saga.SagaRepositoryContext`1" /> and send it to the next pipe.
            </summary>
            <param name="asyncMethod"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Saga.LoadedSagaRepositoryQueryContext`2">
            <summary>
            For queries that load the actual saga instances
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Saga.LoadedSagaRepositoryQueryContext`1">
            <summary>
            For queries that load the actual saga instances
            </summary>
            <typeparam name="TSaga"></typeparam>
        </member>
        <member name="T:MassTransit.Saga.NewOrExistingSagaPolicy`2">
            <summary>
            Creates a new or uses an existing saga instance
            </summary>
            <typeparam name="TSaga">The saga type</typeparam>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="T:MassTransit.Saga.NewSagaPolicy`2">
            <summary>
            Accepts a message to a saga that does not already exist, throwing an exception if an existing
            saga instance is specified.
            </summary>
            <typeparam name="TSaga">The saga type</typeparam>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="F:MassTransit.Saga.SagaConsumeContextMode.Load">
            <summary>
            Existing saga loaded from storage
            </summary>
        </member>
        <member name="F:MassTransit.Saga.SagaConsumeContextMode.Add">
            <summary>
            New saga created
            </summary>
        </member>
        <member name="F:MassTransit.Saga.SagaConsumeContextMode.Insert">
            <summary>
            New saga inserted prior to event
            </summary>
        </member>
        <member name="T:MassTransit.Saga.SagaRepository`1">
            <summary>
            The modern saga repository, which can be used with any storage engine. Leverages the new interfaces for consume and query context.
            </summary>
            <typeparam name="TSaga"></typeparam>
        </member>
        <member name="M:MassTransit.Saga.SagaRepositoryContext`2.Add(`0)">
            <summary>
            Add the saga instance, using the specified <see cref="T:MassTransit.SagaConsumeContext`2" />
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Saga.SagaRepositoryContext`2.Insert(`0)">
            <summary>
            Insert the saga instance, if it does not already exist.
            </summary>
            <param name="instance"></param>
            <returns>
            A valid <see cref="T:MassTransit.SagaConsumeContext`2" /> if the instance inserted successfully, otherwise default
            </returns>
        </member>
        <member name="M:MassTransit.Saga.SagaRepositoryContext`2.Load(System.Guid)">
            <summary>
            Load an existing saga instance
            </summary>
            <param name="correlationId"></param>
            <returns>
            A valid <see cref="T:MassTransit.SagaConsumeContext`2" /> if the instance loaded successfully, otherwise default
            </returns>
        </member>
        <member name="M:MassTransit.Saga.SagaRepositoryContext`2.Save(MassTransit.SagaConsumeContext{`0})">
            <summary>
            Save the saga, called after an Add, without an insert
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Saga.SagaRepositoryContext`2.Update(MassTransit.SagaConsumeContext{`0})">
            <summary>
            Update the saga, called after a load or insert where the saga has not completed
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Saga.SagaRepositoryContext`2.Delete(MassTransit.SagaConsumeContext{`0})">
            <summary>
            Delete the saga, called after a Load when the saga is completed
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Saga.SagaRepositoryContext`2.Discard(MassTransit.SagaConsumeContext{`0})">
            <summary>
            Discard the saga, called after an Add when the saga is completed within the same transaction
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Saga.SagaRepositoryContext`2.Undo(MassTransit.SagaConsumeContext{`0})">
            <summary>
            Undo the changes for the saga
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Saga.SagaRepositoryContext`1.Query(MassTransit.ISagaQuery{`0},System.Threading.CancellationToken)">
            <summary>
            Query saga instances
            </summary>
            <param name="query"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Saga.SagaRepositoryContext`1.Load(System.Guid)">
            <summary>
            Load an existing saga instance
            </summary>
            <param name="correlationId"></param>
            <returns>The saga, if found, or null</returns>
        </member>
        <member name="P:MassTransit.Saga.SagaRepositoryQueryContext`2.Count">
            <summary>
            The number of matching saga instances
            </summary>
        </member>
        <member name="P:MassTransit.Saga.SagaRepositoryQueryContext`1.Count">
            <summary>
            The number of matching saga instances
            </summary>
        </member>
        <member name="M:MassTransit.Saga.StateExpressionVisitor`1.Combine(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Boolean)">
            <summary>
            Combines the base expression with the specified state expression (from the state accessor)
            </summary>
            <param name="stateExpression">The state expression</param>
            <param name="not">If true, adds a not to the expression, otherwise, matches any of the states</param>
            <returns>The combined expression</returns>
        </member>
        <member name="T:MassTransit.Scheduling.ScheduleMessageContextPipe`1">
            <summary>
            For remote endpoint schedulers, used to invoke the <see cref="T:MassTransit.SendContext`1" /> pipe and
            manage the ScheduledMessageId
            </summary>
            <typeparam name="T">The message type</typeparam>
        </member>
        <member name="M:MassTransit.Scheduling.IScheduleTokenIdCache`1.TryGetTokenId(`0,System.Guid@)">
            <summary>
            Try to get the tokenId for the scheduler from the message
            </summary>
            <param name="message"></param>
            <param name="tokenId"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Scheduling.MessageSchedulerConverterCache">
            <summary>
            Caches the converters that allow a raw object to be published using the object's type through
            the generic Send method.
            </summary>
        </member>
        <member name="T:MassTransit.Scheduling.MessageSchedulerConverterCache.IMessageSchedulerConverter">
            <summary>
            Calls the generic version of the ISendEndpoint.Send method with the object's type
            </summary>
        </member>
        <member name="T:MassTransit.Scheduling.MessageSchedulerConverterCache.MessageSchedulerConverter`1">
            <summary>
            Converts the object type message to the appropriate generic type and invokes the send method with that
            generic overload.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MassTransit.Scheduling.ScheduleSendPipe`1">
            <summary>
            For transport-based schedulers, used to invoke the <see cref="T:MassTransit.SendContext`1" /> pipe and
            manage the ScheduledMessageId, as well as set the transport delay property
            </summary>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="T:MassTransit.Scheduling.ScheduleTokenIdCache`1">
            <summary>
            A cache of convention-based CorrelationId mappers, used unless overridden by some mystical force
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MassTransit.SendEndpointRecurringSchedulerExtensions.ScheduleRecurringSend``1(MassTransit.ISendEndpoint,System.Uri,MassTransit.Scheduling.RecurringSchedule,``0,System.Threading.CancellationToken)">
            <summary>
            Schedule a message for recurring delivery using the specified schedule
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="message">The message</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="schedule">The schedule for the message to be delivered</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendEndpointRecurringSchedulerExtensions.ScheduleRecurringSend``1(MassTransit.ISendEndpoint,System.Uri,MassTransit.Scheduling.RecurringSchedule,``0,MassTransit.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Schedule a message for recurring delivery using the specified schedule
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="message">The message</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="schedule">The schedule for the message to be delivered</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendEndpointRecurringSchedulerExtensions.ScheduleRecurringSend``1(MassTransit.ISendEndpoint,System.Uri,MassTransit.Scheduling.RecurringSchedule,``0,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Schedule a message for recurring delivery using the specified schedule
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="message">The message</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="schedule">The schedule for the message to be delivered</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendEndpointRecurringSchedulerExtensions.ScheduleRecurringSend(MassTransit.ISendEndpoint,System.Uri,MassTransit.Scheduling.RecurringSchedule,System.Object,System.Threading.CancellationToken)">
            <summary>
            Schedule a message for recurring delivery using the specified schedule
            </summary>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="message">The message object</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="schedule">The schedule for the message to be delivered</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendEndpointRecurringSchedulerExtensions.ScheduleRecurringSend(MassTransit.ISendEndpoint,System.Uri,MassTransit.Scheduling.RecurringSchedule,System.Object,System.Type,System.Threading.CancellationToken)">
            <summary>
            Schedule a message for recurring delivery using the specified schedule
            </summary>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="message">The message object</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="schedule">The schedule for the message to be delivered</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendEndpointRecurringSchedulerExtensions.ScheduleRecurringSend(MassTransit.ISendEndpoint,System.Uri,MassTransit.Scheduling.RecurringSchedule,System.Object,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Schedule a message for recurring delivery using the specified schedule
            </summary>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="message">The message object</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="schedule">The schedule for the message to be delivered</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendEndpointRecurringSchedulerExtensions.ScheduleRecurringSend(MassTransit.ISendEndpoint,System.Uri,MassTransit.Scheduling.RecurringSchedule,System.Object,System.Type,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Schedule a message for recurring delivery using the specified schedule
            </summary>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="message">The message object</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="schedule">The schedule for the message to be delivered</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendEndpointRecurringSchedulerExtensions.ScheduleRecurringSend``1(MassTransit.ISendEndpoint,System.Uri,MassTransit.Scheduling.RecurringSchedule,System.Object,System.Threading.CancellationToken)">
            <summary>
            Schedule a message for recurring delivery using the specified schedule
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="schedule">The schedule for the message to be delivered</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendEndpointRecurringSchedulerExtensions.ScheduleRecurringSend``1(MassTransit.ISendEndpoint,System.Uri,MassTransit.Scheduling.RecurringSchedule,System.Object,MassTransit.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Schedule a message for recurring delivery using the specified schedule
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="schedule">The schedule for the message to be delivered</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendEndpointRecurringSchedulerExtensions.ScheduleRecurringSend``1(MassTransit.ISendEndpoint,System.Uri,MassTransit.Scheduling.RecurringSchedule,System.Object,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Schedule a message for recurring delivery using the specified schedule
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="endpoint">The message scheduler endpoint</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="schedule">The schedule for the message to be delivered</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendEndpointRecurringSchedulerExtensions.CancelScheduledRecurringSend``1(MassTransit.ISendEndpoint,MassTransit.ScheduledRecurringMessage{``0})">
            <summary>
            Cancel a scheduled message using the scheduled message instance
            </summary>
            <param name="endpoint">The endpoint of the scheduling service</param>
            <param name="message">The schedule message reference</param>
        </member>
        <member name="M:MassTransit.SendEndpointRecurringSchedulerExtensions.CancelScheduledRecurringSend(MassTransit.ISendEndpoint,System.String,System.String)">
            <summary>
            Cancel a scheduled message using the tokenId that was returned when the message was scheduled.
            </summary>
            <param name="endpoint">The endpoint of the scheduling service</param>
            <param name="scheduleId">The scheduleId from the recurring schedule</param>
            <param name="scheduleGroup">The scheduleGroup from the recurring schedule</param>
        </member>
        <member name="M:MassTransit.SendEndpointRecurringSchedulerExtensions.PauseScheduledRecurringSend``1(MassTransit.ISendEndpoint,MassTransit.ScheduledRecurringMessage{``0})">
            <summary>
            Pause a scheduled message using the scheduled message instance
            </summary>
            <param name="endpoint">The endpoint of the scheduling service</param>
            <param name="message">The schedule message reference</param>
        </member>
        <member name="M:MassTransit.SendEndpointRecurringSchedulerExtensions.PauseScheduledRecurringSend(MassTransit.ISendEndpoint,System.String,System.String)">
            <summary>
            Pause a scheduled message using the tokenId that was returned when the message was scheduled.
            </summary>
            <param name="endpoint">The endpoint of the scheduling service</param>
            <param name="scheduleId">The scheduleId from the recurring schedule</param>
            <param name="scheduleGroup">The scheduleGroup from the recurring schedule</param>
        </member>
        <member name="M:MassTransit.SendEndpointRecurringSchedulerExtensions.ResumeScheduledRecurringSend``1(MassTransit.ISendEndpoint,MassTransit.ScheduledRecurringMessage{``0})">
            <summary>
            Resume a scheduled message using the scheduled message instance
            </summary>
            <param name="endpoint">The endpoint of the scheduling service</param>
            <param name="message">The schedule message reference</param>
        </member>
        <member name="M:MassTransit.SendEndpointRecurringSchedulerExtensions.ResumeScheduledRecurringSend(MassTransit.ISendEndpoint,System.String,System.String)">
            <summary>
            Resume a scheduled message using the tokenId that was returned when the message was scheduled.
            </summary>
            <param name="endpoint">The endpoint of the scheduling service</param>
            <param name="scheduleId">The scheduleId from the recurring schedule</param>
            <param name="scheduleGroup">The scheduleGroup from the recurring schedule</param>
        </member>
        <member name="T:MassTransit.Serialization.CopyBodySerializer">
            <summary>
            Copies the body of the receive context to the send context unmodified
            </summary>
        </member>
        <member name="M:MassTransit.Serialization.DeserializeVariableExtensions.TryGetValue``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,``0@)">
            <summary>
            Return an object from the dictionary converted to T using the message deserializer
            </summary>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="value"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Serialization.DeserializeVariableExtensions.TryGetValue``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Nullable{``0}@)">
            <summary>
            Return an object from the dictionary converted to T using the message deserializer
            </summary>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="value"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Serialization.ICryptoStreamProvider">
            <summary>
            Provides a crypto stream for the purpose of encrypting or decrypting
            </summary>
        </member>
        <member name="M:MassTransit.Serialization.ICryptoStreamProvider.GetEncryptStream(System.IO.Stream,System.String,System.Security.Cryptography.CryptoStreamMode)">
            <summary>
            Returns a stream with the encryption bits in place to ensure proper message encryption
            </summary>
            <param name="stream">The original stream to which the encrypted message content is written</param>
            <param name="keyId">The encryption key identifier</param>
            <param name="streamMode"></param>
            <returns>A stream for serializing the message which will be encrypted</returns>
        </member>
        <member name="M:MassTransit.Serialization.ICryptoStreamProvider.GetDecryptStream(System.IO.Stream,System.String,System.Security.Cryptography.CryptoStreamMode)">
            <summary>
            Returns a stream for decrypting the message
            </summary>
            <param name="stream">The input stream of the encrypted message</param>
            <param name="keyId">The encryption key identifier</param>
            <param name="streamMode"></param>
            <returns>A stream for deserializing the encrypted message</returns>
        </member>
        <member name="T:MassTransit.Serialization.ISymmetricKeyProvider">
            <summary>
            Returns the symmetric key used to encrypt or decrypt messages
            </summary>
        </member>
        <member name="M:MassTransit.Serialization.ISymmetricKeyProvider.TryGetKey(System.String,MassTransit.Serialization.SymmetricKey@)">
            <summary>
            Return the specified key, if found. When using Symmetric key encryption, the default key is used
            unless the transport header contains a specific key identifier for the message.
            </summary>
            <param name="id">The key id</param>
            <param name="key">The symmetric key</param>
            <returns></returns>
        </member>
        <member name="F:MassTransit.Serialization.RawSerializerOptions.AnyMessageType">
            <summary>
            Any message type is allowed, the supported message type array values are not checked
            </summary>
        </member>
        <member name="F:MassTransit.Serialization.RawSerializerOptions.AddTransportHeaders">
            <summary>
            Add the transport headers on the outbound message
            </summary>
        </member>
        <member name="F:MassTransit.Serialization.RawSerializerOptions.CopyHeaders">
            <summary>
            Copy message headers to outbound messages
            </summary>
        </member>
        <member name="T:MassTransit.Serialization.ReadOnlyDictionaryHeaders">
            <summary>
            When a message envelope is deserialized, encapsulate the headers such that objects can be deserialized from the
            body using the message deserializer.
            </summary>
        </member>
        <member name="T:MassTransit.Serialization.SerializedMessage">
            <summary>
            The content of a serialized message
            </summary>
        </member>
        <member name="P:MassTransit.Serialization.SerializedMessage.Destination">
            <summary>
            The destination for the serialized message
            </summary>
        </member>
        <member name="P:MassTransit.Serialization.SerializedMessage.ContentType">
            <summary>
            The content type of the serializer used
            </summary>
        </member>
        <member name="T:MassTransit.Serialization.SystemTextJsonBodyMessageSerializer">
            <summary>
            Used to serialize an existing deserialized message when a message is forwarded, scheduled, etc.
            </summary>
        </member>
        <member name="M:MassTransit.SupervisorExtensions.AddContext``1(MassTransit.ISupervisor,``0)">
            <summary>
            Adds a context to the supervisor as an agent, which can be stopped by the supervisor.
            </summary>
            <param name="supervisor">The supervisor</param>
            <param name="context">The context</param>
            <typeparam name="T">The context type</typeparam>
            <returns>A context handle</returns>
        </member>
        <member name="M:MassTransit.SupervisorExtensions.AddContext``1(MassTransit.ISupervisor,System.Threading.Tasks.Task{``0})">
            <summary>
            Adds a context to the supervisor as an agent, which can be stopped by the supervisor.
            </summary>
            <param name="supervisor">The supervisor</param>
            <param name="context">The context</param>
            <typeparam name="T">The context type</typeparam>
            <returns>A context handle</returns>
        </member>
        <member name="M:MassTransit.SupervisorExtensions.AddActiveContext``1(MassTransit.ISupervisor,MassTransit.PipeContextHandle{``0},System.Threading.Tasks.Task{``0})">
            <summary>
            Adds a context to the supervisor as an agent, which can be stopped by the supervisor.
            </summary>
            <param name="supervisor">The supervisor</param>
            <param name="contextHandle">The actual context handle</param>
            <param name="context">The active context</param>
            <typeparam name="T">The context type</typeparam>
            <returns>A context handle</returns>
        </member>
        <member name="M:MassTransit.SupervisorExtensions.AddActiveContext``1(MassTransit.ISupervisor,MassTransit.PipeContextHandle{``0},``0)">
            <summary>
            Adds a context to the supervisor as an agent, which can be stopped by the supervisor.
            </summary>
            <param name="supervisor">The supervisor</param>
            <param name="contextHandle">The actual context handle</param>
            <param name="context">The active context</param>
            <typeparam name="T">The context type</typeparam>
            <returns>A context handle</returns>
        </member>
        <member name="M:MassTransit.SupervisorExtensions.AddAsyncContext``1(MassTransit.ISupervisor)">
            <summary>
            Adds a context to the supervisor as an agent, which can be stopped by the supervisor.
            </summary>
            <param name="supervisor">The supervisor</param>
            <typeparam name="T">The context type</typeparam>
            <returns>A context handle</returns>
        </member>
        <member name="M:MassTransit.Testing.ActivityTestHarnessExtensions.Activity``3(MassTransit.Testing.BusTestHarness)">
            <summary>
            Creates an activity test harness
            </summary>
            <typeparam name="TActivity"></typeparam>
            <typeparam name="TArguments"></typeparam>
            <typeparam name="TLog"></typeparam>
            <param name="harness"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Testing.ActivityTestHarnessExtensions.Activity``3(MassTransit.Testing.BusTestHarness,System.Func{``1,``0},System.Func{``2,``0})">
            <summary>
            Creates an activity test harness
            </summary>
            <typeparam name="TActivity"></typeparam>
            <typeparam name="TArguments"></typeparam>
            <typeparam name="TLog"></typeparam>
            <param name="harness"></param>
            <param name="executeFactoryMethod"></param>
            <param name="compensateFactoryMethod"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Testing.ActivityTestHarnessExtensions.ExecuteActivity``2(MassTransit.Testing.BusTestHarness)">
            <summary>
            Creates an execute-only activity test harness
            </summary>
            <typeparam name="TActivity"></typeparam>
            <typeparam name="TArguments"></typeparam>
            <param name="harness"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Testing.ActivityTestHarnessExtensions.ExecuteActivity``2(MassTransit.Testing.BusTestHarness,System.Func{``1,``0})">
            <summary>
            Creates an execute-only activity test harness
            </summary>
            <typeparam name="TActivity"></typeparam>
            <typeparam name="TArguments"></typeparam>
            <param name="harness"></param>
            <param name="executeFactoryMethod"></param>
            <returns></returns>
        </member>
        <member name="P:MassTransit.Testing.AsyncTestHarness.TestCancelledTask">
            <summary>
            Task that is canceled when the test is aborted, for continueWith usage
            </summary>
        </member>
        <member name="P:MassTransit.Testing.AsyncTestHarness.TestCancellationToken">
            <summary>
            CancellationToken that is canceled when the test is being aborted
            </summary>
        </member>
        <member name="P:MassTransit.Testing.AsyncTestHarness.InactivityTask">
            <summary>
            Task that is completed when the bus inactivity timeout has elapsed with no bus activity
            </summary>
        </member>
        <member name="P:MassTransit.Testing.AsyncTestHarness.InactivityToken">
            <summary>
            CancellationToken that is cancelled when the test inactivity timeout has elapsed with no bus activity
            </summary>
        </member>
        <member name="P:MassTransit.Testing.AsyncTestHarness.TestTimeout">
            <summary>
            Timeout for the test, used for any delay timers
            </summary>
        </member>
        <member name="P:MassTransit.Testing.AsyncTestHarness.TestInactivityTimeout">
            <summary>
            Timeout specifying the elapsed time with no bus activity after which the test could be completed
            </summary>
        </member>
        <member name="M:MassTransit.Testing.AsyncTestHarness.Cancel">
            <summary>
            Forces the test to be cancelled, aborting any awaiting tasks
            </summary>
        </member>
        <member name="M:MassTransit.Testing.AsyncTestHarness.GetTask``1">
            <summary>
            Returns a task completion that is automatically canceled when the test is canceled
            </summary>
            <typeparam name="T">The task type</typeparam>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Testing.BusTestHarness">
            <summary>
            A bus text fixture includes a single bus instance with one or more receiving endpoints.
            </summary>
        </member>
        <member name="P:MassTransit.Testing.BusTestHarness.BusAddress">
            <summary>
            The address of the default bus endpoint, used as the SourceAddress for requests and published messages
            </summary>
        </member>
        <member name="P:MassTransit.Testing.BusTestHarness.InputQueueName">
            <summary>
            The name of the input queue (for the default receive endpoint)
            </summary>
        </member>
        <member name="P:MassTransit.Testing.BusTestHarness.InputQueueAddress">
            <summary>
            The address of the input queue receive endpoint
            </summary>
        </member>
        <member name="P:MassTransit.Testing.BusTestHarness.BusSendEndpoint">
            <summary>
            The send endpoint for the default bus endpoint
            </summary>
        </member>
        <member name="P:MassTransit.Testing.BusTestHarness.InputQueueSendEndpoint">
            <summary>
            The send endpoint for the input queue receive endpoint
            </summary>
        </member>
        <member name="M:MassTransit.Testing.BusTestHarness.SubscribeHandler``1">
            <summary>
            Subscribes a message handler to the bus, which is disconnected after the message
            is received.
            </summary>
            <typeparam name="T">The message type</typeparam>
            <returns>An awaitable task completed when the message is received</returns>
        </member>
        <member name="M:MassTransit.Testing.BusTestHarness.SubscribeHandler``1(System.Func{MassTransit.ConsumeContext{``0},System.Boolean})">
            <summary>
            Subscribes a message handler to the bus, which is disconnected after the message
            is received.
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="filter">A filter that only completes the task if filter is true</param>
            <returns>An awaitable task completed when the message is received</returns>
        </member>
        <member name="M:MassTransit.Testing.BusTestHarness.Handled``1(MassTransit.IReceiveEndpointConfigurator)">
            <summary>
            Registers a handler on the receive endpoint that is cancelled when the test is canceled
            and completed when the message is received.
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="configurator">The endpoint configurator</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Testing.BusTestHarness.Handled``1(MassTransit.IReceiveEndpointConfigurator,System.Func{MassTransit.ConsumeContext{``0},System.Boolean})">
            <summary>
            Registers a handler on the receive endpoint that is cancelled when the test is canceled
            and completed when the message is received.
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="configurator">The endpoint configurator</param>
            <param name="filter">Filter the messages based on the handled consume context</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Testing.BusTestHarness.Handled``1(MassTransit.IReceiveEndpointConfigurator,System.Int32)">
            <summary>
            Registers a handler on the receive endpoint that is cancelled when the test is canceled
            and completed when the message is received.
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="configurator">The endpoint configurator</param>
            <param name="expectedCount">The expected number of messages</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Testing.BusTestHarness.Handler``1(MassTransit.IReceiveEndpointConfigurator,MassTransit.MessageHandler{``0})">
            <summary>
            Registers a handler on the receive endpoint that is completed after the specified handler is
            executed and canceled if the test is canceled.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configurator"></param>
            <param name="handler"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Testing.BusTestHarness.HandledByConsumer``1(MassTransit.IReceiveEndpointConfigurator)">
            <summary>
            Registers a consumer on the receive endpoint that is cancelled when the test is canceled
            and completed when the message is received.
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="configurator">The endpoint configurator</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Testing.ExtensionMethodsForBuses.CreateBusActivityMonitor(MassTransit.IBus)">
            <summary>
            Creates a bus activity monitor
            </summary>
            <param name="bus"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Testing.ExtensionMethodsForBuses.CreateBusActivityMonitor(MassTransit.IBus,System.TimeSpan)">
            <summary>
            Creates a bus activity monitor
            </summary>
            <param name="bus"></param>
            <param name="inactivityTimeout">minimum time to wait to presume bus inactivity</param>
            <returns></returns>
        </member>
        <member name="P:MassTransit.Testing.IBaseTestHarness.CancellationToken">
            <summary>
            CancellationToken that is canceled when the test is being aborted
            </summary>
        </member>
        <member name="P:MassTransit.Testing.IBaseTestHarness.InactivityToken">
            <summary>
            CancellationToken that is cancelled when the test inactivity timeout has elapsed with no bus activity
            </summary>
        </member>
        <member name="P:MassTransit.Testing.IBaseTestHarness.InactivityTask">
            <summary>
            Task that is completed when the bus inactivity timeout has elapsed with no bus activity
            </summary>
        </member>
        <member name="M:MassTransit.Testing.IBaseTestHarness.Cancel">
            <summary>
            Sets the <see cref="P:MassTransit.Testing.IBaseTestHarness.CancellationToken" />, canceling the test execution
            </summary>
        </member>
        <member name="M:MassTransit.Testing.IBaseTestHarness.ForceInactive">
            <summary>
            Force the inactivity task to complete
            </summary>
        </member>
        <member name="M:MassTransit.Testing.Implementations.BaseSagaTestHarness`1.Exists(System.Guid,System.Nullable{System.TimeSpan})">
            <summary>
            Waits until a saga exists with the specified correlationId
            </summary>
            <param name="correlationId"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Testing.Implementations.BaseSagaTestHarness`1.Match(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.TimeSpan})">
            <summary>
            Waits until at least one saga exists matching the specified filter
            </summary>
            <param name="filter"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Testing.Implementations.BaseSagaTestHarness`1.NotExists(System.Guid,System.Nullable{System.TimeSpan})">
            <summary>
            Waits until the saga matching the specified correlationId does NOT exist
            </summary>
            <param name="correlationId"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Testing.Implementations.BusActivityMonitor">
            <summary>
            Signalable resource which monitors bus activity.
            </summary>
        </member>
        <member name="T:MassTransit.Testing.Implementations.BusActivityPublishIndicator">
            <summary>
            An activity indicator for publish endpoints. Utilizes a timer that restarts on publish activity.
            </summary>
        </member>
        <member name="T:MassTransit.Testing.Implementations.BusActivityReceiveIndicator">
            <summary>
            An activity indicator for receive endpoint queues. Utilizes a timer that restarts on receive activity.
            </summary>
        </member>
        <member name="T:MassTransit.Testing.Implementations.BusActivitySendIndicator">
            <summary>
            An activity indicator for send endpoints. Utilizes a timer that restarts on send activity.
            </summary>
        </member>
        <member name="T:MassTransit.Testing.Implementations.ConditionExpression">
            <summary>
            A collection of blocks of conditions that must occur to signal a resource.
            Each condition block in the list is logically OR'd with the other condition blocks.
            Each condition within a condition block is logically AND'd with the other conditions in the same block.
            </summary>
        </member>
        <member name="M:MassTransit.Testing.Implementations.ConditionExpression.AddConditionBlock(MassTransit.Testing.Implementations.IObservableCondition[])">
            <summary>
            Adds a condition block where all conditions in the array must be logically ANDed together to succeed.
            </summary>
        </member>
        <member name="T:MassTransit.Testing.Implementations.IBusActivityMonitor">
            <summary>
            Represents a monitor for bus activity, allowing awaiting an inactive bus state.
            </summary>
        </member>
        <member name="T:MassTransit.Testing.Implementations.ICondition">
            <summary>
            Represents a boolean condition
            </summary>
        </member>
        <member name="T:MassTransit.Testing.Implementations.IConditionObserver">
            <summary>
            Represents an observer on a change in boolean condition state.
            </summary>
        </member>
        <member name="P:MassTransit.Testing.Implementations.IInactivityObservationSource.IsInactive">
            <summary>
            True if the inactivity source is currently inactive
            </summary>
        </member>
        <member name="T:MassTransit.Testing.Implementations.IObservableCondition">
            <summary>
            Represents a boolean condition which may be observed.
            </summary>
        </member>
        <member name="T:MassTransit.Testing.Implementations.ISignalResource">
            <summary>
            Represents a resource which may be signaled.
            </summary>
        </member>
        <member name="M:MassTransit.Testing.Implementations.RegistrationSagaStateMachineTestHarness`2.Exists(System.Guid,System.Func{`0,MassTransit.State},System.Nullable{System.TimeSpan})">
            <summary>
            Waits until a saga exists with the specified correlationId in the specified state
            </summary>
            <param name="correlationId"></param>
            <param name="stateSelector"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Testing.Implementations.RegistrationSagaStateMachineTestHarness`2.Exists(System.Guid,MassTransit.State,System.Nullable{System.TimeSpan})">
            <summary>
            Waits until a saga exists with the specified correlationId in the specified state
            </summary>
            <param name="correlationId"></param>
            <param name="state">The expected state</param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Testing.Implementations.RegistrationSagaStateMachineTestHarness`2.Exists(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Func{`0,MassTransit.State},System.Nullable{System.TimeSpan})">
            <summary>
            Waits until a saga exists with the specified correlationId in the specified state
            </summary>
            <param name="expression"></param>
            <param name="stateSelector"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Testing.Implementations.RegistrationSagaStateMachineTestHarness`2.Exists(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},MassTransit.State,System.Nullable{System.TimeSpan})">
            <summary>
            Waits until a saga exists with the specified correlationId in the specified state
            </summary>
            <param name="expression"></param>
            <param name="state">The expected state</param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Testing.Implementations.StateMachineSagaTestHarness`2.Exists(System.Guid,System.Func{`1,MassTransit.State},System.Nullable{System.TimeSpan})">
            <summary>
            Waits until a saga exists with the specified correlationId in the specified state
            </summary>
            <param name="correlationId"></param>
            <param name="stateSelector"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Testing.Implementations.StateMachineSagaTestHarness`2.Exists(System.Guid,MassTransit.State,System.Nullable{System.TimeSpan})">
            <summary>
            Waits until a saga exists with the specified correlationId in the specified state
            </summary>
            <param name="correlationId"></param>
            <param name="state">The expected state</param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Testing.Implementations.StateMachineSagaTestHarness`2.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Func{`1,MassTransit.State},System.Nullable{System.TimeSpan})">
            <summary>
            Waits until a saga exists with the specified correlationId in the specified state
            </summary>
            <param name="expression"></param>
            <param name="stateSelector"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Testing.Implementations.StateMachineSagaTestHarness`2.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},MassTransit.State,System.Nullable{System.TimeSpan})">
            <summary>
            Waits until a saga exists with the specified correlationId in the specified state
            </summary>
            <param name="expression"></param>
            <param name="state">The expected state</param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Testing.ISagaTestHarness`1.Exists(System.Guid,System.Nullable{System.TimeSpan})">
            <summary>
            Waits until a saga exists with the specified correlationId
            </summary>
            <param name="correlationId"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Testing.ISagaTestHarness`1.Match(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Nullable{System.TimeSpan})">
            <summary>
            Waits until at least one saga exists matching the specified filter
            </summary>
            <param name="filter"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Testing.ISagaTestHarness`1.NotExists(System.Guid,System.Nullable{System.TimeSpan})">
            <summary>
            Waits until the saga matching the specified correlationId does NOT exist
            </summary>
            <param name="correlationId"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Testing.ISagaStateMachineTestHarness`2.Exists(System.Guid,System.Func{`0,MassTransit.State},System.Nullable{System.TimeSpan})">
            <summary>
            Waits until a saga exists with the specified correlationId in the specified state
            </summary>
            <param name="correlationId"></param>
            <param name="stateSelector"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Testing.ISagaStateMachineTestHarness`2.Exists(System.Guid,MassTransit.State,System.Nullable{System.TimeSpan})">
            <summary>
            Waits until a saga exists with the specified correlationId in the specified state
            </summary>
            <param name="correlationId"></param>
            <param name="state">The expected state</param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Testing.ISagaStateMachineTestHarness`2.Exists(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},System.Func{`0,MassTransit.State},System.Nullable{System.TimeSpan})">
            <summary>
            Waits until a saga exists with the specified correlationId in the specified state
            </summary>
            <param name="expression"></param>
            <param name="stateSelector"></param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Testing.ISagaStateMachineTestHarness`2.Exists(System.Linq.Expressions.Expression{System.Func{`1,System.Boolean}},MassTransit.State,System.Nullable{System.TimeSpan})">
            <summary>
            Waits until a saga exists with the specified correlationId in the specified state
            </summary>
            <param name="expression"></param>
            <param name="state">The expected state</param>
            <param name="timeout"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Testing.ITestHarness.GetTask``1">
            <summary>
            Returns a task completion source that is automatically canceled when the test is canceled
            </summary>
            <typeparam name="T">The task type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Testing.ITestHarness.GetConsumerHarness``1">
            <summary>
            Gets the consumer harness for the specified consumer from the container. Consumer test
            harnesses are automatically added to the container when AddConsumer is used.
            </summary>
            <typeparam name="T">The consumer type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Testing.ITestHarness.GetSagaHarness``1">
            <summary>
            Gets the saga harness for the specified saga from the container. Saga test
            harnesses are automatically added to the container when AddSaga is used.
            </summary>
            <typeparam name="T">The saga type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Testing.ITestHarness.GetSagaStateMachineHarness``2">
            <summary>
            Gets the saga harness for the specified saga from the container. Saga test
            harnesses are automatically added to the container when AddSaga is used.
            </summary>
            <typeparam name="T">The saga type</typeparam>
            <typeparam name="TStateMachine">The state machine type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Testing.ITestHarness.GetConsumerEndpoint``1">
            <summary>
            Use the endpoint name formatter to get the send endpoint for the consumer type
            </summary>
            <typeparam name="T">The consumer type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Testing.ITestHarness.GetSagaEndpoint``1">
            <summary>
            Use the endpoint name formatter to get the send endpoint for the saga type
            </summary>
            <typeparam name="T">The saga type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Testing.ITestHarness.GetExecuteActivityEndpoint``2">
            <summary>
            Use the endpoint name formatter to get the execute send endpoint for the activity type
            </summary>
            <typeparam name="T">The activity type</typeparam>
            <typeparam name="TArguments">The argument type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Testing.TimelineExtensions.OutputTimeline(MassTransit.Testing.IBaseTestHarness,System.IO.TextWriter,System.Action{MassTransit.Testing.TimelineExtensions.OutputTimelineOptions})">
            <summary>
            Output a timeline of messages published, sent, and consumed by the test harness.
            </summary>
            <param name="harness"></param>
            <param name="textWriter"></param>
            <param name="configure">Configure the timeout output options</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:MassTransit.Testing.TimelineExtensions.OutputTimelineOptions.IncludeNamespace">
            <summary>
            Include the message namespace in the output. By default, it is removed to save space.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Testing.TimelineExtensions.OutputTimelineOptions.IncludeAddress">
            <summary>
            Include an additional column with the destination or input address
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Testing.TimelineExtensions.OutputTimelineOptions.Now">
            <summary>
            Forces the inactivity timeout to now so that the chart renders immediately. By default, the
            inactivity timeout is awaited.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MassTransit.GlobalTopology">
            <summary>
            This represents the global topology configuration, which is delegated to by
            all topology instances, unless for some radical reason a bus is configured
            without any topology delegation.
            YES, I hate globals, but they are serving a purpose in that these are really
            just defining the default behavior of message types, rather than actually
            behaving like the nasty evil global variables.
            </summary>
        </member>
        <member name="M:MassTransit.GlobalTopology.MarkMessageTypeNotConsumable(System.Type)">
            <summary>
            Mark the specified message type such that it will not be configured by the consume topology,
            and therefore not bound/subscribed on the message broker.
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:MassTransit.GlobalTopology.SeparatePublishFromSend">
            <summary>
            Call before configuring any topology, so that publish is handled separately
            from send. Note, this can cause some really bad things to happen with internal
            types so use with caution...
            </summary>
        </member>
        <member name="M:MassTransit.IGlobalTopology.SeparatePublishFromSend">
            <summary>
            This must be called early, methinks
            </summary>
        </member>
        <member name="M:MassTransit.IMessageCorrelationId`1.TryGetCorrelationId(`0,System.Guid@)">
            <summary>
            Get the CorrelationId from the message, if available
            </summary>
            <param name="message"></param>
            <param name="correlationId"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.TransactionContextExtensions.CreateTransactionScope(MassTransit.PipeContext)">
            <summary>
            Create a transaction scope using the transaction context (added by the TransactionFilter),
            to ensure that any transactions are carried between any threads.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.TransactionContextExtensions.CreateTransactionScope(MassTransit.PipeContext,System.TimeSpan)">
            <summary>
            Create a transaction scope using the transaction context (added by the TransactionFilter),
            to ensure that any transactions are carried between any threads.
            </summary>
            <param name="context"></param>
            <param name="scopeTimeout">The timespan after which the scope times out and aborts the transaction</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.TransactionContextExtensions.CreateTransactionScope(MassTransit.PipeContext,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)">
            <summary>
            Create a transaction scope using the transaction context (added by the TransactionFilter),
            to ensure that any transactions are carried between any threads.
            </summary>
            <param name="context"></param>
            <param name="scopeTimeout">The timespan after which the scope times out and aborts the transaction</param>
            <param name="asyncFlowOptions">Specifies whether transaction flow across thread continuations is enabled.</param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Transformation.ConsumeTransformContext`1">
            <summary>
            Sits in front of the consume context and allows the inbound message to be
            transformed.
            </summary>
            <typeparam name="TInput"></typeparam>
        </member>
        <member name="T:MassTransit.Transformation.DelegatePropertyProvider`2">
            <summary>
            Copies the input property, as-is, for the property value
            </summary>
            <typeparam name="TInput"></typeparam>
            <typeparam name="TProperty"></typeparam>
        </member>
        <member name="T:MassTransit.Transformation.PropertyTransformContext`2">
            <summary>
            For nested types transformed.
            </summary>
            <typeparam name="TMessage">The input message transform context type</typeparam>
            <typeparam name="TProperty"></typeparam>
        </member>
        <member name="T:MassTransit.Transformation.SendTransformContext`1">
            <summary>
            Sits in front of the consume context and allows the inbound message to be
            transformed.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Transformation.TransformPropertyContext`2">
            <summary>
            A transform property context, which includes the <see cref="T:MassTransit.TransformContext" />, as well as the current input property value, if present.
            </summary>
            <typeparam name="TProperty"></typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="P:MassTransit.Transformation.TransformPropertyContext`2.HasValue">
            <summary>
            True if the value is present from the source
            </summary>
        </member>
        <member name="P:MassTransit.Transformation.TransformPropertyContext`2.Value">
            <summary>
            The value
            </summary>
        </member>
        <member name="T:MassTransit.Transformation.TransformPropertyInitializer`3">
            <summary>
            Set a message property using the property provider for the property value
            </summary>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="TInput"></typeparam>
            <typeparam name="TProperty"></typeparam>
        </member>
        <member name="P:MassTransit.Transports.Components.IKillSwitch.ActivationThreshold">
            <summary>
            The minimum number of attempts before the breaker can possibly trip
            </summary>
        </member>
        <member name="P:MassTransit.Transports.Components.IKillSwitch.TripThreshold">
            <summary>
            The number of failures before opening the circuit breaker
            </summary>
        </member>
        <member name="P:MassTransit.Transports.Components.IKillSwitch.TrackingPeriod">
            <summary>
            Window duration before attempt/success/failure counts are reset
            </summary>
        </member>
        <member name="P:MassTransit.Transports.Components.IKillSwitch.RestartTimeout">
            <summary>
            The wait time before restarting
            </summary>
        </member>
        <member name="P:MassTransit.Transports.Components.IKillSwitch.ExceptionFilter">
            <summary>
            Matches the supported exceptions for the kill switch
            </summary>
        </member>
        <member name="M:MassTransit.Transports.Components.IKillSwitch.Stop(System.Exception,MassTransit.Transports.Components.IKillSwitchState)">
            <summary>
            Stop for the restart timeout
            </summary>
            <param name="exception">The exception to return when the circuit breaker is accessed</param>
            <param name="previousState"></param>
        </member>
        <member name="M:MassTransit.Transports.Components.IKillSwitch.Restart(System.Exception,MassTransit.Transports.Components.IKillSwitchState)">
            <summary>
            Restart, monitoring exception rates until they stabilize
            </summary>
            <param name="exception"></param>
            <param name="previousState"></param>
        </member>
        <member name="M:MassTransit.Transports.Components.IKillSwitch.Started(MassTransit.Transports.Components.IKillSwitchState)">
            <summary>
            Transition to the Started state, where exception rates are below the trip threshold
            </summary>
            <param name="previousState"></param>
        </member>
        <member name="T:MassTransit.Transports.Components.KillSwitch">
            <summary>
            The KillSwitch monitors a receive endpoint, stopping and restarting as necessary in the presence of exceptions.
            </summary>
        </member>
        <member name="P:MassTransit.Transports.Components.KillSwitchOptions.TrackingPeriod">
            <summary>
            The time window for tracking exceptions
            </summary>
        </member>
        <member name="P:MassTransit.Transports.Components.KillSwitchOptions.RestartTimeout">
            <summary>
            The wait time before restarting the receive endpoint
            </summary>
        </member>
        <member name="P:MassTransit.Transports.Components.KillSwitchOptions.TripThreshold">
            <summary>
            The percentage of failed messages that triggers the kill switch. Should be 0-100, but seriously like 5-10.
            </summary>
        </member>
        <member name="P:MassTransit.Transports.Components.KillSwitchOptions.ActivationThreshold">
            <summary>
            The number of messages that must be consumed before the kill switch activates.
            </summary>
        </member>
        <member name="P:MassTransit.Transports.Components.KillSwitchOptions.ExceptionFilter">
            <summary>
            By default, all exceptions are tracked. An exception filter can be specified (using <see cref="M:MassTransit.Transports.Components.KillSwitchOptions.SetExceptionFilter(System.Action{MassTransit.IExceptionConfigurator})" /> to only track
            specific exceptions.
            </summary>
        </member>
        <member name="M:MassTransit.Transports.Components.KillSwitchOptions.SetActivationThreshold(System.Int32)">
            <summary>
            The number of messages that must be consumed before the kill switch activates.
            </summary>
        </member>
        <member name="M:MassTransit.Transports.Components.KillSwitchOptions.SetTripThreshold(System.Int32)">
            <summary>
            The percentage of failed messages that triggers the kill switch. Should be 0-100, but seriously like 5-10.
            </summary>
        </member>
        <member name="M:MassTransit.Transports.Components.KillSwitchOptions.SetTripThreshold(System.Double)">
            <summary>
            The percentage of failed messages that triggers the kill switch. Should be 0-100, but seriously like 5-10.
            </summary>
        </member>
        <member name="M:MassTransit.Transports.Components.KillSwitchOptions.SetTrackingPeriod(System.TimeSpan)">
            <summary>
            The time window for tracking exceptions
            </summary>
        </member>
        <member name="M:MassTransit.Transports.Components.KillSwitchOptions.SetTrackingPeriod(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            The time window for tracking exceptions
            </summary>
        </member>
        <member name="M:MassTransit.Transports.Components.KillSwitchOptions.SetRestartTimeout(System.TimeSpan)">
            <summary>
            The wait time before restarting the receive endpoint
            </summary>
        </member>
        <member name="M:MassTransit.Transports.Components.KillSwitchOptions.SetRestartTimeout(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            The wait time before restarting the receive endpoint
            </summary>
        </member>
        <member name="M:MassTransit.Transports.Components.KillSwitchOptions.SetExceptionFilter(System.Action{MassTransit.IExceptionConfigurator})">
            <summary>
            By default, all exceptions are tracked. An exception filter can be configured to only track specific exceptions.
            </summary>
        </member>
        <member name="T:MassTransit.Transports.ConsumeSendEndpoint">
            <summary>
            Intercepts the ISendEndpoint and makes it part of the current consume context
            </summary>
        </member>
        <member name="T:MassTransit.Transports.ReceiveEndpointContext">
            <summary>
            The context of a receive endpoint
            </summary>
        </member>
        <member name="P:MassTransit.Transports.ReceiveEndpointContext.DependenciesReady">
            <summary>
            Task completed when dependencies are ready
            </summary>
        </member>
        <member name="P:MassTransit.Transports.ReceiveEndpointContext.DependentsCompleted">
            <summary>
            Task completed when dependants are completed
            </summary>
        </member>
        <member name="P:MassTransit.Transports.ReceiveEndpointContext.PublishFaults">
            <summary>
            If true (the default), faults should be published when no ResponseAddress or FaultAddress are present.
            </summary>
        </member>
        <member name="M:MassTransit.Transports.ReceiveEndpointContext.ConvertException(System.Exception,System.String)">
            <summary>
            Convert an unknown exception to a <see cref="T:MassTransit.ConnectionException" />, so that it can be used by
            the transport retry policy.
            </summary>
            <param name="exception">The original exception</param>
            <param name="message">A contextual message describing when the exception occurred</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Transports.ReceiveEndpointContext.Reset">
            <summary>
            Reset the receive endpoint, which should clear any caches, etc.
            </summary>
        </member>
        <member name="M:MassTransit.Transports.ReceiveEndpointContext.AddConsumeAgent(MassTransit.IAgent)">
            <summary>
            Add an consume-side agent, which should be stopped during shutdown
            </summary>
            <param name="agent"></param>
        </member>
        <member name="M:MassTransit.Transports.ReceiveEndpointContext.AddSendAgent(MassTransit.IAgent)">
            <summary>
            Add an agent, which should be stopped during shutdown after consume/send agents have been stopped
            </summary>
            <param name="agent"></param>
        </member>
        <member name="P:MassTransit.Transports.DeliveryMetrics.DeliveryCount">
            <summary>
            The number of messages consumed by the consumer
            </summary>
        </member>
        <member name="P:MassTransit.Transports.DeliveryMetrics.ConcurrentDeliveryCount">
            <summary>
            The highest concurrent message count that was received by the consumer
            </summary>
        </member>
        <member name="P:MassTransit.Transports.Fabric.DeliveryContext`1.Message">
            <summary>
            The package being delivered
            </summary>
        </member>
        <member name="P:MassTransit.Transports.Fabric.DeliveryContext`1.RoutingKey">
            <summary>
            Optional routing key, which is used by direct/topic exchanges
            </summary>
        </member>
        <member name="P:MassTransit.Transports.Fabric.DeliveryContext`1.EnqueueTime">
            <summary>
            Optional enqueue time, which can be used to delay messages
            </summary>
        </member>
        <member name="P:MassTransit.Transports.Fabric.DeliveryContext`1.ReceiverId">
            <summary>
            If specified, targets a specific receiver in the message fabric
            </summary>
        </member>
        <member name="M:MassTransit.Transports.Fabric.DeliveryContext`1.WasAlreadyDelivered(MassTransit.Transports.Fabric.IMessageSink{`0})">
            <summary>
            Should this delivery occur, or has is already been delivered
            </summary>
            <param name="sink"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Transports.Fabric.DeliveryContext`1.Delivered(MassTransit.Transports.Fabric.IMessageSink{`0})">
            <summary>
            Marks the sink as delivered for this dispatch
            </summary>
            <param name="sink"></param>
        </member>
        <member name="T:MassTransit.Transports.Fabric.IMessageReceiver`1">
            <summary>
            Receives messages from a queue
            </summary>
        </member>
        <member name="P:MassTransit.Transports.Fabric.QueueMetric.DeliveryCount">
            <summary>
            Total number of messages delivered
            </summary>
        </member>
        <member name="P:MassTransit.Transports.Fabric.QueueMetric.ActiveDeliveryCount">
            <summary>
            Number of messages currently being delivered
            </summary>
        </member>
        <member name="P:MassTransit.Transports.Fabric.QueueMetric.DelayedMessageCount">
            <summary>
            Number of messages currently delayed before entering the queue
            </summary>
        </member>
        <member name="P:MassTransit.Transports.Fabric.QueueMetric.MessageCount">
            <summary>
            Number of messages currently in the queue (not including active messages)
            </summary>
        </member>
        <member name="P:MassTransit.Transports.HostHandle.Ready">
            <summary>
            A task which can be awaited to know when the host is ready
            </summary>
        </member>
        <member name="M:MassTransit.Transports.HostHandle.Stop(System.Threading.CancellationToken)">
            <summary>
            Close the Host, shutting it down for good.
            </summary>
            <returns></returns>
        </member>
        <member name="P:MassTransit.Transports.IBusInstance`1.BusInstance">
            <summary>
            The original bus instance (since this is wrapped inside a multi-bus instance
            </summary>
        </member>
        <member name="M:MassTransit.Transports.IReceiveEndpointCollection.Add(System.String,MassTransit.Transports.ReceiveEndpoint)">
            <summary>
            Add an endpoint to the collection
            </summary>
            <param name="endpointName"></param>
            <param name="endpoint"></param>
        </member>
        <member name="M:MassTransit.Transports.IReceiveEndpointCollection.StartEndpoints(System.Threading.CancellationToken)">
            <summary>
            Start all endpoints in the collection which have not been started, and return the handles
            for those endpoints.
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Transports.IReceiveEndpointCollection.Start(System.String,System.Threading.CancellationToken)">
            <summary>
            Start a new receive endpoint
            </summary>
            <param name="endpointName"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Transports.IReceiveEndpointDispatcher.Dispatch(System.Byte[],System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Threading.CancellationToken,System.Object[])">
            <summary>
            Handles the message based upon the endpoint configuration
            </summary>
            <param name="body">The message body</param>
            <param name="headers">The message headers</param>
            <param name="cancellationToken"></param>
            <param name="payloads">One or more payloads to add to the receive context</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Transports.IReceiveEndpointDispatcherFactory.CreateReceiver(System.String)">
            <summary>
            Creates a single receiver with all configured consumers, sagas, etc.
            Note that if any other receivers are created for specific consumers or sagas, those consumers and sagas will
            not be included in this receiver as they've already been configured.
            </summary>
            <param name="queueName"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Transports.IReceivePipeDispatcher">
            <summary>
            Dispatches a prepared <see cref="T:MassTransit.ReceiveContext" /> to a <see cref="T:MassTransit.Transports.IReceivePipe" />.
            </summary>
        </member>
        <member name="M:MassTransit.Transports.IReceiveTransport.Start">
            <summary>
            Start receiving on a transport, sending messages to the specified pipe.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Transports.ISendEndpointCache`1.GetSendEndpoint(`0,MassTransit.Transports.SendEndpointFactory{`0})">
            <summary>
            Return a SendEndpoint from the cache, using the factory to create it if it doesn't exist in the cache.
            </summary>
            <param name="key">The key for the endpoint</param>
            <param name="factory"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Transports.JsonTransportHeaders">
            <summary>
            The context headers are sourced from the IContextHeaderProvider, with the use of a Json deserializer
            to convert data types to objects as required. If the original headers are Json objects, those headers
            are deserialized as well
            </summary>
        </member>
        <member name="T:MassTransit.Transports.ReceiveEndpoint">
            <summary>
            A receive endpoint is called by the receive transport to push messages to consumers.
            The receive endpoint is where the initial deserialization occurs, as well as any additional
            filters on the receive context.
            </summary>
        </member>
        <member name="M:MassTransit.Transports.ReceiveEndpointLoggingExtensions.LogSkipped(MassTransit.ReceiveContext)">
            <summary>
            Log a skipped message that was moved to the dead-letter queue
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:MassTransit.Transports.ReceiveEndpointLoggingExtensions.LogMoved(MassTransit.ReceiveContext,System.String,System.String)">
            <summary>
            Log a moved message from one endpoint to the destination endpoint address
            </summary>
            <param name="context"></param>
            <param name="destination"></param>
            <param name="reason"> </param>
        </member>
        <member name="M:MassTransit.Transports.ReceiveEndpointLoggingExtensions.LogConsumed``1(MassTransit.ConsumeContext{``0},System.TimeSpan,System.String)">
            <summary>
            Log a consumed message
            </summary>
            <param name="context"></param>
            <param name="duration"></param>
            <param name="consumerType"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MassTransit.Transports.ReceiveLockContext">
            <summary>
            Encapsulates a transport lock
            </summary>
        </member>
        <member name="M:MassTransit.Transports.ReceiveLockContext.Complete">
            <summary>
            Called to complete the message
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Transports.ReceiveLockContext.Faulted(System.Exception)">
            <summary>
            Called if the message was faulted. This method should NOT throw an exception.
            </summary>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Transports.ReceiveLockContext.ValidateLockStatus">
            <summary>
            Validate that the lock is still valid
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Transports.ReceiveTransport`1.Start">
            <summary>
            Start the receive transport, returning a Task that can be awaited to signal the transport has
            completely shutdown once the cancellation token is cancelled.
            </summary>
            <returns>A task that is completed once the transport is shut down</returns>
        </member>
        <member name="T:MassTransit.Transports.ReceiveTransportHandle">
            <summary>
            A handle to an active transport
            </summary>
        </member>
        <member name="M:MassTransit.Transports.ReceiveTransportHandle.Stop(System.Threading.CancellationToken)">
            <summary>
            Stop the transport, releasing any resources associated with the endpoint
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Transports.SendEndpointCache`1">
            <summary>
            Caches SendEndpoint instances by address (ignoring the query string entirely, case insensitive)
            </summary>
        </member>
        <member name="T:MassTransit.Transports.SendEndpointFactory`1">
            <summary>
            Factory method for a send endpoint
            </summary>
            <param name="key"></param>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="T:MassTransit.Transports.SendEndpointProxy">
            <summary>
            Generalized proxy for ISendEndpoint to intercept pipe/context
            </summary>
        </member>
        <member name="P:MassTransit.Transports.SendTransportContext.LogContext">
            <summary>
            The LogContext used for sending transport messages, to ensure proper activity filtering
            </summary>
        </member>
        <member name="M:MassTransit.Transports.SendTransportContext.CreateSendContext``1(``0,MassTransit.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Create the send context without the presence of a transport, but in a way that it can be used by the transport
            </summary>
            <param name="message"></param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Transports.SendTransportContext`1.CreateSendContext``1(`0,``0,MassTransit.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Create the send
            </summary>
            <param name="context">The send transport context, which may be used to create the underlying send context</param>
            <param name="message">The message being sent</param>
            <param name="pipe">The developer supplied pipe to configure the send context</param>
            <param name="cancellationToken"></param>
            <typeparam name="T">The message type</typeparam>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Util.AssemblyTypeCache">
            <summary>
            Caches assemblies and assembly types to avoid repeated assembly scanning
            </summary>
        </member>
        <member name="M:MassTransit.Util.AssemblyTypeCache.Clear">
            <summary>
            Remove all cached assemblies, essentially forcing a reload of any new assembly scans
            </summary>
        </member>
        <member name="M:MassTransit.Util.AssemblyTypeCache.ThrowIfAnyTypeScanFailures">
            <summary>
            Use to assert that there were no failures in type scanning when trying to find the exported types
            from any Assembly
            </summary>
        </member>
        <member name="P:MassTransit.Util.ChannelExecutor.Future`1.Completed">
            <summary>
            The post-execution result, which can be awaited
            </summary>
        </member>
        <member name="P:MassTransit.Util.ChannelExecutor.SynchronousFuture`1.Completed">
            <summary>
            The post-execution result, which can be awaited
            </summary>
        </member>
        <member name="M:MassTransit.Util.DisposeAsyncExtensions.DisposeAsync``1(System.Exception,System.Func{System.Threading.Tasks.Task})">
            <summary>
            Invoke the dispose callback, and then rethrow the exception
            </summary>
            <param name="exception"></param>
            <param name="disposeCallback"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:MassTransit.MassTransitException"></exception>
        </member>
        <member name="M:MassTransit.Util.DisposeAsyncExtensions.DisposeAsync``1(System.Exception,System.Func{System.Threading.Tasks.ValueTask})">
            <summary>
            Invoke the dispose callback, and then rethrow the exception
            </summary>
            <param name="exception"></param>
            <param name="disposeCallback"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:MassTransit.MassTransitException"></exception>
        </member>
        <member name="T:MassTransit.Util.Recycle`1">
            <summary>
            Recycles a supervisor once it is stopped, replacing it with a new one
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MassTransit.Util.RollingTimer">
            <summary>
            Thread safe timer that allows efficient restarts by rolling the due time further into the future.
            Will roll over once every 43~ days of continuous runtime without a restart.
            </summary>
        </member>
        <member name="M:MassTransit.Util.RollingTimer.Start">
            <summary>
            Creates a new timer and starts it.
            </summary>
        </member>
        <member name="M:MassTransit.Util.RollingTimer.Stop">
            <summary>
            Stops and disposes the existing timer.
            </summary>
        </member>
        <member name="M:MassTransit.Util.RollingTimer.Restart">
            <summary>
            Restarts the existing timer, creates and starts a new timer if it does not exist.
            </summary>
        </member>
        <member name="M:MassTransit.Util.RollingTimer.Set">
            <summary>
            Sets the timer as triggered
            </summary>
        </member>
        <member name="M:MassTransit.Util.RollingTimer.Reset">
            <summary>
            Resets the trigger status
            </summary>
        </member>
        <member name="P:MassTransit.Util.Scanning.IAssemblyScanner.Description">
            <summary>
            Optional user-supplied diagnostic description of this scanning operation
            </summary>
        </member>
        <member name="M:MassTransit.Util.Scanning.IAssemblyScanner.Assembly(System.Reflection.Assembly)">
            <summary>
            Add an Assembly to the scanning operation
            </summary>
            <param name="assembly"></param>
        </member>
        <member name="M:MassTransit.Util.Scanning.IAssemblyScanner.Assembly(System.String)">
            <summary>
            Add an Assembly by name to the scanning operation
            </summary>
            <param name="assemblyName"></param>
        </member>
        <member name="M:MassTransit.Util.Scanning.IAssemblyScanner.AssemblyContainingType``1">
            <summary>
            Add the Assembly that contains type T to the scanning operation
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MassTransit.Util.Scanning.IAssemblyScanner.AssemblyContainingType(System.Type)">
            <summary>
            Add the Assembly that contains type to the scanning operation
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:MassTransit.Util.Scanning.IAssemblyScanner.Exclude(System.Func{System.Type,System.Boolean})">
            <summary>
            Exclude types that match the Predicate from being scanned
            </summary>
            <param name="exclude"></param>
        </member>
        <member name="M:MassTransit.Util.Scanning.IAssemblyScanner.ExcludeNamespace(System.String)">
            <summary>
            Exclude all types in this nameSpace or its children from the scanning operation
            </summary>
            <param name="nameSpace"></param>
        </member>
        <member name="M:MassTransit.Util.Scanning.IAssemblyScanner.ExcludeNamespaceContainingType``1">
            <summary>
            Exclude all types in this nameSpace or its children from the scanning operation
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MassTransit.Util.Scanning.IAssemblyScanner.Include(System.Func{System.Type,System.Boolean})">
            <summary>
            Only include types matching the Predicate in the scanning operation. You can
            use multiple Include() calls in a single scanning operation
            </summary>
            <param name="predicate"></param>
        </member>
        <member name="M:MassTransit.Util.Scanning.IAssemblyScanner.IncludeNamespace(System.String)">
            <summary>
            Only include types from this nameSpace or its children in the scanning operation.  You can
            use multiple Include() calls in a single scanning operation
            </summary>
            <param name="nameSpace"></param>
        </member>
        <member name="M:MassTransit.Util.Scanning.IAssemblyScanner.IncludeNamespaceContainingType``1">
            <summary>
            Only include types from this nameSpace or its children in the scanning operation.  You can
            use multiple Include() calls in a single scanning operation
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MassTransit.Util.Scanning.IAssemblyScanner.ExcludeType``1">
            <summary>
            Exclude this specific type from the scanning operation
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MassTransit.Util.TaskUtil.Default``1">
            <summary>
            Returns a completed task with the default value for <typeparamref name="T" />
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Util.TaskUtil.Faulted``1(System.Exception)">
            <summary>
            Returns a faulted task with the specified exception (creating using a <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />)
            </summary>
            <param name="exception"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Util.TaskUtil.Cancelled``1">
            <summary>
            Returns a cancelled task for the specified type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Util.TaskUtil.GetTask``1(System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Creates a new <see cref="T:System.Threading.Tasks.TaskCompletionSource`1" />, and ensures the TaskCreationOptions.RunContinuationsAsynchronously
            flag is specified (if available).
            </summary>
            <param name="options"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Util.TaskUtil.GetTask(System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Creates a new TaskCompletionSource and ensures the TaskCreationOptions.RunContinuationsAsynchronously
            flag is specified (if available).
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Util.TaskUtil.RegisterTask(System.Threading.CancellationToken,System.Threading.Tasks.Task@)">
            <summary>
            Register a callback on the <paramref name="cancellationToken" /> which completes the resulting task.
            </summary>
            <param name="cancellationToken"></param>
            <param name="cancelTask"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:MassTransit.Util.TaskUtil.SetCompleted(System.Threading.Tasks.TaskCompletionSource{System.Boolean})">
            <summary>
            Sets the source to completed using TrySetResult
            </summary>
            <param name="source"></param>
        </member>
        <member name="T:MassTransit.Util.TextTable">
            <summary>
            Generates a monospaced text table, useful in trace output formats. Shamelessly inspired by ConsoleTables
            https://github.com/khalidabuhakmeh/ConsoleTables
            </summary>
        </member>
        <member name="M:MassTransit.Util.TextTable.Create``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create a table from an existing enumerable collection
            </summary>
            <param name="rows">The collection</param>
            <typeparam name="T">The collection element type</typeparam>
            <returns></returns>
        </member>
        <member name="P:MassTransit.Util.TextTableOptions.Columns">
            <summary>
            The column names
            </summary>
        </member>
        <member name="P:MassTransit.Util.TextTableOptions.EnableCount">
            <summary>
            Include the row count at the end of the table
            </summary>
        </member>
        <member name="P:MassTransit.Util.TextTableOptions.NumberAlignment">
            <summary>
            Specify the number alignment (defaults to left)
            </summary>
        </member>
        <member name="P:MassTransit.Util.TextTableOptions.Out">
            <summary>
            The <see cref="T:System.IO.TextWriter" /> to write to. Defaults to <see cref="P:System.Console.Out" />.
            </summary>
        </member>
        <member name="T:MassTransit.Util.TypeSet">
            <summary>
            Access to a set of exported .Net Type's as defined in a scanning operation
            </summary>
        </member>
        <member name="P:MassTransit.Util.TypeSet.Records">
            <summary>
            For diagnostic purposes, explains which assemblies were
            scanned as part of this TypeSet, including failures
            </summary>
        </member>
        <member name="M:MassTransit.Util.TypeSet.FindTypes(MassTransit.Util.TypeClassification)">
            <summary>
            Find any types in this TypeSet that match any combination of the TypeClassification enumeration values
            </summary>
            <param name="classification"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Util.TypeSet.AllTypes">
            <summary>
            Returns all the types in this TypeSet
            </summary>
            <returns></returns>
        </member>
        <member name="T:Automatonymous.Activity`1">
            <summary>
            An activity is part of a behavior that is executed in order
            </summary>
            <typeparam name="TSaga"></typeparam>
        </member>
        <member name="T:Automatonymous.Behavior`1">
            <summary>
            A behavior is a chain of activities invoked by a state
            </summary>
            <typeparam name="TSaga">The state type</typeparam>
        </member>
        <member name="T:Automatonymous.Behavior`2">
            <summary>
            A behavior is a chain of activities invoked by a state
            </summary>
            <typeparam name="TSaga">The state type</typeparam>
            <typeparam name="TMessage">The data type of the behavior</typeparam>
        </member>
    </members>
</doc>
