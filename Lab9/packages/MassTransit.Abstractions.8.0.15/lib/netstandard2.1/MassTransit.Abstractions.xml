<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MassTransit.Abstractions</name>
    </assembly>
    <members>
        <member name="T:MassTransit.ConfigureConsumeTopologyAttribute">
            <summary>
            Specify whether the message type should be used to configure the broker topology for the consumer.
            if configured. Types will this attribute will not have their matching topic/exchange bound to the
            receive endpoint queue.
            </summary>
        </member>
        <member name="M:MassTransit.ConfigureConsumeTopologyAttribute.#ctor(System.Boolean)">
            <param name="configureConsumeTopology">When false, the consume topology will not be configured</param>
        </member>
        <member name="T:MassTransit.EntityNameAttribute">
            <summary>
            Specify the EntityName used for this message contract
            if configured.
            </summary>
        </member>
        <member name="M:MassTransit.EntityNameAttribute.#ctor(System.String)">
             <summary>
            
             </summary>
             <param name="entityName">The entity name to use for the message type</param>
        </member>
        <member name="T:MassTransit.ExcludeFromConfigureEndpointsAttribute">
            <summary>
            When added to a consuming type (consumer, saga, activity, etc), prevents
            MassTransit from configuring endpoint for it when ConfigureEndpoints called
            </summary>
        </member>
        <member name="T:MassTransit.ExcludeFromImplementedTypesAttribute">
            <summary>
            Typically added to base messages types, such as IMessage, IEvent, etc.
            so that scoped filters are not created on the message type.
            </summary>
        </member>
        <member name="T:MassTransit.ExcludeFromTopologyAttribute">
            <summary>
            When added to a message type (class, record, or interface), prevents
            MassTransit from creating an exchange or topic on the broker for the message
            type when it is an inherited type (such as IMessage, IEvent, etc.).
            </summary>
        </member>
        <member name="T:MassTransit.FaultEntityNameAttribute">
            <summary>
            Specify the EntityName used for the Fault version of this message contract, overriding the configured <see cref="T:MassTransit.IEntityNameFormatter" />
            if configured.
            </summary>
        </member>
        <member name="M:MassTransit.FaultEntityNameAttribute.#ctor(System.String)">
            <summary>
            </summary>
            <param name="entityName">The entity name to use for the faulted message type</param>
        </member>
        <member name="T:MassTransit.IndexedAttribute">
            <summary>
            Specifies a property that should be indexed by the in-memory saga repository
            </summary>
        </member>
        <member name="T:MassTransit.MessageUrnAttribute">
            <summary>
            Specify the message type name for this message type
            </summary>
        </member>
        <member name="M:MassTransit.MessageUrnAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            </summary>
            <param name="urn">The urn value to use for this message type.</param>
            <param name="useDefaultPrefix">Prefixes with default scheme and namespace if true.</param>
        </member>
        <member name="M:MassTransit.BatchProduceExtensions.SendBatch``1(MassTransit.ISendEndpoint,System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Send a message batch
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="endpoint">The destination endpoint</param>
            <param name="messages"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.BatchProduceExtensions.SendBatch``1(MassTransit.ISendEndpoint,System.Collections.Generic.IEnumerable{``0},MassTransit.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="endpoint">The destination endpoint</param>
            <param name="messages"></param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.BatchProduceExtensions.SendBatch``1(MassTransit.ISendEndpoint,System.Collections.Generic.IEnumerable{``0},System.Action{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Send a message batch
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="endpoint">The destination endpoint</param>
            <param name="messages"></param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.BatchProduceExtensions.SendBatch``1(MassTransit.ISendEndpoint,System.Collections.Generic.IEnumerable{``0},System.Func{MassTransit.SendContext{``0},System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Send a message batch
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="endpoint">The destination endpoint</param>
            <param name="messages"></param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.BatchProduceExtensions.SendBatch(MassTransit.ISendEndpoint,System.Collections.Generic.IEnumerable{System.Object},System.Threading.CancellationToken)">
            <summary>
            Send a message batch
            </summary>
            <param name="endpoint">The destination endpoint</param>
            <param name="messages"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.BatchProduceExtensions.SendBatch(MassTransit.ISendEndpoint,System.Collections.Generic.IEnumerable{System.Object},MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Send a message batch
            </summary>
            <param name="endpoint">The destination endpoint</param>
            <param name="messages"></param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.BatchProduceExtensions.SendBatch(MassTransit.ISendEndpoint,System.Collections.Generic.IEnumerable{System.Object},System.Action{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Send a message batch
            </summary>
            <param name="endpoint">The destination endpoint</param>
            <param name="messages"></param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.BatchProduceExtensions.SendBatch(MassTransit.ISendEndpoint,System.Collections.Generic.IEnumerable{System.Object},System.Func{MassTransit.SendContext,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Send a message batch
            </summary>
            <param name="endpoint">The destination endpoint</param>
            <param name="messages"></param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.BatchProduceExtensions.SendBatch(MassTransit.ISendEndpoint,System.Collections.Generic.IEnumerable{System.Object},System.Type,System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <param name="endpoint">The destination endpoint</param>
            <param name="messages"></param>
            <param name="messageType"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.BatchProduceExtensions.SendBatch(MassTransit.ISendEndpoint,System.Collections.Generic.IEnumerable{System.Object},System.Type,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <param name="endpoint">The destination endpoint</param>
            <param name="messages"></param>
            <param name="messageType"></param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.BatchProduceExtensions.SendBatch(MassTransit.ISendEndpoint,System.Collections.Generic.IEnumerable{System.Object},System.Type,System.Action{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <param name="endpoint">The destination endpoint</param>
            <param name="messages"></param>
            <param name="messageType"></param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.BatchProduceExtensions.SendBatch(MassTransit.ISendEndpoint,System.Collections.Generic.IEnumerable{System.Object},System.Type,System.Func{MassTransit.SendContext,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <param name="endpoint">The destination endpoint</param>
            <param name="messages"></param>
            <param name="messageType"></param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.BatchProduceExtensions.PublishBatch``1(MassTransit.IPublishEndpoint,System.Collections.Generic.IEnumerable{``0},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="endpoint">The destination endpoint</param>
            <param name="messages"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.BatchProduceExtensions.PublishBatch``1(MassTransit.IPublishEndpoint,System.Collections.Generic.IEnumerable{``0},MassTransit.IPipe{MassTransit.PublishContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Publish a message batch
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="endpoint">The destination endpoint</param>
            <param name="messages"></param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Publish is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.BatchProduceExtensions.PublishBatch``1(MassTransit.IPublishEndpoint,System.Collections.Generic.IEnumerable{``0},System.Action{MassTransit.PublishContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Publish a message batch
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="endpoint">The destination endpoint</param>
            <param name="messages"></param>
            <param name="callback">The callback for the publish context</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Publish is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.BatchProduceExtensions.PublishBatch``1(MassTransit.IPublishEndpoint,System.Collections.Generic.IEnumerable{``0},System.Func{MassTransit.PublishContext{``0},System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Publish a message batch
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="endpoint">The destination endpoint</param>
            <param name="messages"></param>
            <param name="callback">The callback for the publish context</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Publish is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.BatchProduceExtensions.PublishBatch(MassTransit.IPublishEndpoint,System.Collections.Generic.IEnumerable{System.Object},System.Threading.CancellationToken)">
            <summary>
            Publish a message batch
            </summary>
            <param name="endpoint">The destination endpoint</param>
            <param name="messages"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Publish is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.BatchProduceExtensions.PublishBatch(MassTransit.IPublishEndpoint,System.Collections.Generic.IEnumerable{System.Object},MassTransit.IPipe{MassTransit.PublishContext},System.Threading.CancellationToken)">
            <summary>
            Publish a message batch
            </summary>
            <param name="endpoint">The destination endpoint</param>
            <param name="messages"></param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Publish is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.BatchProduceExtensions.PublishBatch(MassTransit.IPublishEndpoint,System.Collections.Generic.IEnumerable{System.Object},System.Action{MassTransit.PublishContext},System.Threading.CancellationToken)">
            <summary>
            Publish a message batch
            </summary>
            <param name="endpoint">The destination endpoint</param>
            <param name="messages"></param>
            <param name="callback">The callback for the publish context</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Publish is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.BatchProduceExtensions.PublishBatch(MassTransit.IPublishEndpoint,System.Collections.Generic.IEnumerable{System.Object},System.Func{MassTransit.PublishContext,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Publish a message batch
            </summary>
            <param name="endpoint">The destination endpoint</param>
            <param name="messages"></param>
            <param name="callback">The callback for the publish context</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Publish is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.BatchProduceExtensions.PublishBatch(MassTransit.IPublishEndpoint,System.Collections.Generic.IEnumerable{System.Object},System.Type,System.Threading.CancellationToken)">
            <summary>
            Publish a message batch
            </summary>
            <param name="endpoint">The destination endpoint</param>
            <param name="messages"></param>
            <param name="messageType"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Publish is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.BatchProduceExtensions.PublishBatch(MassTransit.IPublishEndpoint,System.Collections.Generic.IEnumerable{System.Object},System.Type,MassTransit.IPipe{MassTransit.PublishContext},System.Threading.CancellationToken)">
            <summary>
            Publish a message batch
            </summary>
            <param name="endpoint">The destination endpoint</param>
            <param name="messages"></param>
            <param name="messageType"></param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Publish is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.BatchProduceExtensions.PublishBatch(MassTransit.IPublishEndpoint,System.Collections.Generic.IEnumerable{System.Object},System.Type,System.Action{MassTransit.PublishContext},System.Threading.CancellationToken)">
            <summary>
            Publish a message batch
            </summary>
            <param name="endpoint">The destination endpoint</param>
            <param name="messages"></param>
            <param name="messageType"></param>
            <param name="callback">The callback for the publish context</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Publish is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.BatchProduceExtensions.PublishBatch(MassTransit.IPublishEndpoint,System.Collections.Generic.IEnumerable{System.Object},System.Type,System.Func{MassTransit.PublishContext,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Publish a message batch
            </summary>
            <param name="endpoint">The destination endpoint</param>
            <param name="messages"></param>
            <param name="messageType"></param>
            <param name="callback">The callback for the publish context</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Publish is acknowledged by the broker</returns>
        </member>
        <member name="T:MassTransit.BusHandle">
            <summary>
            Returned once a bus has been started. Should call Stop or Dispose before the process
            can exit.
            </summary>
        </member>
        <member name="P:MassTransit.BusHandle.Ready">
            <summary>
            A task which can be awaited to know when the bus is ready and all of the receive endpoints have reported ready.
            </summary>
        </member>
        <member name="M:MassTransit.BusHandle.StopAsync(System.Threading.CancellationToken)">
            <summary>
            Stop the bus and all receiving endpoints on the bus. Note that cancelling the Stop
            operation may leave the bus and/or one or more receive endpoints in an indeterminate
            state.
            </summary>
            <param name="cancellationToken">Cancel the stop operation in progress</param>
            <returns>An awaitable task that is completed once everything is stopped</returns>
        </member>
        <member name="T:MassTransit.BusInstance`1">
            <summary>
            When configuring multiple bus instances in a single container (MultiBus), this base class should be used
            as a the base for the additional bus instance type.
            </summary>
            <typeparam name="TBus">The specific bus interface type for this bus instance</typeparam>
        </member>
        <member name="T:MassTransit.ClientFactoryContext">
            <summary>
            The client factory context, which contains multiple interfaces and properties used by clients
            </summary>
        </member>
        <member name="P:MassTransit.ClientFactoryContext.DefaultTimeout">
            <summary>
            Default timeout for requests
            </summary>
        </member>
        <member name="P:MassTransit.ClientFactoryContext.ResponseAddress">
            <summary>
            The address used for responses to messages sent by this client
            </summary>
        </member>
        <member name="M:MassTransit.ClientFactoryContext.GetRequestEndpoint``1(MassTransit.ConsumeContext)">
            <summary>
            Returns an endpoint to which requests are sent
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ClientFactoryContext.GetRequestEndpoint``1(System.Uri,MassTransit.ConsumeContext)">
            <summary>
            Returns an endpoint to which requests are sent
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:MassTransit.IClientFactory">
            <summary>
            The client factory is used to create request clients
            </summary>
        </member>
        <member name="M:MassTransit.IClientFactory.CreateRequest``1(``0,System.Threading.CancellationToken,MassTransit.RequestTimeout)">
            <summary>
            Create a request, using the message specified. If a destinationAddress for the message cannot be found, the message will be published.
            </summary>
            <param name="message"></param>
            <param name="cancellationToken"></param>
            <param name="timeout"></param>
            <typeparam name="T">The message type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IClientFactory.CreateRequest``1(System.Uri,``0,System.Threading.CancellationToken,MassTransit.RequestTimeout)">
            <summary>
            Create a request, using the message specified. If a destinationAddress for the message cannot be found, the message will be published.
            </summary>
            <param name="destinationAddress">The destination service address</param>
            <param name="message"></param>
            <param name="cancellationToken"></param>
            <param name="timeout"></param>
            <typeparam name="T">The message type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IClientFactory.CreateRequest``1(MassTransit.ConsumeContext,``0,System.Threading.CancellationToken,MassTransit.RequestTimeout)">
            <summary>
            Create a request, using the message specified. If a destinationAddress for the message cannot be found, the message will be published.
            </summary>
            <param name="consumeContext">The consumeContext currently being processed</param>
            <param name="message"></param>
            <param name="cancellationToken"></param>
            <param name="timeout"></param>
            <typeparam name="T">The message type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IClientFactory.CreateRequest``1(MassTransit.ConsumeContext,System.Uri,``0,System.Threading.CancellationToken,MassTransit.RequestTimeout)">
            <summary>
            Create a request, using the message specified. If a destinationAddress for the message cannot be found, the message will be published.
            </summary>
            <param name="consumeContext">The consumeContext currently being processed</param>
            <param name="destinationAddress">The destination service address</param>
            <param name="message"></param>
            <param name="cancellationToken"></param>
            <param name="timeout"></param>
            <typeparam name="T">The message type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IClientFactory.CreateRequest``1(System.Object,System.Threading.CancellationToken,MassTransit.RequestTimeout)">
            <summary>
            Create a request, using the message specified. If a destinationAddress for the message cannot be found, the message will be published.
            </summary>
            <param name="values">The values to initialize the message</param>
            <param name="cancellationToken"></param>
            <param name="timeout"></param>
            <typeparam name="T">The message type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IClientFactory.CreateRequest``1(System.Uri,System.Object,System.Threading.CancellationToken,MassTransit.RequestTimeout)">
            <summary>
            Create a request, using the message specified. If a destinationAddress for the message cannot be found, the message will be published.
            </summary>
            <param name="destinationAddress">The destination service address</param>
            <param name="values">The values to initialize the message</param>
            <param name="cancellationToken"></param>
            <param name="timeout"></param>
            <typeparam name="T">The message type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IClientFactory.CreateRequest``1(MassTransit.ConsumeContext,System.Object,System.Threading.CancellationToken,MassTransit.RequestTimeout)">
            <summary>
            Create a request, using the message specified. If a destinationAddress for the message cannot be found, the message will be published.
            </summary>
            <param name="consumeContext">The consumeContext currently being processed</param>
            <param name="values">The values to initialize the message</param>
            <param name="cancellationToken"></param>
            <param name="timeout"></param>
            <typeparam name="T">The message type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IClientFactory.CreateRequest``1(MassTransit.ConsumeContext,System.Uri,System.Object,System.Threading.CancellationToken,MassTransit.RequestTimeout)">
            <summary>
            Create a request, using the message specified. If a destinationAddress for the message cannot be found, the message will be published.
            </summary>
            <param name="consumeContext">The consumeContext currently being processed</param>
            <param name="destinationAddress">The destination service address</param>
            <param name="values">The values to initialize the message</param>
            <param name="cancellationToken"></param>
            <param name="timeout"></param>
            <typeparam name="T">The message type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IClientFactory.CreateRequestClient``1(MassTransit.RequestTimeout)">
            <summary>
            Create a request client for the specified message type
            </summary>
            <param name="timeout"></param>
            <typeparam name="T">The message type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IClientFactory.CreateRequestClient``1(MassTransit.ConsumeContext,MassTransit.RequestTimeout)">
            <summary>
            Create a request client for the specified message type
            </summary>
            <param name="consumeContext">The consumeContext currently being processed</param>
            <param name="timeout"></param>
            <typeparam name="T">The message type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IClientFactory.CreateRequestClient``1(System.Uri,MassTransit.RequestTimeout)">
            <summary>
            Create a request client, using the specified service address
            </summary>
            <param name="destinationAddress">The destination service address</param>
            <param name="timeout">The default timeout for requests</param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IClientFactory.CreateRequestClient``1(MassTransit.ConsumeContext,System.Uri,MassTransit.RequestTimeout)">
            <summary>
            Create a request client, using the specified service address
            </summary>
            <param name="consumeContext">The consumeContext currently being processed</param>
            <param name="destinationAddress">The destination service address</param>
            <param name="timeout">The default timeout for requests</param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:MassTransit.IRequestClient`1">
            <summary>
            A request client, which is used to send a request, as well as get one or more response types from that request.
            </summary>
            <typeparam name="TRequest">The request type</typeparam>
        </member>
        <member name="M:MassTransit.IRequestClient`1.Create(`0,System.Threading.CancellationToken,MassTransit.RequestTimeout)">
            <summary>
            Create a request, returning a <see cref="T:MassTransit.RequestHandle`1" />, which is then used to get responses, and ultimately
            send the request.
            </summary>
            <param name="message">The request message</param>
            <param name="cancellationToken">An optional cancellationToken to cancel the request</param>
            <param name="timeout">
            An optional timeout, to automatically cancel the request after the specified timeout period
            </param>
            <returns>A <see cref="T:MassTransit.RequestHandle`1" /> for the request</returns>
        </member>
        <member name="M:MassTransit.IRequestClient`1.Create(System.Object,System.Threading.CancellationToken,MassTransit.RequestTimeout)">
            <summary>
            Create a request, returning a <see cref="T:MassTransit.RequestHandle`1" />, which is then used to get responses, and ultimately
            send the request.
            </summary>
            <param name="values">The values to initialize the message</param>
            <param name="cancellationToken">An optional cancellationToken to cancel the request</param>
            <param name="timeout">
            An optional timeout, to automatically cancel the request after the specified timeout period
            </param>
            <returns>A <see cref="T:MassTransit.RequestHandle`1" /> for the request</returns>
        </member>
        <member name="M:MassTransit.IRequestClient`1.GetResponse``1(`0,System.Threading.CancellationToken,MassTransit.RequestTimeout)">
            <summary>
            Create a request, and return a task for the specified response type
            </summary>
            <param name="message">The request message</param>
            <param name="cancellationToken">An optional cancellationToken to cancel the request</param>
            <param name="timeout">
            An optional timeout, to automatically cancel the request after the specified timeout period
            </param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IRequestClient`1.GetResponse``1(`0,MassTransit.RequestPipeConfiguratorCallback{`0},System.Threading.CancellationToken,MassTransit.RequestTimeout)">
            <summary>
            Create a request, and return a task for the specified response type
            </summary>
            <param name="message">The request message</param>
            <param name="callback"></param>
            <param name="cancellationToken">An optional cancellationToken to cancel the request</param>
            <param name="timeout">
            An optional timeout, to automatically cancel the request after the specified timeout period
            </param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IRequestClient`1.GetResponse``1(System.Object,System.Threading.CancellationToken,MassTransit.RequestTimeout)">
            <summary>
            Create a request, and return a task for the specified response type
            </summary>
            <param name="values">The values to initialize the message</param>
            <param name="cancellationToken">An optional cancellationToken to cancel the request</param>
            <param name="timeout">
            An optional timeout, to automatically cancel the request after the specified timeout period
            </param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IRequestClient`1.GetResponse``1(System.Object,MassTransit.RequestPipeConfiguratorCallback{`0},System.Threading.CancellationToken,MassTransit.RequestTimeout)">
            <summary>
            Create a request, and return a task for the specified response type
            </summary>
            <param name="values">The values to initialize the message</param>
            <param name="callback"></param>
            <param name="cancellationToken">An optional cancellationToken to cancel the request</param>
            <param name="timeout">
            An optional timeout, to automatically cancel the request after the specified timeout period
            </param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IRequestClient`1.GetResponse``2(`0,System.Threading.CancellationToken,MassTransit.RequestTimeout)">
            <summary>
            Create a request, and return a task for the specified response types
            </summary>
            <param name="message">The request message</param>
            <param name="cancellationToken">An optional cancellationToken to cancel the request</param>
            <param name="timeout">
            An optional timeout, to automatically cancel the request after the specified timeout period
            </param>
            <typeparam name="T1">The first response type</typeparam>
            <typeparam name="T2">The second response type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IRequestClient`1.GetResponse``2(`0,MassTransit.RequestPipeConfiguratorCallback{`0},System.Threading.CancellationToken,MassTransit.RequestTimeout)">
            <summary>
            Create a request, and return a task for the specified response types
            </summary>
            <param name="message">The request message</param>
            <param name="callback"></param>
            <param name="cancellationToken">An optional cancellationToken to cancel the request</param>
            <param name="timeout">
            An optional timeout, to automatically cancel the request after the specified timeout period
            </param>
            <typeparam name="T1">The first response type</typeparam>
            <typeparam name="T2">The second response type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IRequestClient`1.GetResponse``2(System.Object,System.Threading.CancellationToken,MassTransit.RequestTimeout)">
            <summary>
            Create a request, and return a task for the specified response types
            </summary>
            <param name="values">The values to initialize the message</param>
            <param name="cancellationToken">An optional cancellationToken to cancel the request</param>
            <param name="timeout">
            An optional timeout, to automatically cancel the request after the specified timeout period
            </param>
            <typeparam name="T1">The first response type</typeparam>
            <typeparam name="T2">The second response type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IRequestClient`1.GetResponse``2(System.Object,MassTransit.RequestPipeConfiguratorCallback{`0},System.Threading.CancellationToken,MassTransit.RequestTimeout)">
            <summary>
            Create a request, and return a task for the specified response types
            </summary>
            <param name="values">The values to initialize the message</param>
            <param name="callback"></param>
            <param name="cancellationToken">An optional cancellationToken to cancel the request</param>
            <param name="timeout">
            An optional timeout, to automatically cancel the request after the specified timeout period
            </param>
            <typeparam name="T1">The first response type</typeparam>
            <typeparam name="T2">The second response type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IRequestClient`1.GetResponse``3(`0,System.Threading.CancellationToken,MassTransit.RequestTimeout)">
            <summary>
            Create a request, and return a task for the specified response types
            </summary>
            <param name="message">The request message</param>
            <param name="cancellationToken">An optional cancellationToken to cancel the request</param>
            <param name="timeout">
            An optional timeout, to automatically cancel the request after the specified timeout period
            </param>
            <typeparam name="T1">The first response type</typeparam>
            <typeparam name="T2">The second response type</typeparam>
            <typeparam name="T3"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IRequestClient`1.GetResponse``3(`0,MassTransit.RequestPipeConfiguratorCallback{`0},System.Threading.CancellationToken,MassTransit.RequestTimeout)">
            <summary>
            Create a request, and return a task for the specified response types
            </summary>
            <param name="message">The request message</param>
            <param name="callback"></param>
            <param name="cancellationToken">An optional cancellationToken to cancel the request</param>
            <param name="timeout">
            An optional timeout, to automatically cancel the request after the specified timeout period
            </param>
            <typeparam name="T1">The first response type</typeparam>
            <typeparam name="T2">The second response type</typeparam>
            <typeparam name="T3"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IRequestClient`1.GetResponse``3(System.Object,System.Threading.CancellationToken,MassTransit.RequestTimeout)">
            <summary>
            Create a request, and return a task for the specified response types
            </summary>
            <param name="values">The values to initialize the message</param>
            <param name="cancellationToken">An optional cancellationToken to cancel the request</param>
            <param name="timeout">
            An optional timeout, to automatically cancel the request after the specified timeout period
            </param>
            <typeparam name="T1">The first response type</typeparam>
            <typeparam name="T2">The second response type</typeparam>
            <typeparam name="T3"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IRequestClient`1.GetResponse``3(System.Object,MassTransit.RequestPipeConfiguratorCallback{`0},System.Threading.CancellationToken,MassTransit.RequestTimeout)">
            <summary>
            Create a request, and return a task for the specified response types
            </summary>
            <param name="values">The values to initialize the message</param>
            <param name="callback"></param>
            <param name="cancellationToken">An optional cancellationToken to cancel the request</param>
            <param name="timeout">
            An optional timeout, to automatically cancel the request after the specified timeout period
            </param>
            <typeparam name="T1">The first response type</typeparam>
            <typeparam name="T2">The second response type</typeparam>
            <typeparam name="T3"></typeparam>
            <returns></returns>
        </member>
        <member name="P:MassTransit.IRequestPipeConfigurator.RequestId">
            <summary>
            The RequestId assigned to the request, and used in the header for the outgoing request message
            </summary>
        </member>
        <member name="P:MassTransit.IRequestPipeConfigurator.TimeToLive">
            <summary>
            Set the request message time to live, which by default is equal to the request timeout. Clearing this value
            will prevent any TimeToLive value from being specified.
            </summary>
        </member>
        <member name="T:MassTransit.RequestHandle`1">
            <summary>
            A request handle manages the client-side request, and allows the request to be configured, response types added, etc. The handle
            should be disposed once it is no longer in-use, and the request has been completed (successfully, or otherwise).
            </summary>
            <typeparam name="TRequest">The request type</typeparam>
        </member>
        <member name="P:MassTransit.RequestHandle`1.Message">
            <summary>
            The request message that was/will be sent.
            </summary>
        </member>
        <member name="M:MassTransit.RequestHandle.GetResponse``1(System.Boolean)">
            <summary>
            If the specified result type is present, it is returned.
            </summary>
            <param name="readyToSend">If true, sets the request as ready to send and sends it</param>
            <typeparam name="T">The result type</typeparam>
            <returns>True if the result type specified is present, otherwise false</returns>
        </member>
        <member name="M:MassTransit.RequestHandle.Cancel">
            <summary>
            Cancel the request
            </summary>
        </member>
        <member name="T:MassTransit.RequestTimeout">
            <summary>
            A timeout, which can be a default (none) or a valid TimeSpan > 0, includes factory methods to make it "cute"
            </summary>
        </member>
        <member name="P:MassTransit.RequestTimeout.Value">
            <summary>
            </summary>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:MassTransit.RequestTimeout.Or(MassTransit.RequestTimeout)">
            <summary>
            If this timeout has a value, return it, otherwise, return the other timeout
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.RequestTimeout.After(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Create a timeout using optional arguments to build it up
            </summary>
            <param name="d">days</param>
            <param name="h">hours</param>
            <param name="m">minutes</param>
            <param name="s">seconds</param>
            <param name="ms">milliseconds</param>
            <returns>The timeout value</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:MassTransit.Response">
            <summary>
            The base response type, which can be used to pattern match, via deconstruct, to the accepted
            response types.
            </summary>
        </member>
        <member name="T:MassTransit.Response`1">
            <summary>
            The response for a request with a single response type, or a request with multiple response types
            that has been matched to a specific type.
            </summary>
            <typeparam name="TResponse">The response type</typeparam>
        </member>
        <member name="P:MassTransit.Response`1.Message">
            <summary>
            The response message that was received
            </summary>
        </member>
        <member name="T:MassTransit.Response`2">
            <summary>
            The response for a request that accepts two response types, which can be matched easily or converted back into a tuple of
            tasks.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
        </member>
        <member name="T:MassTransit.Response`3">
            <summary>
            The response for a request that accepts two response types, which can be matched easily or converted back into a tuple of
            tasks.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <typeparam name="T3"></typeparam>
        </member>
        <member name="M:MassTransit.ResponseExtensions.Deconstruct(MassTransit.Response,MassTransit.Response@,System.Object@)">
            <summary>
            Used for pattern matching via (response,message)
            </summary>
            <param name="response"></param>
            <param name="context"></param>
            <param name="message"></param>
        </member>
        <member name="M:MassTransit.ResponseExtensions.IsResponseAccepted``1(MassTransit.ConsumeContext,System.Boolean)">
            <summary>
            Returns true if the response type is explicitly accepted, or if the accept response header is
            not present (downlevel client).
            </summary>
            <param name="context">The consumed message context</param>
            <param name="defaultIfHeaderNotFound">Value to return if header was not present</param>
            <typeparam name="T">The response type</typeparam>
            <returns>True if explicitly support or header is missing, otherwise false</returns>
        </member>
        <member name="M:MassTransit.Configuration.IOptionsSet.Options``1(System.Action{``0})">
            <summary>
            Configure the options, adding the option type if it is not present
            </summary>
            <param name="configure"></param>
            <typeparam name="T">The option type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Configuration.IOptionsSet.Options``1(``0,System.Action{``0})">
            <summary>
            Specify the options, will fault if it already exists
            </summary>
            <param name="options"></param>
            <param name="configure"></param>
            <typeparam name="T">The option type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Configuration.IOptionsSet.TryGetOptions``1(``0@)">
            <summary>
            Return the options, if present
            </summary>
            <param name="options"></param>
            <typeparam name="T">The option type</typeparam>
        </member>
        <member name="M:MassTransit.Configuration.IOptionsSet.SelectOptions``1">
            <summary>
            Enumerate the options which are assignable to the specified type
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Configuration.OptionsSet.Options``1(System.Action{``0})">
            <summary>
            Configure the options, adding the option type if it is not present
            </summary>
            <param name="configure"></param>
            <typeparam name="T">The option type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Configuration.OptionsSet.Options``1(``0,System.Action{``0})">
            <summary>
            Configure the options, adding the option type if it is not present
            </summary>
            <param name="options"></param>
            <param name="configure"></param>
            <typeparam name="T">The option type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Configuration.OptionsSet.TryGetOptions``1(``0@)">
            <summary>
            Return the options, if present
            </summary>
            <param name="options"></param>
            <typeparam name="T">The option type</typeparam>
        </member>
        <member name="M:MassTransit.Configuration.OptionsSet.SelectOptions``1">
            <summary>
            Enumerate the options which are assignable to the specified type
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Configuration.OptionsSet.ValidateOptions">
            <summary>
            Enumerate the options which are assignable to the specified type
            </summary>
        </member>
        <member name="M:MassTransit.Configuration.IConsumePipeSpecification.GetMessageSpecification``1">
            <summary>
            Returns the specification for the message type
            </summary>
            <typeparam name="T">The message type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Configuration.IConsumePipeSpecification.BuildConsumePipe">
            <summary>
            Build the consume pipe for the specification
            </summary>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Configuration.IMessageConsumePipeConfigurator`1">
            <summary>
            Configures the Consuming of a message type, allowing filters to be applied
            on Consume.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.Configuration.FilterPipeSpecification`1">
            <summary>
            Adds an arbitrary filter to the pipe
            </summary>
            <typeparam name="TContext"></typeparam>
        </member>
        <member name="T:MassTransit.Configuration.SplitFilterPipeSpecification`2">
            <summary>
            Adds an arbitrary filter to the pipe
            </summary>
            <typeparam name="TContext"></typeparam>
            <typeparam name="TFilter">The filter type</typeparam>
        </member>
        <member name="M:MassTransit.Configuration.IBuildPipeConfigurator`1.Build">
            <summary>
            Builds the pipe, applying any initial specifications to the front of the pipe
            </summary>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Configuration.IPipeBuilder`1">
            <summary>
            A pipe builder constructs a pipe by adding filter to the end of the chain, after
            while the builder completes the pipe/filter combination.
            </summary>
            <typeparam name="TContext">The pipe context type</typeparam>
        </member>
        <member name="M:MassTransit.Configuration.IPipeBuilder`1.AddFilter(MassTransit.IFilter{`0})">
            <summary>
            Add a filter to the pipe after any existing filters
            </summary>
            <param name="filter">The filter to add</param>
        </member>
        <member name="T:MassTransit.Configuration.IPipeSpecification`1">
            <summary>
            Configures a pipe builder (typically by adding filters), but allows late binding to the
            pipe builder with pre-validation that the operations will succeed.
            </summary>
            <typeparam name="TContext"></typeparam>
        </member>
        <member name="M:MassTransit.Configuration.IPipeSpecification`1.Apply(MassTransit.Configuration.IPipeBuilder{`0})">
            <summary>
            Apply the specification to the builder
            </summary>
            <param name="builder">The pipe builder</param>
        </member>
        <member name="P:MassTransit.Configuration.ISpecificationPipeBuilder`1.IsDelegated">
            <summary>
            If true, this is a delegated builder, and implemented message types
            and/or topology items should not be applied
            </summary>
        </member>
        <member name="P:MassTransit.Configuration.ISpecificationPipeBuilder`1.IsImplemented">
            <summary>
            If true, this is a builder for implemented types, so don't go down
            the rabbit hole twice.
            </summary>
        </member>
        <member name="M:MassTransit.Configuration.IMessagePublishPipeSpecification`1.BuildMessagePipe">
            <summary>
            Build the pipe for the specification
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Configuration.IPublishPipeSpecification.GetMessageSpecification``1">
            <summary>
            Returns the specification for the message type
            </summary>
            <typeparam name="T">The message type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Configuration.IMessageSendPipeSpecification`1.BuildMessagePipe">
            <summary>
            Build the pipe for the specification
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Configuration.ISendPipeSpecification.GetMessageSpecification``1">
            <summary>
            Returns the specification for the message type
            </summary>
            <typeparam name="T">The message type</typeparam>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Configuration.IConsumeTopologyConvention">
            <summary>
            A convention that is applies to a message type on Consume, if applicable to
            the message type.
            </summary>
        </member>
        <member name="T:MassTransit.Configuration.IMessageTopologyConfigurationObserver">
            <summary>
            Observes the configuration of message-specific topology
            </summary>
        </member>
        <member name="M:MassTransit.Configuration.IMessageTopologyConfigurator`1.SetEntityNameFormatter(MassTransit.IMessageEntityNameFormatter{`0})">
            <summary>
            Sets the entity name formatter used for this message type
            </summary>
            <param name="entityNameFormatter"></param>
        </member>
        <member name="M:MassTransit.Configuration.IMessageTopologyConfigurator`1.SetEntityName(System.String)">
            <summary>
            Sets the entity name for this message type
            </summary>
            <param name="entityName">The entity name</param>
        </member>
        <member name="M:MassTransit.Configuration.IMessageTopologyConfigurator.SetEntityNameFormatter(MassTransit.IEntityNameFormatter)">
            <summary>
            Replace the default entity name formatter
            </summary>
        </member>
        <member name="T:MassTransit.Configuration.IPublishTopologyConvention">
            <summary>
            A convention that is applies to a message type on Publish, if applicable to
            the message type.
            </summary>
        </member>
        <member name="T:MassTransit.Configuration.ISendTopologyConvention">
            <summary>
            A convention that is applies to a message type on send, if applicable to
            the message type.
            </summary>
        </member>
        <member name="T:MassTransit.Configuration.ITopologyPipeBuilder`1">
            <summary>
            A pipe builder used by topologies, which indicates whether the message type
            is either delegated (called from a sub-specification) or implemented (being called
            when the actual type is a subtype and this is an implemented type).
            </summary>
            <typeparam name="T">The pipe context type</typeparam>
        </member>
        <member name="P:MassTransit.Configuration.ITopologyPipeBuilder`1.IsDelegated">
            <summary>
            If true, this is a delegated builder, and implemented message types
            and/or topology items should not be applied
            </summary>
        </member>
        <member name="P:MassTransit.Configuration.ITopologyPipeBuilder`1.IsImplemented">
            <summary>
            If true, this is a builder for implemented types, so don't go down
            the rabbit hole twice.
            </summary>
        </member>
        <member name="M:MassTransit.Configuration.ITopologyPipeBuilder`1.CreateDelegatedBuilder">
            <summary>
            Creates a new builder where the Delegated flag is true
            </summary>
            <returns></returns>
        </member>
        <member name="T:MassTransit.BatchOptions">
            <summary>
            Batch options are applied to a <see cref="T:MassTransit.Batch`1" /> consumer to configure
            the size and time limits for each batch.
            </summary>
        </member>
        <member name="P:MassTransit.BatchOptions.MessageLimit">
            <summary>
            The maximum number of messages in a single batch
            </summary>
        </member>
        <member name="P:MassTransit.BatchOptions.ConcurrencyLimit">
            <summary>
            The number of batches which can be executed concurrently
            </summary>
        </member>
        <member name="P:MassTransit.BatchOptions.TimeLimit">
            <summary>
            The maximum time to wait before delivering a partial batch
            </summary>
        </member>
        <member name="P:MassTransit.BatchOptions.TimeLimitStart">
            <summary>
            The starting point for the <see cref="P:MassTransit.BatchOptions.TimeLimit" />
            </summary>
        </member>
        <member name="P:MassTransit.BatchOptions.GroupKeyProvider">
            <summary>
            The property to group by
            </summary>
        </member>
        <member name="M:MassTransit.BatchOptions.SetMessageLimit(System.Int32)">
            <summary>
            Sets the maximum number of messages in a single batch
            </summary>
            <param name="limit">The message limit</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.BatchOptions.SetConcurrencyLimit(System.Int32)">
            <summary>
            Sets the number of batches which can be executed concurrently
            </summary>
            <param name="limit">The message limit</param>
        </member>
        <member name="M:MassTransit.BatchOptions.SetTimeLimit(System.TimeSpan)">
            <summary>
            Sets the maximum time to wait before delivering a partial batch
            </summary>
            <param name="limit">The message limit</param>
        </member>
        <member name="M:MassTransit.BatchOptions.SetTimeLimitStart(MassTransit.BatchTimeLimitStart)">
            <summary>
            Sets the starting point for the <see cref="P:MassTransit.BatchOptions.TimeLimit"/>
            </summary>
            <param name="timeLimitStart">The starting point</param>
        </member>
        <member name="M:MassTransit.BatchOptions.SetTimeLimit(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Sets the maximum time to wait before delivering a partial batch
            </summary>
        </member>
        <member name="M:MassTransit.IActivityConfigurationObserver.ActivityConfigured``2(MassTransit.IExecuteActivityConfigurator{``0,``1},System.Uri)">
            <summary>
            Called when a routing slip activity that supports compensation host is configured
            </summary>
            <param name="configurator"></param>
            <param name="compensateAddress">The address of the compensation endpoint</param>
            <typeparam name="TActivity"></typeparam>
            <typeparam name="TArguments"></typeparam>
        </member>
        <member name="M:MassTransit.IActivityConfigurationObserver.ExecuteActivityConfigured``2(MassTransit.IExecuteActivityConfigurator{``0,``1})">
            <summary>
            Called when a routing slip execute activity host is configured
            </summary>
            <param name="configurator"></param>
            <typeparam name="TActivity"></typeparam>
            <typeparam name="TArguments"></typeparam>
        </member>
        <member name="M:MassTransit.IActivityConfigurationObserver.CompensateActivityConfigured``2(MassTransit.ICompensateActivityConfigurator{``0,``1})">
            <summary>
            Called when a routing slip compensate activity host is configured
            </summary>
            <param name="configurator"></param>
            <typeparam name="TActivity"></typeparam>
            <typeparam name="TLog"></typeparam>
        </member>
        <member name="T:MassTransit.IBatchConfigurator`1">
            <summary>
            Batching is an experimental feature, and may be changed at any time in the future.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="P:MassTransit.IBatchConfigurator`1.TimeLimit">
            <summary>
            Set the maximum time to wait for messages before the batch is automatically completed
            </summary>
        </member>
        <member name="P:MassTransit.IBatchConfigurator`1.TimeLimitStart">
            <summary>
            Sets the starting point for the <see cref="P:MassTransit.IBatchConfigurator`1.TimeLimit"/>
            </summary>
        </member>
        <member name="P:MassTransit.IBatchConfigurator`1.MessageLimit">
            <summary>
            Set the maximum number of messages which can be added to a single batch
            </summary>
        </member>
        <member name="P:MassTransit.IBatchConfigurator`1.ConcurrencyLimit">
            <summary>
            Set the maximum number of concurrent batches which can execute at the same time
            </summary>
        </member>
        <member name="M:MassTransit.IBatchConfigurator`1.Consumer``1(MassTransit.IConsumerFactory{``0},System.Action{MassTransit.IConsumerMessageConfigurator{``0,MassTransit.Batch{`0}}})">
            <summary>
            Specify the consumer factory for the batch message consumer
            </summary>
            <param name="consumerFactory"></param>
            <param name="configure">Configure the consumer pipe</param>
            <typeparam name="TConsumer"></typeparam>
        </member>
        <member name="T:MassTransit.ICompensateActivityConfigurator`2">
            <summary>
            Configure the execution of the activity and arguments with some tasty middleware.
            </summary>
            <typeparam name="TActivity"></typeparam>
            <typeparam name="TLog"></typeparam>
        </member>
        <member name="M:MassTransit.ICompensateActivityConfigurator`2.ActivityLog(System.Action{MassTransit.ICompensateActivityLogConfigurator{`1}})">
            <summary>
            Configure the arguments separate from the activity
            </summary>
        </member>
        <member name="M:MassTransit.ICompensateActivityConfigurator`2.RoutingSlip(System.Action{MassTransit.IRoutingSlipConfigurator})">
            <summary>
            Configure the routing slip pipe
            </summary>
        </member>
        <member name="T:MassTransit.ICompensateActivityLogConfigurator`1">
            <summary>
            Configure the execution of the activity and arguments with some tasty middleware.
            </summary>
            <typeparam name="TLog"></typeparam>
        </member>
        <member name="T:MassTransit.ICompensateLogConfigurator`1">
            <summary>
            Configure the execution of the activity and arguments with some tasty middleware.
            </summary>
            <typeparam name="TLog"></typeparam>
        </member>
        <member name="T:MassTransit.IConsumeConfigurator">
            <summary>
            The base configuration interface for a consumer, handler, or instance that
            can consume messages.
            </summary>
        </member>
        <member name="M:MassTransit.IConsumerConfigurationObserver.ConsumerConfigured``1(MassTransit.IConsumerConfigurator{``0})">
            <summary>
            Called when a consumer is configured
            </summary>
            <typeparam name="TConsumer"></typeparam>
            <param name="configurator"></param>
        </member>
        <member name="M:MassTransit.IConsumerConfigurationObserver.ConsumerMessageConfigured``2(MassTransit.IConsumerMessageConfigurator{``0,``1})">
            <summary>
            Called when a consumer/message combination is configured
            </summary>
            <typeparam name="TConsumer"></typeparam>
            <typeparam name="TMessage"></typeparam>
            <param name="configurator"></param>
        </member>
        <member name="M:MassTransit.IConsumerConfigurator`1.Message``1(System.Action{MassTransit.IConsumerMessageConfigurator{``0}})">
            <summary>
            Add middleware to the message pipeline, which is invoked prior to the consumer factory.
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="configure">The callback to configure the message pipeline</param>
        </member>
        <member name="M:MassTransit.IConsumerConfigurator`1.ConsumerMessage``1(System.Action{MassTransit.IConsumerMessageConfigurator{`0,``0}})">
            <summary>
            Add middleware to the consumer pipeline, for the specified message type, which is invoked
            after the consumer factory.
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="configure">The callback to configure the message pipeline</param>
        </member>
        <member name="M:MassTransit.IConsumerMessageConfigurator`2.Message(System.Action{MassTransit.IConsumerMessageConfigurator{`1}})">
            <summary>
            Add middleware to the consumer pipeline, for the specified message type, which is
            invoked after the consumer factory.
            </summary>
            <param name="configure">The callback to configure the message pipeline</param>
        </member>
        <member name="T:MassTransit.IExecuteActivityArgumentsConfigurator`1">
            <summary>
            Configure the execution of the activity and arguments with some tasty middleware.
            </summary>
            <typeparam name="TArguments"></typeparam>
        </member>
        <member name="T:MassTransit.IExecuteActivityConfigurator`2">
            <summary>
            Configure the execution of the activity and arguments with some tasty middleware.
            </summary>
            <typeparam name="TActivity"></typeparam>
            <typeparam name="TArguments"></typeparam>
        </member>
        <member name="M:MassTransit.IExecuteActivityConfigurator`2.Arguments(System.Action{MassTransit.IExecuteArgumentsConfigurator{`1}})">
            <summary>
            Configure the pipeline prior to the activity factory
            </summary>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.IExecuteActivityConfigurator`2.ActivityArguments(System.Action{MassTransit.IExecuteActivityArgumentsConfigurator{`1}})">
            <summary>
            Configure the arguments separate from the activity
            </summary>
        </member>
        <member name="M:MassTransit.IExecuteActivityConfigurator`2.RoutingSlip(System.Action{MassTransit.IRoutingSlipConfigurator})">
            <summary>
            Configure the routing slip pipe
            </summary>
        </member>
        <member name="T:MassTransit.IExecuteArgumentsConfigurator`1">
            <summary>
            Configure the execution of the activity and arguments with some tasty middleware.
            </summary>
            <typeparam name="TArguments"></typeparam>
        </member>
        <member name="M:MassTransit.IHandlerConfigurationObserver.HandlerConfigured``1(MassTransit.IHandlerConfigurator{``0})">
            <summary>
            Called when a consumer/message combination is configured
            </summary>
            <typeparam name="TMessage"></typeparam>
            <param name="configurator"></param>
        </member>
        <member name="T:MassTransit.IHandlerConfigurator`1">
            <summary>
            Configure a message handler, including specifying filters that are executed around
            the handler itself
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:MassTransit.IMessageConfigurationObserver.MessageConfigured``1(MassTransit.IConsumePipeConfigurator)">
            <summary>
            Called when a message pipeline is configured, for the very first time
            </summary>
            <typeparam name="TMessage"></typeparam>
            <param name="configurator"></param>
        </member>
        <member name="T:MassTransit.IObserverConfigurator`1">
            <summary>
            Configure a message handler, including specifying filters that are executed around
            the handler itself
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.IRoutingSlipConfigurator">
            <summary>
            Configure a message handler, including specifying filters that are executed around
            the handler itself
            </summary>
        </member>
        <member name="M:MassTransit.ISagaConfigurationObserver.SagaConfigured``1(MassTransit.ISagaConfigurator{``0})">
            <summary>
            Called immediately after the saga configuration is completed, but before the saga pipeline is built.
            </summary>
            <typeparam name="TSaga"></typeparam>
            <param name="configurator"></param>
        </member>
        <member name="M:MassTransit.ISagaConfigurationObserver.StateMachineSagaConfigured``1(MassTransit.ISagaConfigurator{``0},MassTransit.SagaStateMachine{``0})">
            <summary>
            Called immediately after the state machine saga configuration is completed, but before the saga pipeline is built. Note that
            <see cref="M:MassTransit.ISagaConfigurationObserver.SagaConfigured``1(MassTransit.ISagaConfigurator{``0})" /> method will also be called, for backwards compatibility
            </summary>
            <param name="configurator"></param>
            <param name="stateMachine"></param>
            <typeparam name="TInstance"></typeparam>
        </member>
        <member name="M:MassTransit.ISagaConfigurationObserver.SagaMessageConfigured``2(MassTransit.ISagaMessageConfigurator{``0,``1})">
            <summary>
            Called after the saga/message configuration is completed, but before the saga/message pipeline is built.
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TMessage"></typeparam>
            <param name="configurator"></param>
        </member>
        <member name="M:MassTransit.ISagaConfigurator`1.Message``1(System.Action{MassTransit.ISagaMessageConfigurator{``0}})">
            <summary>
            Add middleware to the message pipeline, which is invoked prior to the saga repository.
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="configure">The callback to configure the message pipeline</param>
        </member>
        <member name="M:MassTransit.ISagaConfigurator`1.SagaMessage``1(System.Action{MassTransit.ISagaMessageConfigurator{`0,``0}})">
            <summary>
            Add middleware to the saga pipeline, for the specified message type, which is invoked
            after the saga repository.
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="configure">The callback to configure the message pipeline</param>
        </member>
        <member name="M:MassTransit.ISagaMessageConfigurator`2.Message(System.Action{MassTransit.ISagaMessageConfigurator{`1}})">
            <summary>
            Add middleware to the saga pipeline, for the specified message type, which is
            invoked after the saga repository.
            </summary>
            <param name="configure">The callback to configure the message pipeline</param>
        </member>
        <member name="P:MassTransit.IServiceInstanceConfigurator.InstanceAddress">
            <summary>
            If the InstanceEndpoint is enabled, the address of the instance endpoint
            </summary>
        </member>
        <member name="M:MassTransit.IServiceInstanceConfigurator.AddSpecification(MassTransit.ISpecification)">
            <summary>
            Add a specification for validation
            </summary>
            <param name="specification"></param>
        </member>
        <member name="P:MassTransit.ActivityDefinition`3.CompensateEndpointName">
            <summary>
            Specify the endpoint name (which may be a queue, or a subscription, depending upon the transport) on which the saga
            should be configured. Setting to null will use the supplied <see cref="T:MassTransit.IEndpointNameFormatter" /> to generate the
            endpoint name.
            </summary>
        </member>
        <member name="M:MassTransit.ActivityDefinition`3.CompensateEndpoint(System.Action{MassTransit.IEndpointRegistrationConfigurator})">
            <summary>
            Configure the compensate endpoint
            </summary>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.ActivityDefinition`3.ConfigureCompensateActivity(MassTransit.IReceiveEndpointConfigurator,MassTransit.ICompensateActivityConfigurator{`0,`2})">
            <summary>
            Called when the compensate activity is being configured on the endpoint.
            </summary>
            <param name="endpointConfigurator">The receive endpoint configurator for the consumer</param>
            <param name="compensateActivityConfigurator"></param>
        </member>
        <member name="T:MassTransit.ConsumerDefinition`1">
            <summary>
            A consumer definition defines the configuration for a consumer, which can be used by the automatic registration code to
            configure the consumer on a receive endpoint.
            </summary>
            <typeparam name="TConsumer"></typeparam>
        </member>
        <member name="P:MassTransit.ConsumerDefinition`1.EndpointName">
            <summary>
            Specify the endpoint name (which may be a queue, or a subscription, depending upon the transport) on which the consumer
            should be configured.
            </summary>
        </member>
        <member name="P:MassTransit.ConsumerDefinition`1.ConcurrentMessageLimit">
            Set the concurrent message limit for the consumer, which limits how many consumers are able to concurrently
            consume messages.
        </member>
        <member name="M:MassTransit.ConsumerDefinition`1.Endpoint(System.Action{MassTransit.IEndpointRegistrationConfigurator})">
            <summary>
            Configure the consumer endpoint
            </summary>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.ConsumerDefinition`1.ConfigureConsumer(MassTransit.IReceiveEndpointConfigurator,MassTransit.IConsumerConfigurator{`0})">
            <summary>
            Called when the consumer is being configured on the endpoint. Configuration only applies to this consumer, and does not apply to
            the endpoint.
            </summary>
            <param name="endpointConfigurator">The receive endpoint configurator for the consumer</param>
            <param name="consumerConfigurator">The consumer configurator</param>
        </member>
        <member name="P:MassTransit.ExecuteActivityDefinition`2.ExecuteEndpointName">
            <summary>
            Specify the endpoint name (which may be a queue, or a subscription, depending upon the transport) on which the saga
            should be configured. Setting to null will use the supplied <see cref="T:MassTransit.IEndpointNameFormatter" /> to generate the
            endpoint name.
            </summary>
        </member>
        <member name="P:MassTransit.ExecuteActivityDefinition`2.ConcurrentMessageLimit">
            <summary>
            Specify a concurrency limit, which is applied to the entire consumer, saga, or activity, regardless of message type.
            </summary>
        </member>
        <member name="M:MassTransit.ExecuteActivityDefinition`2.ExecuteEndpoint(System.Action{MassTransit.IEndpointRegistrationConfigurator})">
            <summary>
            Configure the execute endpoint
            </summary>
            <param name="configure"></param>
        </member>
        <member name="M:MassTransit.ExecuteActivityDefinition`2.ConfigureExecuteActivity(MassTransit.IReceiveEndpointConfigurator,MassTransit.IExecuteActivityConfigurator{`0,`1})">
            <summary>
            Called when the compensate activity is being configured on the endpoint.
            </summary>
            <param name="endpointConfigurator">The receive endpoint configurator for the consumer</param>
            <param name="executeActivityConfigurator"></param>
        </member>
        <member name="T:MassTransit.FutureDefinition`1">
            <summary>
            A future definition defines the configuration for a future, which can be used by the automatic registration code to
            configure the consumer on a receive endpoint.
            </summary>
            <typeparam name="TFuture"></typeparam>
        </member>
        <member name="P:MassTransit.FutureDefinition`1.EndpointName">
            <summary>
            Specify the endpoint name (which may be a queue, or a subscription, depending upon the transport) on which the saga
            should be configured.
            </summary>
        </member>
        <member name="P:MassTransit.FutureDefinition`1.ConcurrentMessageLimit">
            <summary>
            Set the concurrent message limit for the saga, which limits how many saga instances are able to concurrently
            consume messages.
            </summary>
        </member>
        <member name="M:MassTransit.FutureDefinition`1.ConfigureSaga(MassTransit.IReceiveEndpointConfigurator,MassTransit.ISagaConfigurator{MassTransit.FutureState})">
            <summary>
            Called when configuring the saga on the endpoint. Configuration only applies to this saga, and does not apply to
            the endpoint.
            </summary>
            <param name="endpointConfigurator">The receive endpoint configurator for the consumer</param>
            <param name="sagaConfigurator">The saga configurator</param>
        </member>
        <member name="M:MassTransit.FutureDefinition`1.Endpoint(System.Action{MassTransit.IEndpointRegistrationConfigurator})">
            <summary>
            Configure the saga endpoint
            </summary>
            <param name="configure"></param>
        </member>
        <member name="P:MassTransit.IActivityDefinition.LogType">
            <summary>
            The log type
            </summary>
        </member>
        <member name="M:MassTransit.IActivityDefinition.GetCompensateEndpointName(MassTransit.IEndpointNameFormatter)">
            <summary>
            Return the endpoint name for the compensate activity
            </summary>
            <param name="formatter"></param>
            <returns></returns>
        </member>
        <member name="P:MassTransit.IActivityDefinition`3.CompensateEndpointDefinition">
            <summary>
            Sets the endpoint definition, if available
            </summary>
        </member>
        <member name="M:MassTransit.IActivityDefinition`3.Configure(MassTransit.IReceiveEndpointConfigurator,MassTransit.ICompensateActivityConfigurator{`0,`2})">
            <summary>
            Configure the compensate activity
            </summary>
            <param name="endpointConfigurator"></param>
            <param name="compensateActivityConfigurator"></param>
        </member>
        <member name="M:MassTransit.IActivityRegistrationConfigurator.Endpoints(System.Action{MassTransit.IEndpointRegistrationConfigurator},System.Action{MassTransit.IEndpointRegistrationConfigurator})">
            <summary>
            Configure both the execute and compensate endpoints in a single call. Separate calls have been added, which
            may ultimately cause this method to be deprecated.
            </summary>
            <param name="configureExecute"></param>
            <param name="configureCompensate"></param>
        </member>
        <member name="M:MassTransit.IActivityRegistrationConfigurator.ExecuteEndpoint(System.Action{MassTransit.IEndpointRegistrationConfigurator})">
            <summary>
            Configure the activity's execute endpoint
            </summary>
            <param name="configureExecute"></param>
        </member>
        <member name="M:MassTransit.IActivityRegistrationConfigurator.CompensateEndpoint(System.Action{MassTransit.IEndpointRegistrationConfigurator})">
            <summary>
            Configure the activity's compensate endpoint
            </summary>
            <param name="configureCompensate"></param>
        </member>
        <member name="P:MassTransit.IConsumerDefinition.ConsumerType">
            <summary>
            The consumer type
            </summary>
        </member>
        <member name="M:MassTransit.IConsumerDefinition.GetEndpointName(MassTransit.IEndpointNameFormatter)">
            <summary>
            Return the endpoint name for the consumer, using the specified formatter if necessary.
            </summary>
            <param name="formatter"></param>
            <returns></returns>
        </member>
        <member name="P:MassTransit.IConsumerDefinition`1.EndpointDefinition">
            <summary>
            Sets the endpoint definition, if available
            </summary>
        </member>
        <member name="M:MassTransit.IConsumerDefinition`1.Configure(MassTransit.IReceiveEndpointConfigurator,MassTransit.IConsumerConfigurator{`0})">
            <summary>
            Configure the consumer on the receive endpoint
            </summary>
            <param name="endpointConfigurator">The receive endpoint configurator for the consumer</param>
            <param name="consumerConfigurator">The consumer configurator</param>
        </member>
        <member name="T:MassTransit.IEndpointDefinition">
            <summary>
            Defines an endpoint in a transport-independent way
            </summary>
        </member>
        <member name="P:MassTransit.IEndpointDefinition.IsTemporary">
            <summary>
            True if the endpoint is temporary, and should be removed when the bus/endpoint is stopped. Temporary queues
            should be configured as auto-delete, non-durable, express, whatever creates the least impact and fastest performance.
            </summary>
        </member>
        <member name="P:MassTransit.IEndpointDefinition.PrefetchCount">
            <summary>
            The number of messages to fetch in advance from the broker, if applicable. This should <b>only</b> be set when
            necessary, use the <see cref="P:MassTransit.IEndpointDefinition.ConcurrentMessageLimit" /> initially.
            </summary>
        </member>
        <member name="P:MassTransit.IEndpointDefinition.ConcurrentMessageLimit">
            <summary>
            The maximum number of concurrent messages which can be delivered at any one time. This should be set by an
            endpoint before modifying the prefetch count. If this is specified, and <see cref="P:MassTransit.IEndpointDefinition.PrefetchCount" /> is left default,
            it will calculate an effective prefetch count automatically when supported.
            </summary>
        </member>
        <member name="P:MassTransit.IEndpointDefinition.ConfigureConsumeTopology">
            <summary>
            If true, configure the broker topology, which may include binding exchanges, subscribing to topics, etc.
            </summary>
        </member>
        <member name="M:MassTransit.IEndpointDefinition.GetEndpointName(MassTransit.IEndpointNameFormatter)">
            <summary>
            Return the endpoint name for the consumer, using the specified formatter if necessary.
            </summary>
            <param name="formatter"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IEndpointDefinition.Configure``1(``0)">
            <summary>
            Configure the endpoint, as provided by the transport-specific receive endpoint configurator
            </summary>
            <param name="configurator"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:MassTransit.IEndpointRegistrationConfigurator.Name">
            <summary>
            Set the endpoint name, overriding the default endpoint name formatter
            </summary>
        </member>
        <member name="P:MassTransit.IEndpointRegistrationConfigurator.Temporary">
            <summary>
            True if the endpoint should be removed after the endpoint is stopped
            </summary>
        </member>
        <member name="P:MassTransit.IEndpointRegistrationConfigurator.PrefetchCount">
            <summary>
            Only specify when required, use <see cref="P:MassTransit.IEndpointRegistrationConfigurator.ConcurrentMessageLimit" /> first and
            only specific a <see cref="P:MassTransit.IEndpointRegistrationConfigurator.PrefetchCount" /> when the default is not appropriate
            </summary>
        </member>
        <member name="P:MassTransit.IEndpointRegistrationConfigurator.ConcurrentMessageLimit">
            <summary>
            The maximum number of concurrent messages processing at one time on the endpoint. Is
            used to configure the transport efficiently.
            </summary>
        </member>
        <member name="P:MassTransit.IEndpointRegistrationConfigurator.ConfigureConsumeTopology">
            <summary>
            Defaults to true, which connects topics/exchanges/etc. to the endpoint queue at the broker.
            If set to false, no broker topology is configured (automatically set to false for courier
            activities since <see cref="T:MassTransit.Courier.Contracts.RoutingSlip" /> should never be published).
            </summary>
        </member>
        <member name="P:MassTransit.IEndpointRegistrationConfigurator.InstanceId">
            <summary>
            Specifies an identifier that uniquely identifies the endpoint instance, which is appended to the
            end of the endpoint name.
            </summary>
        </member>
        <member name="P:MassTransit.IExecuteActivityDefinition.ActivityType">
            <summary>
            The Activity type
            </summary>
        </member>
        <member name="P:MassTransit.IExecuteActivityDefinition.ArgumentType">
            <summary>
            The argument type
            </summary>
        </member>
        <member name="M:MassTransit.IExecuteActivityDefinition.GetExecuteEndpointName(MassTransit.IEndpointNameFormatter)">
            <summary>
            Return the endpoint name for the execute activity
            </summary>
            <param name="formatter"></param>
            <returns></returns>
        </member>
        <member name="P:MassTransit.IExecuteActivityDefinition`2.ExecuteEndpointDefinition">
            <summary>
            Sets the endpoint definition, if available
            </summary>
        </member>
        <member name="M:MassTransit.IExecuteActivityDefinition`2.Configure(MassTransit.IReceiveEndpointConfigurator,MassTransit.IExecuteActivityConfigurator{`0,`1})">
            <summary>
            Configure the execute activity
            </summary>
            <param name="endpointConfigurator"></param>
            <param name="executeActivityConfigurator"></param>
        </member>
        <member name="P:MassTransit.IFutureDefinition`1.EndpointDefinition">
            <summary>Sets the endpoint definition, if available</summary>
        </member>
        <member name="M:MassTransit.IFutureDefinition`1.Configure(MassTransit.IReceiveEndpointConfigurator,MassTransit.ISagaConfigurator{MassTransit.FutureState})">
            <summary>Configure the future on the receive endpoint</summary>
            <param name="endpointConfigurator">The receive endpoint configurator for the consumer</param>
            <param name="sagaConfigurator">The consumer configurator</param>
        </member>
        <member name="M:MassTransit.IFutureDefinition.GetEndpointName(MassTransit.IEndpointNameFormatter)">
            <summary>
            Return the endpoint name for the future
            </summary>
            <param name="formatter"></param>
            <returns></returns>
        </member>
        <member name="P:MassTransit.ISagaDefinition.SagaType">
            <summary>
            The saga type
            </summary>
        </member>
        <member name="M:MassTransit.ISagaDefinition.GetEndpointName(MassTransit.IEndpointNameFormatter)">
            <summary>
            Return the endpoint name for the consumer, using the specified formatter if necessary.
            </summary>
            <param name="formatter"></param>
            <returns></returns>
        </member>
        <member name="P:MassTransit.ISagaDefinition`1.EndpointDefinition">
            <summary>
            Sets the endpoint definition, if available
            </summary>
        </member>
        <member name="M:MassTransit.ISagaDefinition`1.Configure(MassTransit.IReceiveEndpointConfigurator,MassTransit.ISagaConfigurator{`0})">
            <summary>
            Configure the consumer on the receive endpoint
            </summary>
            <param name="endpointConfigurator">The receive endpoint configurator for the consumer</param>
            <param name="sagaConfigurator">The consumer configurator</param>
        </member>
        <member name="T:MassTransit.ResponseEndpointDefinition">
            <summary>
            Specifies a temporary endpoint, with the prefix "response"
            </summary>
        </member>
        <member name="T:MassTransit.SagaDefinition`1">
            <summary>
            A saga definition defines the configuration for a saga, which can be used by the automatic registration code to
            configure the consumer on a receive endpoint.
            </summary>
            <typeparam name="TSaga"></typeparam>
        </member>
        <member name="P:MassTransit.SagaDefinition`1.EndpointName">
            <summary>
            Specify the endpoint name (which may be a queue, or a subscription, depending upon the transport) on which the saga
            should be configured.
            </summary>
        </member>
        <member name="P:MassTransit.SagaDefinition`1.ConcurrentMessageLimit">
            <summary>
            Set the concurrent message limit for the saga, which limits how many saga instances are able to concurrently
            consume messages.
            </summary>
        </member>
        <member name="M:MassTransit.SagaDefinition`1.ConfigureSaga(MassTransit.IReceiveEndpointConfigurator,MassTransit.ISagaConfigurator{`0})">
            <summary>
            Called when configuring the saga on the endpoint. Configuration only applies to this saga, and does not apply to
            the endpoint.
            </summary>
            <param name="endpointConfigurator">The receive endpoint configurator for the consumer</param>
            <param name="sagaConfigurator">The saga configurator</param>
        </member>
        <member name="M:MassTransit.SagaDefinition`1.Endpoint(System.Action{MassTransit.IEndpointRegistrationConfigurator})">
            <summary>
            Configure the saga endpoint
            </summary>
            <param name="configure"></param>
        </member>
        <member name="T:MassTransit.TemporaryEndpointDefinition">
            <summary>
            Specifies a temporary endpoint, with the prefix "response"
            </summary>
        </member>
        <member name="P:MassTransit.IBusFactoryConfigurator.DeployTopologyOnly">
            <summary>
            Set to true if the topology should be deployed only
            </summary>
        </member>
        <member name="P:MassTransit.IBusFactoryConfigurator.DeployPublishTopology">
            <summary>
            Deploys defined Publish message types to the broker at startup
            </summary>
        </member>
        <member name="P:MassTransit.IBusFactoryConfigurator.PrefetchCount">
            <summary>
            Specify the number of messages to prefetch from the message broker
            </summary>
            <value>The limit</value>
        </member>
        <member name="P:MassTransit.IBusFactoryConfigurator.ConcurrentMessageLimit">
            <summary>
            Specify the number of concurrent messages that can be consumed (separate from prefetch count)
            </summary>
        </member>
        <member name="P:MassTransit.IBusFactoryConfigurator.DefaultContentType">
            <summary>
            When deserializing a message, if no ContentType is present on the receive context, use this as the default
            </summary>
        </member>
        <member name="P:MassTransit.IBusFactoryConfigurator.SerializerContentType">
            <summary>
            When serializing a message, use the content type specified for serialization
            </summary>
        </member>
        <member name="M:MassTransit.IBusFactoryConfigurator.Message``1(System.Action{MassTransit.Configuration.IMessageTopologyConfigurator{``0}})">
            <summary>
            Configure the message topology for the message type (global across all bus instances of the same transport type)
            </summary>
            <param name="configureTopology"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MassTransit.IBusFactoryConfigurator.Send``1(System.Action{MassTransit.IMessageSendTopologyConfigurator{``0}})">
            <summary>
            Configure the send topology of the message type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configureTopology"></param>
        </member>
        <member name="M:MassTransit.IBusFactoryConfigurator.Publish``1(System.Action{MassTransit.IMessagePublishTopologyConfigurator{``0}})">
            <summary>
            Configure the send topology of the message type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="configureTopology"></param>
        </member>
        <member name="M:MassTransit.IBusFactoryConfigurator.AddSerializer(MassTransit.ISerializerFactory,System.Boolean)">
            <summary>
            Add a message serializer using the specified factory (can be shared by serializer/deserializer)
            </summary>
            <param name="factory"></param>
            <param name="isSerializer">If true, set the current serializer to the specified factory</param>
        </member>
        <member name="M:MassTransit.IBusFactoryConfigurator.AddDeserializer(MassTransit.ISerializerFactory,System.Boolean)">
            <summary>
            Add a message deserializer using the specified factory (can be shared by serializer/deserializer)
            </summary>
            <param name="factory"></param>
            <param name="isDefault">If true, set the default content type to the content type of the deserializer</param>
        </member>
        <member name="M:MassTransit.IBusFactoryConfigurator.ClearSerialization">
            <summary>
            Clears all message serialization configuration
            </summary>
        </member>
        <member name="T:MassTransit.IConfigureReceiveEndpoint">
            <summary>
            Implement this interface, and register the implementation in the container as the interface
            type to apply configuration to all configured receive endpoints
            </summary>
        </member>
        <member name="M:MassTransit.IConfigureReceiveEndpoint.Configure(System.String,MassTransit.IReceiveEndpointConfigurator)">
            <summary>
            Configure the receive endpoint (called prior to any consumer, saga, or activity configuration)
            </summary>
            <param name="name"></param>
            <param name="configurator"></param>
        </member>
        <member name="T:MassTransit.IMessageFilterConfigurator">
            <summary>
            Configures a message filter, for including and excluding message types
            </summary>
        </member>
        <member name="M:MassTransit.IMessageFilterConfigurator.Include``1(System.Func{``0,System.Boolean})">
            <summary>
            Include the message if it is the specified message type and matches the specified filter expression
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="filter">The filter expression</param>
        </member>
        <member name="M:MassTransit.IMessageFilterConfigurator.Exclude``1(System.Func{``0,System.Boolean})">
            <summary>
            Exclude the message if it is the specified message type and matches the specified filter expression
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="filter">The filter expression</param>
        </member>
        <member name="T:MassTransit.IMessageTypeFilterConfigurator">
            <summary>
            Configures a message filter, for including and excluding message types
            </summary>
        </member>
        <member name="M:MassTransit.IMessageTypeFilterConfigurator.Include(System.Type[])">
            <summary>
            Include the message if it is any of the specified message types
            </summary>
            <param name="messageTypes"></param>
        </member>
        <member name="M:MassTransit.IMessageTypeFilterConfigurator.Include(System.Func{System.Type,System.Boolean})">
            <summary>
            Include the type matches the specified filter expression
            </summary>
            <param name="filter">The filter expression</param>
        </member>
        <member name="M:MassTransit.IMessageTypeFilterConfigurator.Include``1">
            <summary>
            Include the message if it is the specified message type
            </summary>
            <typeparam name="T">The message type</typeparam>
        </member>
        <member name="M:MassTransit.IMessageTypeFilterConfigurator.Exclude(System.Type[])">
            <summary>
            Exclude the message if it is any of the specified message types
            </summary>
            <param name="messageTypes"></param>
        </member>
        <member name="M:MassTransit.IMessageTypeFilterConfigurator.Exclude(System.Func{System.Type,System.Boolean})">
            <summary>
            Exclude the type matches the specified filter expression
            </summary>
            <param name="filter">The filter expression</param>
        </member>
        <member name="M:MassTransit.IMessageTypeFilterConfigurator.Exclude``1">
            <summary>
            Exclude the message if it is the specified message type
            </summary>
            <typeparam name="T">The message type</typeparam>
        </member>
        <member name="M:MassTransit.IReceiveConfigurator`1.ReceiveEndpoint(MassTransit.IEndpointDefinition,MassTransit.IEndpointNameFormatter,System.Action{`0})">
            <summary>
            Adds a receive endpoint
            </summary>
            <param name="definition">
            An endpoint definition, which abstracts specific endpoint behaviors from the transport
            </param>
            <param name="endpointNameFormatter"></param>
            <param name="configureEndpoint">The configuration callback</param>
        </member>
        <member name="M:MassTransit.IReceiveConfigurator`1.ReceiveEndpoint(System.String,System.Action{`0})">
            <summary>
            Adds a receive endpoint
            </summary>
            <param name="queueName">The queue name for the receive endpoint</param>
            <param name="configureEndpoint">The configuration callback</param>
        </member>
        <member name="M:MassTransit.IReceiveConfigurator.ReceiveEndpoint(MassTransit.IEndpointDefinition,MassTransit.IEndpointNameFormatter,System.Action{MassTransit.IReceiveEndpointConfigurator})">
            <summary>
            Adds a receive endpoint
            </summary>
            <param name="definition">
            An endpoint definition, which abstracts specific endpoint behaviors from the transport
            </param>
            <param name="endpointNameFormatter"></param>
            <param name="configureEndpoint">The configuration callback</param>
        </member>
        <member name="M:MassTransit.IReceiveConfigurator.ReceiveEndpoint(System.String,System.Action{MassTransit.IReceiveEndpointConfigurator})">
            <summary>
            Adds a receive endpoint
            </summary>
            <param name="queueName">The queue name for the receive endpoint</param>
            <param name="configureEndpoint">The configuration callback</param>
        </member>
        <member name="M:MassTransit.IReceiveConnector`1.ConnectReceiveEndpoint(MassTransit.IEndpointDefinition,MassTransit.IEndpointNameFormatter,System.Action{`0})">
            <summary>
            Adds a receive endpoint
            </summary>
            <param name="definition">
            An endpoint definition, which abstracts specific endpoint behaviors from the transport
            </param>
            <param name="endpointNameFormatter"></param>
            <param name="configureEndpoint">The configuration callback</param>
        </member>
        <member name="M:MassTransit.IReceiveConnector`1.ConnectReceiveEndpoint(System.String,System.Action{`0})">
            <summary>
            Adds a receive endpoint
            </summary>
            <param name="queueName">The queue name for the receive endpoint</param>
            <param name="configureEndpoint">The configuration callback</param>
        </member>
        <member name="M:MassTransit.IReceiveConnector.ConnectReceiveEndpoint(MassTransit.IEndpointDefinition,MassTransit.IEndpointNameFormatter,System.Action{MassTransit.IReceiveEndpointConfigurator})">
            <summary>
            Adds a receive endpoint
            </summary>
            <param name="definition">
            An endpoint definition, which abstracts specific endpoint behaviors from the transport
            </param>
            <param name="endpointNameFormatter"></param>
            <param name="configureEndpoint">The configuration callback</param>
        </member>
        <member name="M:MassTransit.IReceiveConnector.ConnectReceiveEndpoint(System.String,System.Action{MassTransit.IReceiveEndpointConfigurator})">
            <summary>
            Adds a receive endpoint
            </summary>
            <param name="queueName">The queue name for the receive endpoint</param>
            <param name="configureEndpoint">The configuration callback</param>
        </member>
        <member name="T:MassTransit.ISpecification">
            <summary>
            A specification, that can be validated as part of a configurator, is used
            to allow nesting and chaining of specifications while ensuring that all aspects
            of the configuration are verified correct.
            </summary>
        </member>
        <member name="M:MassTransit.ISpecification.Validate">
            <summary>
            Validate the specification, ensuring that a successful build will occur.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MassTransit.MassTransitHostOptions">
            <summary>
            If present in the container, these options will be used by the MassTransit hosted service.
            </summary>
        </member>
        <member name="P:MassTransit.MassTransitHostOptions.WaitUntilStarted">
            <summary>
            If True, the hosted service will not return from StartAsync until the bus has started.
            </summary>
        </member>
        <member name="P:MassTransit.MassTransitHostOptions.StartTimeout">
            <summary>
            If specified, the timeout will be used with StartAsync to cancel if the timeout is reached
            </summary>
        </member>
        <member name="P:MassTransit.MassTransitHostOptions.StopTimeout">
            <summary>
            If specified, the timeout will be used with StopAsync to cancel if the timeout is reached.
            The bus is still stopped, only the wait is canceled.
            </summary>
        </member>
        <member name="P:MassTransit.MassTransitHostOptions.ConsumerStopTimeout">
            <summary>
            If specified, the timeout will be used to wait for Consumers to complete their work
            After this timeout ConsumeContext.CancellationToken will be cancelled <seealso cref="P:MassTransit.PipeContext.CancellationToken"/>
            </summary>
        </member>
        <member name="M:MassTransit.DelegateConfigurationExtensions.UseExecute``1(MassTransit.IPipeConfigurator{``0},System.Action{``0})">
            <summary>
            Executes a synchronous method on the pipe
            </summary>
            <typeparam name="TContext">The context type</typeparam>
            <param name="configurator">The pipe configurator</param>
            <param name="callback">The callback to invoke</param>
        </member>
        <member name="M:MassTransit.DelegateConfigurationExtensions.UseExecuteAsync``1(MassTransit.IPipeConfigurator{``0},System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Executes an asynchronous method on the pipe
            </summary>
            <typeparam name="TContext">The context type</typeparam>
            <param name="configurator">The pipe configurator</param>
            <param name="callback">The callback to invoke</param>
        </member>
        <member name="M:MassTransit.FilterConfigurationExtensions.UseFilter``1(MassTransit.IConsumePipeConfigurator,MassTransit.IFilter{MassTransit.ConsumeContext{``0}})">
            <summary>
            Adds a filter to the consume pipe for the specific message type
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="configurator">The pipe configurator</param>
            <param name="filter">The filter to add</param>
        </member>
        <member name="M:MassTransit.FilterConfigurationExtensions.UseFilter``1(MassTransit.ISendPipeConfigurator,MassTransit.IFilter{MassTransit.SendContext{``0}})">
            <summary>
            Adds a filter to the send pipe for the specific message type
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="configurator">The pipe configurator</param>
            <param name="filter">The filter to add</param>
        </member>
        <member name="M:MassTransit.FilterConfigurationExtensions.UseFilter``1(MassTransit.IPublishPipeConfigurator,MassTransit.IFilter{MassTransit.PublishContext{``0}})">
            <summary>
            Adds a filter to the publish pipe for the specific message type
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="configurator">The pipe configurator</param>
            <param name="filter">The filter to add</param>
        </member>
        <member name="M:MassTransit.FilterConfigurationExtensions.UseFilter``1(MassTransit.IPipeConfigurator{``0},MassTransit.IFilter{``0})">
            <summary>
            Adds a filter to the pipe
            </summary>
            <typeparam name="T">The context type</typeparam>
            <param name="configurator">The pipe configurator</param>
            <param name="filter">The filter to add</param>
        </member>
        <member name="M:MassTransit.FilterConfigurationExtensions.UseFilters``1(MassTransit.IPipeConfigurator{``0},System.Collections.Generic.IEnumerable{MassTransit.IFilter{``0}})">
            <summary>
            Adds filters to the pipe
            </summary>
            <typeparam name="T">The context type</typeparam>
            <param name="configurator">The pipe configurator</param>
            <param name="filters">The filters to add</param>
        </member>
        <member name="M:MassTransit.FilterConfigurationExtensions.UseFilters``1(MassTransit.IPipeConfigurator{``0},MassTransit.IFilter{``0}[])">
            <summary>
            Adds filters to the pipe
            </summary>
            <typeparam name="T">The context type</typeparam>
            <param name="configurator">The pipe configurator</param>
            <param name="filters">The filters to add</param>
        </member>
        <member name="M:MassTransit.FilterConfigurationExtensions.UseFilter``2(MassTransit.IPipeConfigurator{``0},MassTransit.IFilter{``1},MassTransit.MergeFilterContextProvider{``0,``1},MassTransit.FilterContextProvider{``1,``0})">
            <summary>
            Adds a filter to the pipe which is of a different type than the native pipe context type
            </summary>
            <typeparam name="TContext">The context type</typeparam>
            <typeparam name="TFilter">The filter context type</typeparam>
            <param name="configurator">The pipe configurator</param>
            <param name="filter">The filter to add</param>
            <param name="contextProvider"></param>
            <param name="inputContextProvider"></param>
        </member>
        <member name="P:MassTransit.IConsumePipeConfigurator.AutoStart">
            <summary>
            If set to false, the transport will only be started when a connection is made to the consume pipe.
            </summary>
        </member>
        <member name="M:MassTransit.IConsumePipeConfigurator.AddPipeSpecification``1(MassTransit.Configuration.IPipeSpecification{MassTransit.ConsumeContext{``0}})">
            <summary>
            Adds a type-specific pipe specification to the consume pipe
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="specification"></param>
        </member>
        <member name="M:MassTransit.IConsumePipeConfigurator.AddPrePipeSpecification(MassTransit.Configuration.IPipeSpecification{MassTransit.ConsumeContext})">
            <summary>
            Adds a pipe specification prior to the message type router so that a single
            instance is used for all message types
            </summary>
            <param name="specification"></param>
        </member>
        <member name="M:MassTransit.IEndpointConfigurationObserver.EndpointConfigured``1(``0)">
            <summary>
            Called when an endpoint is configured
            </summary>
            <typeparam name="T">The receive endpoint configurator type</typeparam>
            <param name="configurator"></param>
        </member>
        <member name="M:MassTransit.IEndpointConfigurationObserverConnector.ConnectEndpointConfigurationObserver(MassTransit.IEndpointConfigurationObserver)">
            <summary>
            Connect a configuration observer to the bus configurator, which is invoked as consumers are configured.
            </summary>
            <param name="observer"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.IPipeConfigurator`1">
            <summary>
            Configures a pipe with specifications
            </summary>
            <typeparam name="TContext"></typeparam>
        </member>
        <member name="M:MassTransit.IPipeConfigurator`1.AddPipeSpecification(MassTransit.Configuration.IPipeSpecification{`0})">
            <summary>
            Adds a pipe specification to the pipe configurator at the end of the chain
            </summary>
            <param name="specification">The pipe specification to add</param>
        </member>
        <member name="M:MassTransit.IPublishPipeConfigurator.AddPipeSpecification(MassTransit.Configuration.IPipeSpecification{MassTransit.SendContext})">
            <summary>
            Adds a type-specific pipe specification to the consume pipe
            </summary>
            <param name="specification"></param>
        </member>
        <member name="M:MassTransit.IPublishPipeConfigurator.AddPipeSpecification``1(MassTransit.Configuration.IPipeSpecification{MassTransit.SendContext{``0}})">
            <summary>
            Adds a type-specific pipe specification to the consume pipe
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="specification"></param>
        </member>
        <member name="M:MassTransit.IPublishPipeConfigurator.AddPipeSpecification``1(MassTransit.Configuration.IPipeSpecification{MassTransit.PublishContext{``0}})">
            <summary>
            Adds a type-specific pipe specification to the consume pipe
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="specification"></param>
        </member>
        <member name="M:MassTransit.IPublishPipelineConfigurator.ConfigurePublish(System.Action{MassTransit.IPublishPipeConfigurator})">
            <summary>
            Configure the Publish pipeline
            </summary>
            <param name="callback"></param>
        </member>
        <member name="T:MassTransit.IReceiveEndpointConfigurator">
            <summary>
            Configure a receiving endpoint
            </summary>
        </member>
        <member name="P:MassTransit.IReceiveEndpointConfigurator.InputAddress">
            <summary>
            Returns the input address of the receive endpoint
            </summary>
        </member>
        <member name="P:MassTransit.IReceiveEndpointConfigurator.ConfigureConsumeTopology">
            <summary>
            If true (the default), the broker topology is configured using the message types consumed by
            handlers, consumers, sagas, and activities. The implementation is broker-specific, but generally
            supported enough to be implemented across the board. This method obsoletes the previous methods,
            such as BindMessageTopics, BindMessageExchanges, SubscribeMessageTopics, etc.
            </summary>
        </member>
        <member name="P:MassTransit.IReceiveEndpointConfigurator.PublishFaults">
            <summary>
            If true (the default), faults should be published when no ResponseAddress or FaultAddress are present.
            </summary>
        </member>
        <member name="P:MassTransit.IReceiveEndpointConfigurator.PrefetchCount">
            <summary>
            Specify the number of messages to prefetch from the message broker
            </summary>
            <value>The limit</value>
        </member>
        <member name="P:MassTransit.IReceiveEndpointConfigurator.ConcurrentMessageLimit">
            <summary>
            Specify the number of concurrent messages that can be consumed (separate from prefetch count)
            </summary>
        </member>
        <member name="P:MassTransit.IReceiveEndpointConfigurator.DefaultContentType">
            <summary>
            When deserializing a message, if no ContentType is present on the receive context, use this as the default
            </summary>
        </member>
        <member name="P:MassTransit.IReceiveEndpointConfigurator.SerializerContentType">
            <summary>
            When serializing a message, use the content type specified for serialization
            </summary>
        </member>
        <member name="M:MassTransit.IReceiveEndpointConfigurator.ConfigureMessageTopology``1(System.Boolean)">
            <summary>
            Configures whether the broker topology is configured for the specified message type. Related to
            <see cref="P:MassTransit.IReceiveEndpointConfigurator.ConfigureConsumeTopology" />, but for an individual message type.
            </summary>
        </member>
        <member name="M:MassTransit.IReceiveEndpointConfigurator.AddSerializer(MassTransit.ISerializerFactory,System.Boolean)">
            <summary>
            Add a message serializer using the specified factory (can be shared by serializer/deserializer)
            </summary>
            <param name="factory"></param>
            <param name="isSerializer">If true, set the current serializer to the specified factory</param>
        </member>
        <member name="M:MassTransit.IReceiveEndpointConfigurator.AddDeserializer(MassTransit.ISerializerFactory,System.Boolean)">
            <summary>
            Add a message deserializer using the specified factory (can be shared by serializer/deserializer)
            </summary>
            <param name="factory"></param>
            <param name="isDefault">If true, set the default content type to the content type of the deserializer</param>
        </member>
        <member name="M:MassTransit.IReceiveEndpointConfigurator.ClearSerialization">
            <summary>
            Clears all message serialization configuration
            </summary>
        </member>
        <member name="M:MassTransit.IReceiveEndpointDependencyConnector.AddDependency(MassTransit.Transports.IReceiveEndpointDependency)">
            <summary>
            Add receive endpoint dependency. Endpoint will be started when dependency is Ready
            </summary>
            <param name="dependency"></param>
        </member>
        <member name="M:MassTransit.IReceiveEndpointDependentConnector.AddDependent(MassTransit.Transports.IReceiveEndpointDependent)">
            <summary>
            Add the dependent to receive endpoint. Receive endpoint will be stopped when dependent is Completed
            </summary>
            <param name="dependent"></param>
        </member>
        <member name="M:MassTransit.IReceivePipelineConfigurator.ConfigureReceive(System.Action{MassTransit.IReceivePipeConfigurator})">
            <summary>
            Configure the Receive pipeline
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:MassTransit.IReceivePipelineConfigurator.ConfigureDeadLetter(System.Action{MassTransit.IPipeConfigurator{MassTransit.ReceiveContext}})">
            <summary>
            Configure the dead letter pipeline, which is called if the message is not consumed
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:MassTransit.IReceivePipelineConfigurator.ConfigureError(System.Action{MassTransit.IPipeConfigurator{MassTransit.ExceptionReceiveContext}})">
            <summary>
            Configure the exception pipeline, which is called if there are uncaught consumer exceptions
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:MassTransit.IReceivePipelineConfigurator.ConfigureTransport(System.Action{MassTransit.ITransportConfigurator})">
            <summary>
            Configure the transport options
            </summary>
            <param name="callback"></param>
        </member>
        <member name="M:MassTransit.ISendPipeConfigurator.AddPipeSpecification``1(MassTransit.Configuration.IPipeSpecification{MassTransit.SendContext{``0}})">
            <summary>
            Adds a type-specific pipe specification to the consume pipe
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="specification"></param>
        </member>
        <member name="M:MassTransit.ISendPipelineConfigurator.ConfigureSend(System.Action{MassTransit.ISendPipeConfigurator})">
            <summary>
            Configure the Send pipeline
            </summary>
            <param name="callback"></param>
        </member>
        <member name="T:MassTransit.RedeliveryOptions">
            <summary>
            Customize the redelivery experience
            </summary>
        </member>
        <member name="F:MassTransit.RedeliveryOptions.ReplaceMessageId">
            <summary>
            Generate a new MessageId for the redelivered message (typically to avoid
            broker deduplication logic)
            </summary>
        </member>
        <member name="F:MassTransit.RedeliveryOptions.UseMessageScheduler">
            <summary>
            If specified, use the message scheduler context instead of the redelivery context (only use when transport-level redelivery is not available)
            </summary>
        </member>
        <member name="M:MassTransit.IConsumeTopologyConfigurator.GetMessageTopology``1">
            <summary>
            Returns the specification for the message type
            </summary>
            <typeparam name="T">The message type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IConsumeTopologyConfigurator.TryAddConvention(MassTransit.Configuration.IConsumeTopologyConvention)">
            <summary>
            Adds a convention to the topology, which will be applied to every message type
            requested, to determine if a convention for the message type is available.
            </summary>
            <param name="convention">The Consume topology convention</param>
        </member>
        <member name="M:MassTransit.IConsumeTopologyConfigurator.AddMessageConsumeTopology``1(MassTransit.IMessageConsumeTopology{``0})">
            <summary>
            Add a Consume topology for a specific message type
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="topology">The topology</param>
        </member>
        <member name="T:MassTransit.IMessageConsumeTopologyConfigurator`1">
            <summary>
            Configures the Consuming of a message type, allowing filters to be applied
            on Consume.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="P:MassTransit.IMessageConsumeTopologyConfigurator`1.ConfigureConsumeTopology">
            <summary>
            Specify whether the broker topology should be configured for this message type
            (defaults to true)
            </summary>
        </member>
        <member name="M:MassTransit.IMessageConsumeTopologyConfigurator`1.AddDelegate(MassTransit.IMessageConsumeTopology{`0})">
            <summary>
            Adds a delegated configuration to the Consume topology, which is called before any topologies
            in this configuration.
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="M:MassTransit.IMessageConsumeTopologyConfigurator`1.TryAddConvention(MassTransit.Configuration.IMessageConsumeTopologyConvention{`0})">
            <summary>
            Adds a convention to the message Consume topology configuration, which can be modified
            </summary>
            <param name="convention"></param>
        </member>
        <member name="M:MassTransit.IMessageConsumeTopologyConfigurator`1.UpdateConvention``1(System.Func{``0,``0})">
            <summary>
            Update a convention if available, otherwise, throw an exception
            </summary>
            <typeparam name="TConvention"></typeparam>
            <param name="update">Called if the convention already exists</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IMessageConsumeTopologyConfigurator`1.AddOrUpdateConvention``1(System.Func{``0},System.Func{``0,``0})">
            <summary>
            Returns the first convention that matches the interface type specified, to allow it to be customized
            and or replaced.
            </summary>
            <typeparam name="TConvention"></typeparam>
            <param name="add">Called if the convention does not already exist</param>
            <param name="update">Called if the convention already exists</param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.IMessagePublishTopologyConfigurator`1">
            <summary>
            Configures the Publishing of a message type, allowing filters to be applied
            on Publish.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:MassTransit.IMessagePublishTopologyConfigurator`1.AddDelegate(MassTransit.IMessagePublishTopology{`0})">
            <summary>
            Adds a delegated configuration to the Publish topology, which is called before any topologies
            in this configuration.
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="M:MassTransit.IMessagePublishTopologyConfigurator`1.TryAddConvention(MassTransit.Configuration.IMessagePublishTopologyConvention{`0})">
            <summary>
            Adds a convention to the message Publish topology configuration, which can be modified
            </summary>
            <param name="convention"></param>
        </member>
        <member name="M:MassTransit.IMessagePublishTopologyConfigurator`1.AddOrUpdateConvention``1(System.Func{``0},System.Func{``0,``0})">
            <summary>
            Returns the first convention that matches the interface type specified, to allow it to be customized
            and or replaced.
            </summary>
            <typeparam name="TConvention"></typeparam>
            <param name="add">Called if the convention does not already exist</param>
            <param name="update">Called if the convention already exists</param>
            <returns></returns>
        </member>
        <member name="P:MassTransit.IMessagePublishTopologyConfigurator.Exclude">
            <summary>
            Exclude the message type from being created as a topic/exchange.
            </summary>
        </member>
        <member name="T:MassTransit.IMessageSendTopologyConfigurator`1">
            <summary>
            Configures the sending of a message type, allowing filters to be applied
            on send.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:MassTransit.IMessageSendTopologyConfigurator`1.AddDelegate(MassTransit.IMessageSendTopology{`0})">
            <summary>
            Adds a delegated configuration to the send topology, which is called before any topologies
            in this configuration.
            </summary>
            <param name="configuration"></param>
        </member>
        <member name="M:MassTransit.IMessageSendTopologyConfigurator`1.TryAddConvention(MassTransit.Configuration.IMessageSendTopologyConvention{`0})">
            <summary>
            Adds a convention to the message send topology configuration, which can be modified
            </summary>
            <param name="convention"></param>
        </member>
        <member name="M:MassTransit.IMessageSendTopologyConfigurator`1.UpdateConvention``1(System.Func{``0,``0})">
            <summary>
            Update a convention if available, otherwise, throw an exception
            </summary>
            <typeparam name="TConvention"></typeparam>
            <param name="update">Called if the convention already exists</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IMessageSendTopologyConfigurator`1.AddOrUpdateConvention``1(System.Func{``0},System.Func{``0,``0})">
            <summary>
            Returns the first convention that matches the interface type specified, to allow it to be customized
            and or replaced.
            </summary>
            <typeparam name="TConvention"></typeparam>
            <param name="add">Called if the convention does not already exist</param>
            <param name="update">Called if the convention already exists</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IMessageSendTopologyConfigurator`1.TryGetConvention``1(``0@)">
            <summary>
            Returns the convention, if found
            </summary>
            <param name="convention"></param>
            <typeparam name="TConvention"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IPublishTopologyConfigurator.GetMessageTopology``1">
            <summary>
            Returns the specification for the message type
            </summary>
            <typeparam name="T">The message type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IPublishTopologyConfigurator.GetMessageTopology(System.Type)">
            <summary>
            Returns the specification for the message type
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IPublishTopologyConfigurator.TryAddConvention(MassTransit.Configuration.IPublishTopologyConvention)">
            <summary>
            Adds a convention to the topology, which will be applied to every message type
            requested, to determine if a convention for the message type is available.
            </summary>
            <param name="convention">The Publish topology convention</param>
        </member>
        <member name="M:MassTransit.IPublishTopologyConfigurator.AddMessagePublishTopology``1(MassTransit.IMessagePublishTopology{``0})">
            <summary>
            Add a Publish topology for a specific message type
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="topology">The topology</param>
        </member>
        <member name="P:MassTransit.ISendTopologyConfigurator.DeadLetterQueueNameFormatter">
            <summary>
            Specify a dead letter queue name formatter, which is used to format the name for a dead letter queue.
            Defaults to (queue name)_skipped.
            </summary>
        </member>
        <member name="P:MassTransit.ISendTopologyConfigurator.ErrorQueueNameFormatter">
            <summary>
            Specify an error queue name formatter, which is used to format the name for an error queue.
            Defaults to (queue name)_error.
            </summary>
        </member>
        <member name="M:MassTransit.ISendTopologyConfigurator.TryAddConvention(MassTransit.Configuration.ISendTopologyConvention)">
            <summary>
            Adds a convention to the topology, which will be applied to every message type
            requested, to determine if a convention for the message type is available.
            </summary>
            <param name="convention">The send topology convention</param>
        </member>
        <member name="M:MassTransit.ISendTopologyConfigurator.AddMessageSendTopology``1(MassTransit.IMessageSendTopology{``0})">
            <summary>
            Add a send topology for a specific message type
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="topology">The topology</param>
        </member>
        <member name="T:MassTransit.IReceiveEndpointSpecification">
            <summary>
            Specification for configuring a receive endpoint
            </summary>
        </member>
        <member name="T:MassTransit.ValidationResult">
            <summary>
            Reports information about the configuration before configuring
            so that corrections can be made without allocating resources, etc.
            </summary>
        </member>
        <member name="P:MassTransit.ValidationResult.Disposition">
            <summary>
            The disposition of the result, any Failure items will prevent
            the configuration from completing.
            </summary>
        </member>
        <member name="P:MassTransit.ValidationResult.Message">
            <summary>
            The message associated with the result
            </summary>
        </member>
        <member name="P:MassTransit.ValidationResult.Key">
            <summary>
            The key associated with the result (chained if configurators are nested)
            </summary>
        </member>
        <member name="P:MassTransit.ValidationResult.Value">
            <summary>
            The value associated with the result
            </summary>
        </member>
        <member name="T:MassTransit.ConnectHandle">
            <summary>
            A connect handle is returned by a non-asynchronous resource that supports
            disconnection (such as removing an observer, etc.)
            </summary>
        </member>
        <member name="M:MassTransit.ConnectHandle.Disconnect">
            <summary>
            Explicitly disconnect the handle without waiting for it to be disposed. If the 
            connection is disconnected, the disconnect will be ignored when the handle is disposed.
            </summary>
        </member>
        <member name="P:MassTransit.CompensateActivityContext`2.Activity">
            <summary>
            The activity that was created/used for this compensation
            </summary>
        </member>
        <member name="P:MassTransit.CompensateContext.Result">
            <summary>
            Set the compensation result, which completes the activity
            </summary>
        </member>
        <member name="M:MassTransit.CompensateContext.Compensated">
            <summary>
            The compensation was successful
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.CompensateContext.Compensated(System.Object)">
            <summary>
            The compensation was successful
            </summary>
            <param name="values">The variables to be updated on the routing slip</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.CompensateContext.Compensated(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            The compensation was successful
            </summary>
            <param name="variables">The variables to be updated on the routing slip</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.CompensateContext.Failed">
            <summary>
            The compensation failed
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.CompensateContext.Failed(System.Exception)">
            <summary>
            The compensation failed with the specified exception
            </summary>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="P:MassTransit.CompensateContext`1.Log">
            <summary>
            The execution log from the activity execution
            </summary>
        </member>
        <member name="P:MassTransit.ConsumeContext.ReceiveContext">
            <summary>
            The received message context
            </summary>
        </member>
        <member name="P:MassTransit.ConsumeContext.SerializerContext">
            <summary>
            The serializer context from message deserialization
            </summary>
        </member>
        <member name="P:MassTransit.ConsumeContext.ConsumeCompleted">
            <summary>
            An awaitable task that is completed once the consume context is completed
            </summary>
        </member>
        <member name="P:MassTransit.ConsumeContext.SupportedMessageTypes">
            <summary>
            Returns the supported message types from the message
            </summary>
        </member>
        <member name="M:MassTransit.ConsumeContext.HasMessageType(System.Type)">
            <summary>
            Returns true if the specified message type is contained in the serialized message
            </summary>
            <param name="messageType"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ConsumeContext.TryGetMessage``1(MassTransit.ConsumeContext{``0}@)">
            <summary>
            Returns the specified message type if available, otherwise returns false
            </summary>
            <typeparam name="T"></typeparam>
            <param name="consumeContext"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ConsumeContext.AddConsumeTask(System.Threading.Tasks.Task)">
            <summary>
            Add a task that must complete before the consume is completed
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:MassTransit.ConsumeContext.RespondAsync``1(``0)">
            <summary>
            Responds to the current message immediately, returning the Task for the
            sending message. The caller may choose to await the response to ensure it was sent, or
            allow the framework to wait for it (which will happen automatically before the message is acknowledged)
            </summary>
            <typeparam name="T">The type of the message to respond with.</typeparam>
            <param name="message">The message to send in response</param>
        </member>
        <member name="M:MassTransit.ConsumeContext.RespondAsync``1(``0,MassTransit.IPipe{MassTransit.SendContext{``0}})">
            <summary>
            Responds to the current message immediately, returning the Task for the
            sending message. The caller may choose to await the response to ensure it was sent, or
            allow the framework to wait for it (which will happen automatically before the message is acknowledged)
            </summary>
            <typeparam name="T">The type of the message to respond with.</typeparam>
            <param name="message">The message to send in response</param>
            <param name="sendPipe">The pipe used to customize the response send context</param>
        </member>
        <member name="M:MassTransit.ConsumeContext.RespondAsync``1(``0,MassTransit.IPipe{MassTransit.SendContext})">
            <summary>
            Responds to the current message immediately, returning the Task for the
            sending message. The caller may choose to await the response to ensure it was sent, or
            allow the framework to wait for it (which will happen automatically before the message is acknowledged)
            </summary>
            <typeparam name="T">The type of the message to respond with.</typeparam>
            <param name="message">The message to send in response</param>
            <param name="sendPipe">The pipe used to customize the response send context</param>
        </member>
        <member name="M:MassTransit.ConsumeContext.RespondAsync(System.Object)">
            <summary>
            Responds to the current message immediately, returning the Task for the
            sending message. The caller may choose to await the response to ensure it was sent, or
            allow the framework to wait for it (which will happen automatically before the message is acknowledged)
            </summary>
            <param name="message">The message to send</param>
        </member>
        <member name="M:MassTransit.ConsumeContext.RespondAsync(System.Object,System.Type)">
            <summary>
            Responds to the current message immediately, returning the Task for the
            sending message. The caller may choose to await the response to ensure it was sent, or
            allow the framework to wait for it (which will happen automatically before the message is acknowledged)
            </summary>
            <param name="message">The message to send</param>
            <param name="messageType">The message type to send</param>
        </member>
        <member name="M:MassTransit.ConsumeContext.RespondAsync(System.Object,MassTransit.IPipe{MassTransit.SendContext})">
            <summary>
            Responds to the current message immediately, returning the Task for the
            sending message. The caller may choose to await the response to ensure it was sent, or
            allow the framework to wait for it (which will happen automatically before the message is acknowledged)
            </summary>
            <param name="message">The message to send</param>
            <param name="sendPipe"></param>
        </member>
        <member name="M:MassTransit.ConsumeContext.RespondAsync(System.Object,System.Type,MassTransit.IPipe{MassTransit.SendContext})">
            <summary>
            Responds to the current message immediately, returning the Task for the
            sending message. The caller may choose to await the response to ensure it was sent, or
            allow the framework to wait for it (which will happen automatically before the message is acknowledged)
            </summary>
            <param name="message">The message to send</param>
            <param name="messageType">The message type to send</param>
            <param name="sendPipe"></param>
        </member>
        <member name="M:MassTransit.ConsumeContext.RespondAsync``1(System.Object)">
            <summary>
            Responds to the current message immediately, returning the Task for the
            sending message. The caller may choose to await the response to ensure it was sent, or
            allow the framework to wait for it (which will happen automatically before the message is acknowledged)
            </summary>
            <typeparam name="T">The type of the message to respond with.</typeparam>
            <param name="values">The values for the message properties</param>
        </member>
        <member name="M:MassTransit.ConsumeContext.RespondAsync``1(System.Object,MassTransit.IPipe{MassTransit.SendContext{``0}})">
            <summary>
            Responds to the current message immediately, returning the Task for the
            sending message. The caller may choose to await the response to ensure it was sent, or
            allow the framework to wait for it (which will happen automatically before the message is acknowledged)
            </summary>
            <typeparam name="T">The type of the message to respond with.</typeparam>
            <param name="values">The values for the message properties</param>
            <param name="sendPipe"></param>
        </member>
        <member name="M:MassTransit.ConsumeContext.RespondAsync``1(System.Object,MassTransit.IPipe{MassTransit.SendContext})">
            <summary>
            Responds to the current message immediately, returning the Task for the
            sending message. The caller may choose to await the response to ensure it was sent, or
            allow the framework to wait for it (which will happen automatically before the message is acknowledged)
            </summary>
            <typeparam name="T">The type of the message to respond with.</typeparam>
            <param name="values">The values for the message properties</param>
            <param name="sendPipe"></param>
        </member>
        <member name="M:MassTransit.ConsumeContext.Respond``1(``0)">
            <summary>
            Adds a response to the message being consumed, which will be sent once the consumer
            has completed. The message is not acknowledged until the response is acknowledged.
            </summary>
            <typeparam name="T">The type of the message to respond with.</typeparam>
            <param name="message">The message to send in response</param>
        </member>
        <member name="M:MassTransit.ConsumeContext.NotifyConsumed``1(MassTransit.ConsumeContext{``0},System.TimeSpan,System.String)">
            <summary>
            Notify that the message has been consumed -- note that this is internal, and should not be called by a consumer.
            </summary>
            <param name="context"></param>
            <param name="duration"></param>
            <param name="consumerType">The consumer type</param>
        </member>
        <member name="M:MassTransit.ConsumeContext.NotifyFaulted``1(MassTransit.ConsumeContext{``0},System.TimeSpan,System.String,System.Exception)">
            <summary>
            Notify that a message consumer has faulted -- note that this is internal, and should not be called by a consumer
            </summary>
            <param name="context"></param>
            <param name="duration"></param>
            <param name="consumerType">The message consumer type</param>
            <param name="exception">The exception that occurred</param>
        </member>
        <member name="M:MassTransit.ConsumeContext`1.NotifyConsumed(System.TimeSpan,System.String)">
            <summary>
            Notify that the message has been consumed -- note that this is internal, and should not be called by a consumer
            </summary>
            <param name="duration"></param>
            <param name="consumerType">The consumer type</param>
        </member>
        <member name="M:MassTransit.ConsumeContext`1.NotifyFaulted(System.TimeSpan,System.String,System.Exception)">
            <summary>
            Notify that a fault occurred during message consumption -- note that this is internal, and should not be called by a consumer
            </summary>
            <param name="duration"></param>
            <param name="consumerType"></param>
            <param name="exception"></param>
        </member>
        <member name="T:MassTransit.ConsumerConsumeContext`2">
            <summary>
            A consumer and consume context mixed together, carrying both a consumer and the message
            consume context.
            </summary>
            <typeparam name="TConsumer">The consumer type</typeparam>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="P:MassTransit.ConsumerConsumeContext`1.Consumer">
            <summary>
            The consumer which will handle the message
            </summary>
        </member>
        <member name="P:MassTransit.ConsumeRetryContext.RetryAttempt">
            <summary>
            The retry attempt in progress, or zero if this is the first time through
            </summary>
        </member>
        <member name="P:MassTransit.ConsumeRetryContext.RetryCount">
            <summary>
            The number of retries that have already been attempted, note that this is zero
            on the first retry attempt
            </summary>
        </member>
        <member name="T:MassTransit.Context.PublishEndpointConverterCache">
            <summary>
            Caches the converters that allow a raw object to be published using the object's type through
            the generic Send method.
            </summary>
        </member>
        <member name="T:MassTransit.Context.PublishEndpointConverterCache.IPublishEndpointConverter">
            <summary>
            Calls the generic version of the IPublishEndpoint.Send method with the object's type
            </summary>
        </member>
        <member name="T:MassTransit.Context.PublishEndpointConverterCache.PublishEndpointConverter`1">
            <summary>
            Converts the object message type to the generic type T and publishes it on the endpoint specified.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MassTransit.Context.ResponseEndpointConverterCache">
            <summary>
            Caches the converters that allow a raw object to be published using the object's type through
            the generic Send method.
            </summary>
        </member>
        <member name="T:MassTransit.Context.ResponseEndpointConverterCache.IResponseEndpointConverter">
            <summary>
            Calls the generic version of the ISendEndpoint.Send method with the object's type
            </summary>
        </member>
        <member name="T:MassTransit.Context.ResponseEndpointConverterCache.ResponseEndpointConverter`1">
            <summary>
            Converts the object type message to the appropriate generic type and invokes the send method with that
            generic overload.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MassTransit.Context.SendEndpointConverterCache">
            <summary>
            Caches the converters that allow a raw object to be published using the object's type through
            the generic Send method.
            </summary>
        </member>
        <member name="T:MassTransit.Context.SendEndpointConverterCache.ISendEndpointConverter">
            <summary>
            Calls the generic version of the ISendEndpoint.Send method with the object's type
            </summary>
        </member>
        <member name="T:MassTransit.Context.SendEndpointConverterCache.SendEndpointConverter`1">
            <summary>
            Converts the object type message to the appropriate generic type and invokes the send method with that
            generic overload.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:MassTransit.CourierContext.TrackingNumber">
            <summary>
            The tracking number for this routing slip
            </summary>
        </member>
        <member name="P:MassTransit.CourierContext.ActivityName">
            <summary>
            The name of the activity
            </summary>
        </member>
        <member name="P:MassTransit.CourierContext.ExecutionId">
            <summary>
            The executionId for this attempt at the activity
            </summary>
        </member>
        <member name="P:MassTransit.CourierContext.Timestamp">
            <summary>
            The start time for the activity execution
            </summary>
        </member>
        <member name="P:MassTransit.CourierContext.Elapsed">
            <summary>
            The time elapsed for the execution operation
            </summary>
        </member>
        <member name="P:MassTransit.ExceptionConsumeContext.Exception">
            <summary>
            The exception that was thrown
            </summary>
        </member>
        <member name="P:MassTransit.ExceptionConsumeContext.ExceptionInfo">
            <summary>
            The exception info, suitable for inclusion in a fault message
            </summary>
        </member>
        <member name="P:MassTransit.ExceptionConsumerConsumeContext`1.Exception">
            <summary>
            The exception that was thrown
            </summary>
        </member>
        <member name="P:MassTransit.ExceptionConsumerConsumeContext`1.ExceptionInfo">
            <summary>
            The exception info, suitable for inclusion in a fault message
            </summary>
        </member>
        <member name="P:MassTransit.ExceptionReceiveContext.Exception">
            <summary>
            The exception that was thrown
            </summary>
        </member>
        <member name="P:MassTransit.ExceptionReceiveContext.ExceptionTimestamp">
            <summary>
            The time at which the exception was thrown
            </summary>
        </member>
        <member name="P:MassTransit.ExceptionReceiveContext.ExceptionInfo">
            <summary>
            The exception info, suitable for inclusion in a fault message
            </summary>
        </member>
        <member name="P:MassTransit.ExceptionSagaConsumeContext`1.Exception">
            <summary>
            The exception that was thrown
            </summary>
        </member>
        <member name="P:MassTransit.ExceptionSagaConsumeContext`1.ExceptionInfo">
            <summary>
            The exception info, suitable for inclusion in a fault message
            </summary>
        </member>
        <member name="T:MassTransit.ExecuteActivityContext`2">
            <summary>
            An activity and execution context combined into a single container from the factory
            </summary>
            <typeparam name="TActivity"></typeparam>
            <typeparam name="TArguments"></typeparam>
        </member>
        <member name="P:MassTransit.ExecuteActivityContext`2.Activity">
            <summary>
            The activity that was created/used for this execution
            </summary>
        </member>
        <member name="P:MassTransit.ExecuteContext.Result">
            <summary>
            Set the execution result, which completes the activity
            </summary>
        </member>
        <member name="M:MassTransit.ExecuteContext.Completed">
            <summary>
            Completes the execution, without passing a compensating log entry
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ExecuteContext.CompletedWithVariables(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Completes the execution, passing updated variables to the routing slip
            </summary>
            <param name="variables"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ExecuteContext.CompletedWithVariables(System.Object)">
            <summary>
            Completes the execution, passing updated variables to the routing slip
            </summary>
            <param name="variables"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ExecuteContext.Completed``1(``0)">
            <summary>
            Completes the activity, passing a compensation log entry
            </summary>
            <typeparam name="TLog"></typeparam>
            <param name="log"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ExecuteContext.Completed``1(System.Object)">
            <summary>
            Completes the activity, passing a compensation log entry
            </summary>
            <typeparam name="TLog"></typeparam>
            <param name="logValues">An object to initialize the log properties</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ExecuteContext.CompletedWithVariables``1(``0,System.Object)">
            <summary>
            Completes the activity, passing a compensation log entry and additional variables to set on
            the routing slip
            </summary>
            <typeparam name="TLog"></typeparam>
            <param name="log"></param>
            <param name="variables">An anonymous object of values to add/set as variables on the routing slip</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ExecuteContext.CompletedWithVariables``1(System.Object,System.Object)">
            <summary>
            Completes the activity, passing a compensation log entry and additional variables to set on
            the routing slip
            </summary>
            <typeparam name="TLog"></typeparam>
            <param name="logValues"></param>
            <param name="variables">An anonymous object of values to add/set as variables on the routing slip</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ExecuteContext.CompletedWithVariables``1(``0,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Completes the activity, passing a compensation log entry and additional variables to set on
            the routing slip
            </summary>
            <typeparam name="TLog"></typeparam>
            <param name="log"></param>
            <param name="variables">An dictionary of values to add/set as variables on the routing slip</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ExecuteContext.Terminate">
            <summary>
            Terminate the routing slip (with extreme prejudice), completing it but discarding any remaining itinerary
            activities.
            </summary>
        </member>
        <member name="M:MassTransit.ExecuteContext.Terminate(System.Object)">
            <summary>
            Terminate the routing slip (with extreme prejudice), completing it but discarding any remaining itinerary
            activities.
            <param name="variables">An dictionary of values to add/set as variables on the routing slip</param>
            </summary>
        </member>
        <member name="M:MassTransit.ExecuteContext.Terminate(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Terminate the routing slip (with extreme prejudice), completing it but discarding any remaining itinerary
            activities.
            <param name="variables">An dictionary of values to add/set as variables on the routing slip</param>
            </summary>
        </member>
        <member name="M:MassTransit.ExecuteContext.Faulted">
            <summary>
            The activity Faulted for an unknown reason, but compensation should be triggered
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ExecuteContext.Faulted(System.Exception)">
            <summary>
            The activity Faulted, and compensation should be triggered
            </summary>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ExecuteContext.FaultedWithVariables(System.Exception,System.Object)">
            <summary>
            The activity Faulted with no exception, but compensation should be triggered and passing additional variables to set on
            the routing slip
            </summary>
            <param name="exception"></param>
            <param name="variables">An anonymous object of values to add/set as variables on the routing slip</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ExecuteContext.FaultedWithVariables(System.Exception,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            The activity Faulted with no exception, but compensation should be triggered and passing additional variables to set on
            the routing slip
            </summary>
            <param name="exception"></param>
            <param name="variables">An dictionary of values to add/set as variables on the routing slip</param>
            <returns></returns>
        </member>
        <member name="P:MassTransit.ExecuteContext`1.Arguments">
            <summary>
            The arguments from the routing slip for this activity
            </summary>
        </member>
        <member name="T:MassTransit.Headers">
            <summary>
            Headers are values outside of a message body transferred with the message.
            </summary>
        </member>
        <member name="M:MassTransit.Headers.GetAll">
            <summary>
            Returns all available headers
            </summary>
        </member>
        <member name="M:MassTransit.Headers.TryGetHeader(System.String,System.Object@)">
            <summary>
            If the specified header name is found, returns the value of the header as an object
            </summary>
            <param name="key">The header name</param>
            <param name="value">The output header value</param>
            <returns>True if the header is present, otherwise false</returns>
        </member>
        <member name="M:MassTransit.Headers.Get``1(System.String,``0)">
            <summary>
            Returns the specified header as the type, returning a default value is the header is not found
            </summary>
            <typeparam name="T">The result type</typeparam>
            <param name="key">The header name</param>
            <param name="defaultValue">The default value of the header if not found</param>
            <returns>The header value</returns>
        </member>
        <member name="M:MassTransit.Headers.Get``1(System.String,System.Nullable{``0})">
            <summary>
            Returns the specified header as the type, returning a default value is the header is not found
            </summary>
            <typeparam name="T">The result type</typeparam>
            <param name="key">The header name</param>
            <param name="defaultValue">The default value of the header if not found</param>
            <returns>The header value</returns>
        </member>
        <member name="P:MassTransit.JobContext`1.Job">
            <summary>
            The message that initiated the job
            </summary>
        </member>
        <member name="M:MassTransit.MessageBody.GetStream">
            <summary>
            Return the message body as a stream
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.MessageBody.GetBytes">
            <summary>
            Return the message body as a byte array
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.MessageBody.GetString">
            <summary>
            Return the message body as a string
            </summary>
            <returns></returns>
        </member>
        <member name="T:MassTransit.MessageContext">
            <summary>
            The message context includes the headers that are transferred with the message
            </summary>
        </member>
        <member name="P:MassTransit.MessageContext.MessageId">
            <summary>
            The messageId assigned to the message when it was initially Sent. This is different
            than the transport MessageId, which is only for the Transport.
            </summary>
        </member>
        <member name="P:MassTransit.MessageContext.RequestId">
            <summary>
            If the message is a request, or related to a request, such as a response or a fault,
            this contains the requestId.
            </summary>
        </member>
        <member name="P:MassTransit.MessageContext.CorrelationId">
            <summary>
            If the message implements the CorrelatedBy(Guid) interface, this field should be
            populated by default to match that value. It can, of course, be overwritten with
            something else.
            </summary>
        </member>
        <member name="P:MassTransit.MessageContext.ConversationId">
            <summary>
            The conversationId of the message, which is copied and carried throughout the message
            flow by the infrastructure.
            </summary>
        </member>
        <member name="P:MassTransit.MessageContext.InitiatorId">
            <summary>
            If this message was produced within the context of a previous message, the CorrelationId
            of the message is contained in this property. If the message was produced from a saga
            instance, the CorrelationId of the saga is used.
            </summary>
        </member>
        <member name="P:MassTransit.MessageContext.ExpirationTime">
            <summary>
            The expiration time of the message if it is not intended to last forever.
            </summary>
        </member>
        <member name="P:MassTransit.MessageContext.SourceAddress">
            <summary>
            The address of the message producer that sent the message
            </summary>
        </member>
        <member name="P:MassTransit.MessageContext.DestinationAddress">
            <summary>
            The destination address of the message
            </summary>
        </member>
        <member name="P:MassTransit.MessageContext.ResponseAddress">
            <summary>
            The response address to which responses to the request should be sent
            </summary>
        </member>
        <member name="P:MassTransit.MessageContext.FaultAddress">
            <summary>
            The fault address to which fault events should be sent if the message consumer faults
            </summary>
        </member>
        <member name="P:MassTransit.MessageContext.SentTime">
            <summary>
            When the message was originally sent
            </summary>
        </member>
        <member name="P:MassTransit.MessageContext.Headers">
            <summary>
            Additional application-specific headers that are added to the message by the application
            or by features within MassTransit, such as when a message is moved to an error queue.
            </summary>
        </member>
        <member name="P:MassTransit.MessageContext.Host">
            <summary>
            The host information of the message producer. This may not be present if the message was sent
            from an earlier version of MassTransit.
            </summary>
        </member>
        <member name="T:MassTransit.PipeContext">
            <summary>
            The base context for all pipe types, includes the payload side-banding of data
            with the payload, as well as the cancellationToken to avoid passing it everywhere
            </summary>
        </member>
        <member name="P:MassTransit.PipeContext.CancellationToken">
            <summary>
            Used to cancel the execution of the context
            </summary>
        </member>
        <member name="M:MassTransit.PipeContext.HasPayloadType(System.Type)">
            <summary>
            Checks if a payload is present in the context
            </summary>
            <param name="payloadType"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.PipeContext.TryGetPayload``1(``0@)">
            <summary>
            Retrieves a payload from the pipe context
            </summary>
            <typeparam name="T">The payload type</typeparam>
            <param name="payload">The payload</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.PipeContext.GetOrAddPayload``1(MassTransit.PayloadFactory{``0})">
            <summary>
            Returns an existing payload or creates the payload using the factory method provided
            </summary>
            <typeparam name="T">The payload type</typeparam>
            <param name="payloadFactory">The payload factory is the payload is not present</param>
            <returns>The payload</returns>
        </member>
        <member name="M:MassTransit.PipeContext.AddOrUpdatePayload``1(MassTransit.PayloadFactory{``0},MassTransit.UpdatePayloadFactory{``0})">
            <summary>
            Either adds a new payload, or updates an existing payload
            </summary>
            <param name="addFactory">The payload factory called if the payload is not present</param>
            <param name="updateFactory">The payload factory called if the payload already exists</param>
            <typeparam name="T">The payload type</typeparam>
            <returns></returns>
        </member>
        <member name="P:MassTransit.PublishContext.Mandatory">
            <summary>
            True if the message must be delivered to a subscriber
            </summary>
        </member>
        <member name="M:MassTransit.PublishExecuteExtensions.Publish``1(MassTransit.IPublishEndpoint,``0,System.Action{MassTransit.PublishContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Publish a message, using a callback to modify the publish context instead of building a pipe from scratch
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="endpoint">The endpoint to send the message</param>
            <param name="message">The message</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken">To cancel the send from happening</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.PublishExecuteExtensions.Publish``1(MassTransit.IPublishEndpoint,``0,System.Func{MassTransit.PublishContext{``0},System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Publish a message, using a callback to modify the publish context instead of building a pipe from scratch
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="endpoint">The endpoint to send the message</param>
            <param name="message">The message</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken">To cancel the send from happening</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.PublishExecuteExtensions.Publish(MassTransit.IPublishEndpoint,System.Object,System.Action{MassTransit.PublishContext},System.Threading.CancellationToken)">
            <summary>
            Publish a message, using a callback to modify the publish context instead of building a pipe from scratch
            </summary>
            <param name="endpoint">The endpoint to send the message</param>
            <param name="message">The message</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken">To cancel the send from happening</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.PublishExecuteExtensions.Publish(MassTransit.IPublishEndpoint,System.Object,System.Func{MassTransit.PublishContext,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Publish a message, using a callback to modify the publish context instead of building a pipe from scratch
            </summary>
            <param name="endpoint">The endpoint to send the message</param>
            <param name="message">The message</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken">To cancel the send from happening</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.PublishExecuteExtensions.Publish(MassTransit.IPublishEndpoint,System.Object,System.Type,System.Action{MassTransit.PublishContext},System.Threading.CancellationToken)">
            <summary>
            Publish a message, using a callback to modify the publish context instead of building a pipe from scratch
            </summary>
            <param name="endpoint">The endpoint to send the message</param>
            <param name="message">The message</param>
            <param name="messageType">The message type to send the object as</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken">To cancel the send from happening</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.PublishExecuteExtensions.Publish(MassTransit.IPublishEndpoint,System.Object,System.Type,System.Func{MassTransit.PublishContext,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Publish a message, using a callback to modify the publish context instead of building a pipe from scratch
            </summary>
            <param name="endpoint">The endpoint to send the message</param>
            <param name="message">The message</param>
            <param name="messageType">The message type to send the object as</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken">To cancel the send from happening</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.PublishExecuteExtensions.Publish``1(MassTransit.IPublishEndpoint,System.Object,System.Action{MassTransit.PublishContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Publish a message, using a callback to modify the publish context instead of building a pipe from scratch
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="endpoint">The endpoint to send the message</param>
            <param name="values">The values that map to the object</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken">To cancel the send from happening</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.PublishExecuteExtensions.Publish``1(MassTransit.IPublishEndpoint,System.Object,System.Func{MassTransit.PublishContext{``0},System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Publish a message, using a callback to modify the publish context instead of building a pipe from scratch
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="endpoint">The endpoint to send the message</param>
            <param name="values">The values that map to the object</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken">To cancel the send from happening</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="T:MassTransit.ReceiveContext">
            <summary>
            The receive context is sent from the transport when a message is ready to be processed
            from the transport.
            </summary>
        </member>
        <member name="P:MassTransit.ReceiveContext.InputAddress">
            <summary>
            The address on which the message was received
            </summary>
        </member>
        <member name="P:MassTransit.ReceiveContext.ContentType">
            <summary>
            The content type of the message, as determined by the available headers
            </summary>
        </member>
        <member name="P:MassTransit.ReceiveContext.Redelivered">
            <summary>
            If True, the message is being redelivered by the transport
            </summary>
        </member>
        <member name="P:MassTransit.ReceiveContext.TransportHeaders">
            <summary>
            Headers specific to the transport
            </summary>
        </member>
        <member name="P:MassTransit.ReceiveContext.ReceiveCompleted">
            <summary>
            The task that is completed once all pending tasks are completed
            </summary>
        </member>
        <member name="P:MassTransit.ReceiveContext.IsDelivered">
            <summary>
            Returns true if the message was successfully consumed by at least one consumer
            </summary>
        </member>
        <member name="P:MassTransit.ReceiveContext.IsFaulted">
            <summary>
            Returns true if a fault occurred during the message delivery
            </summary>
        </member>
        <member name="P:MassTransit.ReceiveContext.SendEndpointProvider">
            <summary>
            The send endpoint provider from the transport
            </summary>
        </member>
        <member name="P:MassTransit.ReceiveContext.PublishEndpointProvider">
            <summary>
            The publish endpoint provider from the transport
            </summary>
        </member>
        <member name="P:MassTransit.ReceiveContext.PublishFaults">
            <summary>
            If true (the default), faults should be published when no ResponseAddress or FaultAddress are present.
            </summary>
        </member>
        <member name="P:MassTransit.ReceiveContext.Body">
            <summary>
            The message body
            </summary>
        </member>
        <member name="M:MassTransit.ReceiveContext.NotifyConsumed``1(MassTransit.ConsumeContext{``0},System.TimeSpan,System.String)">
            <summary>
            Notify that a message has been consumed from the received context
            </summary>
            <param name="context">The consume context of the message</param>
            <param name="duration">The time spent by the consumer</param>
            <param name="consumerType">The consumer type</param>
        </member>
        <member name="M:MassTransit.ReceiveContext.NotifyFaulted``1(MassTransit.ConsumeContext{``0},System.TimeSpan,System.String,System.Exception)">
            <summary>
            Notify that a message consumer faulted
            </summary>
            <param name="context">The consume context of the message</param>
            <param name="duration">The time spent by the consumer</param>
            <param name="consumerType">The message consumer type that faulted</param>
            <param name="exception">The exception that occurred</param>
        </member>
        <member name="M:MassTransit.ReceiveContext.NotifyFaulted(System.Exception)">
            <summary>
            Notify that a message receive faulted outside of the message consumer
            </summary>
            <param name="exception">The exception that occurred</param>
        </member>
        <member name="M:MassTransit.ReceiveContext.AddReceiveTask(System.Threading.Tasks.Task)">
            <summary>
            Adds a pending Task to the completion of the message receiver
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:MassTransit.ReceiveContextBodyExtensions.GetBodyStream(MassTransit.ReceiveContext)">
            <summary>
            Returns the message body as a stream that can be deserialized. The stream
            must be disposed by the caller, a reference is not retained
            </summary>
        </member>
        <member name="M:MassTransit.ReceiveContextBodyExtensions.GetBody(MassTransit.ReceiveContext)">
            <summary>
            Returns the body as a byte[]
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ReceiveContextExtensions.GetMessageId(MassTransit.ReceiveContext)">
            <summary>
            Returns the messageId from the transport header, if available
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ReceiveContextExtensions.GetMessageId(MassTransit.ReceiveContext,System.Guid)">
            <summary>
            Returns the messageId from the transport header, if available
            </summary>
            <param name="context"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ReceiveContextExtensions.GetCorrelationId(MassTransit.ReceiveContext)">
            <summary>
            Returns the CorrelationId from the transport header, if available
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ReceiveContextExtensions.GetConversationId(MassTransit.ReceiveContext)">
            <summary>
            Returns the ConversationId from the transport header, if available
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ReceiveContextExtensions.GetRequestId(MassTransit.ReceiveContext)">
            <summary>
            Returns the RequestId from the transport header, if available
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ReceiveContextExtensions.GetInitiatorId(MassTransit.ReceiveContext)">
            <summary>
            Returns the InitiatorId from the transport header, if available
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ReceiveContextExtensions.GetSourceAddress(MassTransit.ReceiveContext)">
            <summary>
            Returns the SourceAddress from the transport headers, if present
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ReceiveContextExtensions.GetResponseAddress(MassTransit.ReceiveContext)">
            <summary>
            Returns the ResponseAddress from the transport headers, if present
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ReceiveContextExtensions.GetFaultAddress(MassTransit.ReceiveContext)">
            <summary>
            Returns the FaultAddress from the transport headers, if present
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ReceiveContextExtensions.GetMessageEncoding(MassTransit.ReceiveContext)">
            <summary>
            Returns either the Content-Encoding from the transport header, or the default UTF-8 encoding (no BOM).
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ReceiveContextExtensions.GetMessageId(MassTransit.Headers)">
            <summary>
            Returns the messageId from the transport header, if available
            </summary>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ReceiveContextExtensions.GetMessageId(MassTransit.Headers,System.Guid)">
            <summary>
            Returns the messageId from the transport header, if available
            </summary>
            <param name="headers"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ReceiveContextExtensions.GetCorrelationId(MassTransit.Headers)">
            <summary>
            Returns the CorrelationId from the transport header, if available
            </summary>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ReceiveContextExtensions.GetConversationId(MassTransit.Headers)">
            <summary>
            Returns the ConversationId from the transport header, if available
            </summary>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ReceiveContextExtensions.GetRequestId(MassTransit.Headers)">
            <summary>
            Returns the RequestId from the transport header, if available
            </summary>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ReceiveContextExtensions.GetInitiatorId(MassTransit.Headers)">
            <summary>
            Returns the InitiatorId from the transport header, if available
            </summary>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ReceiveContextExtensions.GetSourceAddress(MassTransit.Headers)">
            <summary>
            Returns the SourceAddress from the transport headers, if present
            </summary>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ReceiveContextExtensions.GetResponseAddress(MassTransit.Headers)">
            <summary>
            Returns the ResponseAddress from the transport headers, if present
            </summary>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ReceiveContextExtensions.GetFaultAddress(MassTransit.Headers)">
            <summary>
            Returns the FaultAddress from the transport headers, if present
            </summary>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ReceiveContextExtensions.GetMessageEncoding(MassTransit.Headers)">
            <summary>
            Returns either the Content-Encoding from the transport header, or the default UTF-8 encoding (no BOM).
            </summary>
            <param name="headers"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.RespondAsyncExecuteExtensions.RespondAsync``1(MassTransit.ConsumeContext,``0,System.Action{MassTransit.SendContext{``0}})">
            <summary>
            Responds to the current message immediately, returning the Task for the
            sending message. The caller may choose to await the response to ensure it was sent, or
            allow the framework to wait for it (which will happen automatically before the message is acked)
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The context to send the message</param>
            <param name="message">The message</param>
            <param name="callback">The callback for the send context</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.RespondAsyncExecuteExtensions.RespondAsync``1(MassTransit.ConsumeContext,``0,System.Func{MassTransit.SendContext{``0},System.Threading.Tasks.Task})">
            <summary>
            Responds to the current message immediately, returning the Task for the
            sending message. The caller may choose to await the response to ensure it was sent, or
            allow the framework to wait for it (which will happen automatically before the message is acked)
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The context to send the message</param>
            <param name="message">The message</param>
            <param name="callback">The callback for the send context</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.RespondAsyncExecuteExtensions.RespondAsync(MassTransit.ConsumeContext,System.Object,System.Action{MassTransit.SendContext})">
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.RespondAsyncExecuteExtensions.RespondAsync(MassTransit.ConsumeContext,System.Object,System.Func{MassTransit.SendContext,System.Threading.Tasks.Task})">
            <summary>
            Responds to the current message immediately, returning the Task for the
            sending message. The caller may choose to await the response to ensure it was sent, or
            allow the framework to wait for it (which will happen automatically before the message is acked)
            </summary>
            <param name="context">The context to send the message</param>
            <param name="message">The message</param>
            <param name="callback">The callback for the send context</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.RespondAsyncExecuteExtensions.RespondAsync(MassTransit.ConsumeContext,System.Object,System.Type,System.Action{MassTransit.SendContext})">
            <summary>
            Responds to the current message immediately, returning the Task for the
            sending message. The caller may choose to await the response to ensure it was sent, or
            allow the framework to wait for it (which will happen automatically before the message is acked)
            </summary>
            <param name="context">The context to send the message</param>
            <param name="message">The message</param>
            <param name="messageType">The message type to send the object as</param>
            <param name="callback">The callback for the send context</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.RespondAsyncExecuteExtensions.RespondAsync(MassTransit.ConsumeContext,System.Object,System.Type,System.Func{MassTransit.SendContext,System.Threading.Tasks.Task})">
            <summary>
            Responds to the current message immediately, returning the Task for the
            sending message. The caller may choose to await the response to ensure it was sent, or
            allow the framework to wait for it (which will happen automatically before the message is acked)
            </summary>
            <param name="context">The context to send the message</param>
            <param name="message">The message</param>
            <param name="messageType">The message type to send the object as</param>
            <param name="callback">The callback for the send context</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.RespondAsyncExecuteExtensions.RespondAsync``1(MassTransit.ConsumeContext,System.Object,System.Action{MassTransit.SendContext{``0}})">
            <summary>
            Responds to the current message immediately, returning the Task for the
            sending message. The caller may choose to await the response to ensure it was sent, or
            allow the framework to wait for it (which will happen automatically before the message is acked)
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The context to send the message</param>
            <param name="values">The values that map to the object</param>
            <param name="callback">The callback for the send context</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.RespondAsyncExecuteExtensions.RespondAsync``1(MassTransit.ConsumeContext,System.Object,System.Func{MassTransit.SendContext{``0},System.Threading.Tasks.Task})">
            <summary>
            Responds to the current message immediately, returning the Task for the
            sending message. The caller may choose to await the response to ensure it was sent, or
            allow the framework to wait for it (which will happen automatically before the message is acked)
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The context to send the message</param>
            <param name="values">The values that map to the object</param>
            <param name="callback">The callback for the send context</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="P:MassTransit.RoutingKeyConsumeContext.RoutingKey">
            <summary>
            The routing key for the message (defaults to "")
            </summary>
        </member>
        <member name="M:MassTransit.RoutingKeyExtensions.SetRoutingKey(MassTransit.SendContext,System.String)">
            <summary>
            Sets the routing key for this message
            </summary>
            <param name="context"></param>
            <param name="routingKey">The routing key for this message</param>
        </member>
        <member name="M:MassTransit.RoutingKeyExtensions.TrySetRoutingKey(MassTransit.SendContext,System.String)">
            <summary>
            Sets the routing key for this message
            </summary>
            <param name="context"></param>
            <param name="routingKey">The routing key for this message</param>
        </member>
        <member name="P:MassTransit.RoutingKeySendContext.RoutingKey">
            <summary>
            The routing key for the message (defaults to "")
            </summary>
        </member>
        <member name="T:MassTransit.SagaConsumeContext`2">
            <summary>
            Consume context including the saga instance consuming the message
            </summary>
            <typeparam name="TSaga">The saga type</typeparam>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="T:MassTransit.SagaConsumeContext`1">
            <summary>
            Consume context including the saga instance consuming the message. Note
            this does not expose the message type, for filters that do not care about message type.
            </summary>
            <typeparam name="TSaga">The saga type</typeparam>
        </member>
        <member name="P:MassTransit.SagaConsumeContext`1.Saga">
            <summary>
            The saga instance for the current consume operation
            </summary>
        </member>
        <member name="P:MassTransit.SagaConsumeContext`1.IsCompleted">
            <summary>
            True if the saga has been completed, signaling that the repository may remove it.
            </summary>
        </member>
        <member name="M:MassTransit.SagaConsumeContext`1.SetCompleted">
            <summary>
            Mark the saga instance as completed, which may remove it from the repository or archive it, etc.
            Once completed, a saga instance should never again be visible, even if the same CorrelationId is
            specified.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.SendConsumeContextExecuteExtensions.Send``1(MassTransit.ConsumeContext,System.Uri,``0,System.Action{MassTransit.SendContext{``0}})">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context"></param>
            <param name="destinationAddress"></param>
            <param name="message">The message</param>
            <param name="callback">The callback for the send context</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendConsumeContextExecuteExtensions.Send``1(MassTransit.ConsumeContext,System.Uri,``0,System.Func{MassTransit.SendContext{``0},System.Threading.Tasks.Task})">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context"></param>
            <param name="destinationAddress"></param>
            <param name="message">The message</param>
            <param name="callback">The callback for the send context</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendConsumeContextExecuteExtensions.Send(MassTransit.ConsumeContext,System.Uri,System.Object,System.Action{MassTransit.SendContext})">
            <summary>
            Send a message
            </summary>
            <param name="context"></param>
            <param name="destinationAddress"></param>
            <param name="message">The message</param>
            <param name="callback">The callback for the send context</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendConsumeContextExecuteExtensions.Send(MassTransit.ConsumeContext,System.Uri,System.Object,System.Func{MassTransit.SendContext,System.Threading.Tasks.Task})">
            <summary>
            Send a message
            </summary>
            <param name="context"></param>
            <param name="destinationAddress"></param>
            <param name="message">The message</param>
            <param name="callback">The callback for the send context</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendConsumeContextExecuteExtensions.Send(MassTransit.ConsumeContext,System.Uri,System.Object,System.Type,System.Action{MassTransit.SendContext})">
            <summary>
            Send a message
            </summary>
            <param name="context"></param>
            <param name="destinationAddress"></param>
            <param name="message">The message</param>
            <param name="messageType"></param>
            <param name="callback">The callback for the send context</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendConsumeContextExecuteExtensions.Send(MassTransit.ConsumeContext,System.Uri,System.Object,System.Type,System.Func{MassTransit.SendContext,System.Threading.Tasks.Task})">
            <summary>
            Send a message
            </summary>
            <param name="context"></param>
            <param name="destinationAddress"></param>
            <param name="message">The message</param>
            <param name="messageType"></param>
            <param name="callback">The callback for the send context</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendConsumeContextExecuteExtensions.Send``1(MassTransit.ConsumeContext,System.Uri,System.Object,System.Action{MassTransit.SendContext{``0}})">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context"></param>
            <param name="destinationAddress"></param>
            <param name="values"></param>
            <param name="callback">The callback for the send context</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendConsumeContextExecuteExtensions.Send``1(MassTransit.ConsumeContext,System.Uri,System.Object,System.Func{MassTransit.SendContext{``0},System.Threading.Tasks.Task})">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context"></param>
            <param name="destinationAddress"></param>
            <param name="values"></param>
            <param name="callback">The callback for the send context</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendConsumeContextExtensions.Send``1(MassTransit.ConsumeContext,System.Uri,``0)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context"></param>
            <param name="destinationAddress"></param>
            <param name="message">The message</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendConsumeContextExtensions.Send``1(MassTransit.ConsumeContext,System.Uri,``0,MassTransit.IPipe{MassTransit.SendContext{``0}})">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context"></param>
            <param name="destinationAddress"></param>
            <param name="message">The message</param>
            <param name="pipe"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendConsumeContextExtensions.Send``1(MassTransit.ConsumeContext,System.Uri,``0,MassTransit.IPipe{MassTransit.SendContext})">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context"></param>
            <param name="destinationAddress"></param>
            <param name="message">The message</param>
            <param name="pipe"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendConsumeContextExtensions.Send(MassTransit.ConsumeContext,System.Uri,System.Object)">
            <summary>
            Send a message
            </summary>
            <param name="context"></param>
            <param name="destinationAddress"></param>
            <param name="message">The message</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendConsumeContextExtensions.Send(MassTransit.ConsumeContext,System.Uri,System.Object,System.Type)">
            <summary>
            Send a message
            </summary>
            <param name="context"></param>
            <param name="destinationAddress"></param>
            <param name="message">The message</param>
            <param name="messageType"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendConsumeContextExtensions.Send(MassTransit.ConsumeContext,System.Uri,System.Object,System.Type,MassTransit.IPipe{MassTransit.SendContext})">
            <summary>
            Send a message
            </summary>
            <param name="context"></param>
            <param name="destinationAddress"></param>
            <param name="message">The message</param>
            <param name="messageType"></param>
            <param name="pipe"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendConsumeContextExtensions.Send(MassTransit.ConsumeContext,System.Uri,System.Object,MassTransit.IPipe{MassTransit.SendContext})">
            <summary>
            Send a message
            </summary>
            <param name="context"></param>
            <param name="destinationAddress"></param>
            <param name="message">The message</param>
            <param name="pipe"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendConsumeContextExtensions.Send``1(MassTransit.ConsumeContext,System.Uri,System.Object)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context"></param>
            <param name="destinationAddress"></param>
            <param name="values"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendConsumeContextExtensions.Send``1(MassTransit.ConsumeContext,System.Uri,System.Object,MassTransit.IPipe{MassTransit.SendContext{``0}})">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context"></param>
            <param name="destinationAddress"></param>
            <param name="values"></param>
            <param name="pipe"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendConsumeContextExtensions.Send``1(MassTransit.ConsumeContext,System.Uri,System.Object,MassTransit.IPipe{MassTransit.SendContext})">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context"></param>
            <param name="destinationAddress"></param>
            <param name="values"></param>
            <param name="pipe"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="T:MassTransit.SendContext`1">
            <summary>
            The SendContext is used to tweak the send to the endpoint
            </summary>
            <typeparam name="T">The message type being sent</typeparam>
        </member>
        <member name="P:MassTransit.SendContext`1.Message">
            <summary>
            The message being sent
            </summary>
        </member>
        <member name="T:MassTransit.SendContext">
            <summary>
            Unlike the old world, the send context is returned from the endpoint and used to configure the message sending.
            That way the message is captured by the endpoint and then any configuration is done at the higher level.
            </summary>
        </member>
        <member name="P:MassTransit.SendContext.Durable">
            <summary>
            True if the message should be persisted to disk to survive a broker restart
            </summary>
        </member>
        <member name="P:MassTransit.SendContext.Delay">
            <summary>
            If specified, the message delivery will be delayed by the transport (if supported)
            </summary>
        </member>
        <member name="P:MassTransit.SendContext.Serializer">
            <summary>
            The serializer to use when serializing the message to the transport
            </summary>
        </member>
        <member name="P:MassTransit.SendContext.Serialization">
            <summary>
            The endpoint configured serialization collection
            </summary>
        </member>
        <member name="P:MassTransit.SendContext.BodyLength">
            <summary>
            After serialization, should return the length of the message body
            </summary>
        </member>
        <member name="M:MassTransit.SendContext.CreateProxy``1(``0)">
            <summary>
            Create a send context proxy with the new message type
            </summary>
            <typeparam name="T"></typeparam>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.SendContextExtensions.SetHostHeaders(MassTransit.SendHeaders)">
            <summary>
            Set the host headers on the SendContext (for error, dead-letter, etc.)
            </summary>
            <param name="headers"></param>
        </member>
        <member name="M:MassTransit.SendContextExtensions.SetHostHeaders``1(MassTransit.Transports.ITransportSetHeaderAdapter{``0},System.Collections.Generic.IDictionary{System.String,``0})">
            <summary>
            Set the host headers on the SendContext (for error, dead-letter, etc.)
            </summary>
            <param name="adapter"></param>
            <param name="dictionary"></param>
        </member>
        <member name="M:MassTransit.SendContextExtensions.SetExceptionHeaders(MassTransit.SendHeaders,MassTransit.ExceptionReceiveContext)">
            <summary>
            Set the host headers on the SendContext (for error, dead-letter, etc.)
            </summary>
            <param name="headers"></param>
            <param name="exceptionContext"></param>
        </member>
        <member name="M:MassTransit.SendContextExtensions.SetExceptionHeaders``1(MassTransit.Transports.ITransportSetHeaderAdapter{``0},System.Collections.Generic.IDictionary{System.String,``0},MassTransit.ExceptionReceiveContext)">
            <summary>
            Set the host headers on the SendContext (for error, dead-letter, etc.)
            </summary>
            <param name="adapter"></param>
            <param name="headers"></param>
            <param name="exceptionContext"></param>
        </member>
        <member name="M:MassTransit.SendContextExtensions.TransferConsumeContextHeaders(MassTransit.SendContext,MassTransit.ConsumeContext)">
            <summary>
            Transfer the header information from the ConsumeContext to the SendContext, including any non-MT headers.
            </summary>
            <param name="sendContext"></param>
            <param name="consumeContext"></param>
        </member>
        <member name="M:MassTransit.SendContextExtensions.ReplaceMessageId(MassTransit.SendContext,MassTransit.ConsumeContext)">
            <summary>
            Generate a new MessageId, storing the original MessageId in the OriginalMessageId header (unless it already exists)
            </summary>
            <param name="sendContext"></param>
            <param name="consumeContext"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.SendContextExtensions.GetOriginalMessageId(MassTransit.ConsumeContext)">
            <summary>
            Returns the original MessageId from the message headers, or the MessageId if not present
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.SendContextExtensions.StartNewConversation(MassTransit.SendContext)">
            <summary>
            Sets the ConversationId to a new value, starting a new conversation. If a message was being consumed, and the
            ConversationId was present, that value is stored in an MT-InitiatingConversationId header.
            </summary>
            <param name="context">The send context</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.SendContextExtensions.StartNewConversation(MassTransit.SendContext,System.Guid)">
            <summary>
            Sets the ConversationId to a new value, starting a new conversation. If a message was being consumed, and the
            ConversationId was present, that value is stored in an MT-InitiatingConversationId header.
            </summary>
            <param name="context">The send context</param>
            <param name="conversationId">The new ConversationId</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.SendExecuteExtensions.Send``1(MassTransit.ISendEndpoint,``0,System.Action{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Send a message, using a callback to modify the send context instead of building a pipe from scratch
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="endpoint">The endpoint to send the message</param>
            <param name="message">The message</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken">To cancel the send from happening</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendExecuteExtensions.Send``1(MassTransit.ISendEndpoint,``0,System.Func{MassTransit.SendContext{``0},System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Send a message, using a callback to modify the send context instead of building a pipe from scratch
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="endpoint">The endpoint to send the message</param>
            <param name="message">The message</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken">To cancel the send from happening</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendExecuteExtensions.Send(MassTransit.ISendEndpoint,System.Object,System.Action{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Send a message, using a callback to modify the send context instead of building a pipe from scratch
            </summary>
            <param name="endpoint">The endpoint to send the message</param>
            <param name="message">The message</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken">To cancel the send from happening</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendExecuteExtensions.Send(MassTransit.ISendEndpoint,System.Object,System.Func{MassTransit.SendContext,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Send a message, using a callback to modify the send context instead of building a pipe from scratch
            </summary>
            <param name="endpoint">The endpoint to send the message</param>
            <param name="message">The message</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken">To cancel the send from happening</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendExecuteExtensions.Send(MassTransit.ISendEndpoint,System.Object,System.Type,System.Action{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Send a message, using a callback to modify the send context instead of building a pipe from scratch
            </summary>
            <param name="endpoint">The endpoint to send the message</param>
            <param name="message">The message</param>
            <param name="messageType">The message type to send the object as</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken">To cancel the send from happening</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendExecuteExtensions.Send(MassTransit.ISendEndpoint,System.Object,System.Type,System.Func{MassTransit.SendContext,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Send a message, using a callback to modify the send context instead of building a pipe from scratch
            </summary>
            <param name="endpoint">The endpoint to send the message</param>
            <param name="message">The message</param>
            <param name="messageType">The message type to send the object as</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken">To cancel the send from happening</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendExecuteExtensions.Send``1(MassTransit.ISendEndpoint,System.Object,System.Action{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Send a message, using a callback to modify the send context instead of building a pipe from scratch
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="endpoint">The endpoint to send the message</param>
            <param name="values">The values that map to the object</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken">To cancel the send from happening</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendExecuteExtensions.Send``1(MassTransit.ISendEndpoint,System.Object,System.Func{MassTransit.SendContext{``0},System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Send a message, using a callback to modify the send context instead of building a pipe from scratch
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="endpoint">The endpoint to send the message</param>
            <param name="values">The values that map to the object</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken">To cancel the send from happening</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SerializerContext.GetMessageSerializer">
            <summary>
            Returns a message serializer using the deserialized message ContentType, that can be used to
            serialize the message on another <see cref="T:MassTransit.SendContext" />.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.SerializerContext.GetMessageSerializer``1(MassTransit.Serialization.MessageEnvelope,``0)">
            <summary>
            Returns a message serializer using the deserialized message ContentType, that can be used to
            serialize the message on another <see cref="T:MassTransit.SendContext" />.
            </summary>
            <param name="envelope">The message envelope to modify</param>
            <param name="message">A message to overlay on top of the existing message, merging the properties together</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.SerializerContext.GetMessageSerializer(System.Object,System.String[])">
            <summary>
            Returns a message serializer using the deserialized message ContentType, that can be used to
            serialize the message on another <see cref="T:MassTransit.SendContext" />.
            </summary>
            <param name="message">A message to overlay on top of the existing message, merging the properties together</param>
            <param name="messageTypes">The supported message types</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.SerializerContext.ToDictionary``1(``0)">
            <summary>
            Converts a message (or really any object) to a dictionary of string, object. This is serializer dependent, since
            JSON serializers use internal objects for object properties, to encapsulate nested properties, etc.
            </summary>
            <param name="message">The message</param>
            <typeparam name="T">The message type</typeparam>
            <returns></returns>
        </member>
        <member name="T:MassTransit.StopContext">
            <summary>
            The context associated with stopping an agent
            </summary>
        </member>
        <member name="P:MassTransit.StopContext.Reason">
            <summary>
            The reason for stopping
            </summary>
        </member>
        <member name="P:MassTransit.StopSupervisorContext.Agents">
            <summary>
            The agents available when the Stop was initiated
            </summary>
        </member>
        <member name="M:MassTransit.TimeSpanContextScheduleExtensions.ScheduleSend``1(MassTransit.MessageSchedulerContext,System.TimeSpan,``0,System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="scheduler">The message scheduler</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="message">The message</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanContextScheduleExtensions.ScheduleSend``1(MassTransit.MessageSchedulerContext,System.TimeSpan,``0,MassTransit.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="scheduler">The message scheduler</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="message">The message</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanContextScheduleExtensions.ScheduleSend``1(MassTransit.MessageSchedulerContext,System.TimeSpan,``0,System.Action{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Send a message, using a callback to modify the send context instead of building a pipe from scratch
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="scheduler">The message scheduler</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="message">The message</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken">To cancel the send from happening</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanContextScheduleExtensions.ScheduleSend``1(MassTransit.MessageSchedulerContext,System.TimeSpan,``0,System.Func{MassTransit.SendContext{``0},System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Send a message, using a callback to modify the send context instead of building a pipe from scratch
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="scheduler">The message scheduler</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="message">The message</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken">To cancel the send from happening</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanContextScheduleExtensions.ScheduleSend``1(MassTransit.MessageSchedulerContext,System.TimeSpan,``0,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="scheduler">The message scheduler</param>
            <param name="message">The message</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanContextScheduleExtensions.ScheduleSend``1(MassTransit.MessageSchedulerContext,System.TimeSpan,``0,System.Action{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Send a message, using a callback to modify the send context instead of building a pipe from scratch
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="scheduler">The message scheduler</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="message">The message</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken">To cancel the send from happening</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanContextScheduleExtensions.ScheduleSend``1(MassTransit.MessageSchedulerContext,System.TimeSpan,``0,System.Func{MassTransit.SendContext,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Send a message, using a callback to modify the send context instead of building a pipe from scratch
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="scheduler">The message scheduler</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="message">The message</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken">To cancel the send from happening</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanContextScheduleExtensions.ScheduleSend(MassTransit.MessageSchedulerContext,System.TimeSpan,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sends an object as a message, using the type of the message instance.
            </summary>
            <param name="scheduler">The message scheduler</param>
            <param name="message">The message object</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanContextScheduleExtensions.ScheduleSend(MassTransit.MessageSchedulerContext,System.TimeSpan,System.Object,System.Type,System.Threading.CancellationToken)">
            <summary>
            Sends an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="scheduler">The message scheduler</param>
            <param name="message">The message object</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanContextScheduleExtensions.ScheduleSend(MassTransit.MessageSchedulerContext,System.TimeSpan,System.Object,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Sends an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="scheduler">The message scheduler</param>
            <param name="message">The message object</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanContextScheduleExtensions.ScheduleSend(MassTransit.MessageSchedulerContext,System.TimeSpan,System.Object,System.Func{MassTransit.SendContext,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Sends an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="scheduler">The message scheduler</param>
            <param name="message">The message object</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanContextScheduleExtensions.ScheduleSend(MassTransit.MessageSchedulerContext,System.TimeSpan,System.Object,System.Action{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Sends an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="scheduler">The message scheduler</param>
            <param name="message">The message object</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanContextScheduleExtensions.ScheduleSend(MassTransit.MessageSchedulerContext,System.TimeSpan,System.Object,System.Type,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Sends an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="scheduler">The message scheduler</param>
            <param name="message">The message object</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanContextScheduleExtensions.ScheduleSend(MassTransit.MessageSchedulerContext,System.TimeSpan,System.Object,System.Type,System.Action{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Sends an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="scheduler">The message scheduler</param>
            <param name="message">The message object</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanContextScheduleExtensions.ScheduleSend(MassTransit.MessageSchedulerContext,System.TimeSpan,System.Object,System.Type,System.Func{MassTransit.SendContext,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Sends an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="scheduler">The message scheduler</param>
            <param name="message">The message object</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanContextScheduleExtensions.ScheduleSend``1(MassTransit.MessageSchedulerContext,System.TimeSpan,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sends an interface message, initializing the properties of the interface using the anonymous
            object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="scheduler">The message scheduler</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanContextScheduleExtensions.ScheduleSend``1(MassTransit.MessageSchedulerContext,System.TimeSpan,System.Object,MassTransit.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Sends an interface message, initializing the properties of the interface using the anonymous
            object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="scheduler">The message scheduler</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanContextScheduleExtensions.ScheduleSend``1(MassTransit.MessageSchedulerContext,System.TimeSpan,System.Object,System.Action{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Sends an interface message, initializing the properties of the interface using the anonymous
            object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="scheduler">The message scheduler</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanContextScheduleExtensions.ScheduleSend``1(MassTransit.MessageSchedulerContext,System.TimeSpan,System.Object,System.Func{MassTransit.SendContext{``0},System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Sends an interface message, initializing the properties of the interface using the anonymous
            object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="scheduler">The message scheduler</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanContextScheduleExtensions.ScheduleSend``1(MassTransit.MessageSchedulerContext,System.TimeSpan,System.Object,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Sends an interface message, initializing the properties of the interface using the anonymous
            object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="scheduler">The message scheduler</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanContextScheduleExtensions.ScheduleSend``1(MassTransit.MessageSchedulerContext,System.TimeSpan,System.Object,System.Action{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Sends an interface message, initializing the properties of the interface using the anonymous
            object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="scheduler">The message scheduler</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanContextScheduleExtensions.ScheduleSend``1(MassTransit.MessageSchedulerContext,System.TimeSpan,System.Object,System.Func{MassTransit.SendContext,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Sends an interface message, initializing the properties of the interface using the anonymous
            object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="scheduler">The message scheduler</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanScheduleExtensions.ScheduleSend``1(MassTransit.IMessageScheduler,System.Uri,System.TimeSpan,``0,System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="scheduler">The message scheduler</param>
            <param name="message">The message</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanScheduleExtensions.ScheduleSend``1(MassTransit.IMessageScheduler,System.Uri,System.TimeSpan,``0,MassTransit.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="scheduler">The message scheduler</param>
            <param name="message">The message</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanScheduleExtensions.ScheduleSend``1(MassTransit.IMessageScheduler,System.Uri,System.TimeSpan,``0,System.Action{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="scheduler">The message scheduler</param>
            <param name="message">The message</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanScheduleExtensions.ScheduleSend``1(MassTransit.IMessageScheduler,System.Uri,System.TimeSpan,``0,System.Func{MassTransit.SendContext{``0},System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="scheduler">The message scheduler</param>
            <param name="message">The message</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanScheduleExtensions.ScheduleSend``1(MassTransit.IMessageScheduler,System.Uri,System.TimeSpan,``0,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="scheduler">The message scheduler</param>
            <param name="message">The message</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanScheduleExtensions.ScheduleSend``1(MassTransit.IMessageScheduler,System.Uri,System.TimeSpan,``0,System.Action{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="scheduler">The message scheduler</param>
            <param name="message">The message</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanScheduleExtensions.ScheduleSend``1(MassTransit.IMessageScheduler,System.Uri,System.TimeSpan,``0,System.Func{MassTransit.SendContext,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="scheduler">The message scheduler</param>
            <param name="message">The message</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken">The cancellation token</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanScheduleExtensions.ScheduleSend(MassTransit.IMessageScheduler,System.Uri,System.TimeSpan,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sends an object as a message, using the type of the message instance.
            </summary>
            <param name="scheduler">The message scheduler</param>
            <param name="message">The message object</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanScheduleExtensions.ScheduleSend(MassTransit.IMessageScheduler,System.Uri,System.TimeSpan,System.Object,System.Type,System.Threading.CancellationToken)">
            <summary>
            Sends an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="scheduler">The message scheduler</param>
            <param name="message">The message object</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanScheduleExtensions.ScheduleSend(MassTransit.IMessageScheduler,System.Uri,System.TimeSpan,System.Object,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Sends an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="scheduler">The message scheduler</param>
            <param name="message">The message object</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanScheduleExtensions.ScheduleSend(MassTransit.IMessageScheduler,System.Uri,System.TimeSpan,System.Object,System.Action{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Sends an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="scheduler">The message scheduler</param>
            <param name="message">The message object</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken">The token used to cancel the operation</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanScheduleExtensions.ScheduleSend(MassTransit.IMessageScheduler,System.Uri,System.TimeSpan,System.Object,System.Func{MassTransit.SendContext,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Sends an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="scheduler">The message scheduler</param>
            <param name="message">The message object</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="callback">The callback for the send context</param>
            <param name="cancellationToken">The token used to cancel the operation</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanScheduleExtensions.ScheduleSend(MassTransit.IMessageScheduler,System.Uri,System.TimeSpan,System.Object,System.Type,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Sends an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="scheduler">The message scheduler</param>
            <param name="message">The message object</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanScheduleExtensions.ScheduleSend(MassTransit.IMessageScheduler,System.Uri,System.TimeSpan,System.Object,System.Type,System.Action{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Sends an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="scheduler">The message scheduler</param>
            <param name="message">The message object</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="callback">The send callback</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanScheduleExtensions.ScheduleSend(MassTransit.IMessageScheduler,System.Uri,System.TimeSpan,System.Object,System.Type,System.Func{MassTransit.SendContext,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Sends an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="scheduler">The message scheduler</param>
            <param name="message">The message object</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="callback">The send callback</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanScheduleExtensions.ScheduleSend``1(MassTransit.IMessageScheduler,System.Uri,System.TimeSpan,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sends an interface message, initializing the properties of the interface using the anonymous
            object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="scheduler">The message scheduler</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanScheduleExtensions.ScheduleSend``1(MassTransit.IMessageScheduler,System.Uri,System.TimeSpan,System.Object,MassTransit.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Sends an interface message, initializing the properties of the interface using the anonymous
            object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="scheduler">The message scheduler</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanScheduleExtensions.ScheduleSend``1(MassTransit.IMessageScheduler,System.Uri,System.TimeSpan,System.Object,System.Action{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Sends an interface message, initializing the properties of the interface using the anonymous
            object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="scheduler">The message scheduler</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="callback">The send callback</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanScheduleExtensions.ScheduleSend``1(MassTransit.IMessageScheduler,System.Uri,System.TimeSpan,System.Object,System.Func{MassTransit.SendContext{``0},System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Sends an interface message, initializing the properties of the interface using the anonymous
            object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="scheduler">The message scheduler</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="callback">The send callback</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanScheduleExtensions.ScheduleSend``1(MassTransit.IMessageScheduler,System.Uri,System.TimeSpan,System.Object,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Sends an interface message, initializing the properties of the interface using the anonymous
            object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="scheduler">The message scheduler</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanScheduleExtensions.ScheduleSend``1(MassTransit.IMessageScheduler,System.Uri,System.TimeSpan,System.Object,System.Action{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Sends an interface message, initializing the properties of the interface using the anonymous
            object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="scheduler">The message scheduler</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="callback">The send callback</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanScheduleExtensions.ScheduleSend``1(MassTransit.IMessageScheduler,System.Uri,System.TimeSpan,System.Object,System.Func{MassTransit.SendContext,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Sends an interface message, initializing the properties of the interface using the anonymous
            object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="scheduler">The message scheduler</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="callback">The send callback</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanSchedulePublishExtensions.SchedulePublish``1(MassTransit.IMessageScheduler,System.TimeSpan,``0,System.Threading.CancellationToken)">
            <summary>
            Publish a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="scheduler">The message scheduler</param>
            <param name="message">The message</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanSchedulePublishExtensions.SchedulePublish``1(MassTransit.IMessageScheduler,System.TimeSpan,``0,MassTransit.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Publish a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="scheduler">The message scheduler</param>
            <param name="message">The message</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Publish is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanSchedulePublishExtensions.SchedulePublish``1(MassTransit.IMessageScheduler,System.TimeSpan,``0,System.Action{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Publish a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="scheduler">The message scheduler</param>
            <param name="message">The message</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="callback">The send callback</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Publish is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanSchedulePublishExtensions.SchedulePublish``1(MassTransit.IMessageScheduler,System.TimeSpan,``0,System.Func{MassTransit.SendContext{``0},System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Publish a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="scheduler">The message scheduler</param>
            <param name="message">The message</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="callback">The send callback</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Publish is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanSchedulePublishExtensions.SchedulePublish``1(MassTransit.IMessageScheduler,System.TimeSpan,``0,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Publish a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="scheduler">The message scheduler</param>
            <param name="message">The message</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Publish is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanSchedulePublishExtensions.SchedulePublish``1(MassTransit.IMessageScheduler,System.TimeSpan,``0,System.Action{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Publish a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="scheduler">The message scheduler</param>
            <param name="message">The message</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="callback">The send callback</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Publish is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanSchedulePublishExtensions.SchedulePublish``1(MassTransit.IMessageScheduler,System.TimeSpan,``0,System.Func{MassTransit.SendContext,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Publish a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="scheduler">The message scheduler</param>
            <param name="message">The message</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="callback">The send callback</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Publish is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanSchedulePublishExtensions.SchedulePublish(MassTransit.IMessageScheduler,System.TimeSpan,System.Object,System.Threading.CancellationToken)">
            <summary>
            Publishes an object as a message, using the type of the message instance.
            </summary>
            <param name="scheduler">The message scheduler</param>
            <param name="message">The message object</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Publish is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanSchedulePublishExtensions.SchedulePublish(MassTransit.IMessageScheduler,System.TimeSpan,System.Object,System.Type,System.Threading.CancellationToken)">
            <summary>
            Publishes an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="scheduler">The message scheduler</param>
            <param name="message">The message object</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Publish is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanSchedulePublishExtensions.SchedulePublish(MassTransit.IMessageScheduler,System.TimeSpan,System.Object,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Publishes an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="scheduler">The message scheduler</param>
            <param name="message">The message object</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Publish is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanSchedulePublishExtensions.SchedulePublish(MassTransit.IMessageScheduler,System.TimeSpan,System.Object,System.Action{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Publishes an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="scheduler">The message scheduler</param>
            <param name="message">The message object</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="callback">The send callback</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Publish is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanSchedulePublishExtensions.SchedulePublish(MassTransit.IMessageScheduler,System.TimeSpan,System.Object,System.Func{MassTransit.SendContext,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Publishes an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="scheduler">The message scheduler</param>
            <param name="message">The message object</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="callback">The send callback</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Publish is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanSchedulePublishExtensions.SchedulePublish(MassTransit.IMessageScheduler,System.TimeSpan,System.Object,System.Type,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Publishes an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="scheduler">The message scheduler</param>
            <param name="message">The message object</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Publish is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanSchedulePublishExtensions.SchedulePublish(MassTransit.IMessageScheduler,System.TimeSpan,System.Object,System.Type,System.Action{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Publishes an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="scheduler">The message scheduler</param>
            <param name="message">The message object</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="callback">The send callback</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Publish is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanSchedulePublishExtensions.SchedulePublish(MassTransit.IMessageScheduler,System.TimeSpan,System.Object,System.Type,System.Func{MassTransit.SendContext,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Publishes an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="scheduler">The message scheduler</param>
            <param name="message">The message object</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="callback">The send callback</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Publish is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanSchedulePublishExtensions.SchedulePublish``1(MassTransit.IMessageScheduler,System.TimeSpan,System.Object,System.Threading.CancellationToken)">
            <summary>
            Publishes an interface message, initializing the properties of the interface using the anonymous
            object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="scheduler">The message scheduler</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Publish is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanSchedulePublishExtensions.SchedulePublish``1(MassTransit.IMessageScheduler,System.TimeSpan,System.Object,MassTransit.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Publishes an interface message, initializing the properties of the interface using the anonymous
            object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="scheduler">The message scheduler</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Publish is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanSchedulePublishExtensions.SchedulePublish``1(MassTransit.IMessageScheduler,System.TimeSpan,System.Object,System.Action{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Publishes an interface message, initializing the properties of the interface using the anonymous
            object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="scheduler">The message scheduler</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="callback">The send callback</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Publish is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanSchedulePublishExtensions.SchedulePublish``1(MassTransit.IMessageScheduler,System.TimeSpan,System.Object,System.Func{MassTransit.SendContext{``0},System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Publishes an interface message, initializing the properties of the interface using the anonymous
            object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="scheduler">The message scheduler</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="callback">The send callback</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Publish is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanSchedulePublishExtensions.SchedulePublish``1(MassTransit.IMessageScheduler,System.TimeSpan,System.Object,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Publishes an interface message, initializing the properties of the interface using the anonymous
            object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="scheduler">The message scheduler</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Publish is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanSchedulePublishExtensions.SchedulePublish``1(MassTransit.IMessageScheduler,System.TimeSpan,System.Object,System.Action{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Publishes an interface message, initializing the properties of the interface using the anonymous
            object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="scheduler">The message scheduler</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="callback">The send callback</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Publish is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.TimeSpanSchedulePublishExtensions.SchedulePublish``1(MassTransit.IMessageScheduler,System.TimeSpan,System.Object,System.Func{MassTransit.SendContext,System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Publishes an interface message, initializing the properties of the interface using the anonymous
            object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="scheduler">The message scheduler</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="callback">The send callback</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Publish is acknowledged by the broker</returns>
        </member>
        <member name="T:MassTransit.TransformContext">
            <summary>
            Context used by a message transform
            </summary>
        </member>
        <member name="T:MassTransit.TransformContext`1">
            <summary>
            A message transform for a single message type
            </summary>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="P:MassTransit.TransformContext`1.HasInput">
            <summary>
            If true, the input is present, otherwise it equals <i>default</i>.
            </summary>
        </member>
        <member name="T:MassTransit.UpdatePayloadFactory`1">
            <summary>
            Update an existing payload, using the existing payload
            </summary>
            <param name="existing">The existing payload</param>
            <typeparam name="TPayload">The payload type</typeparam>
        </member>
        <member name="T:MassTransit.Batch`1">
            <summary>
            A batch of messages which are delivered to a consumer all at once
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:MassTransit.Batch`1.FirstMessageReceived">
            <summary>
            When the first message in this batch was received
            </summary>
        </member>
        <member name="P:MassTransit.Batch`1.LastMessageReceived">
            <summary>
            When the last message in this batch was received
            </summary>
        </member>
        <member name="P:MassTransit.Batch`1.Item(System.Int32)">
            <summary>
            Returns the message at the specified index
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:MassTransit.Batch`1.Length">
            <summary>
            The number of messages in this batch
            </summary>
        </member>
        <member name="T:MassTransit.BatchCompletionMode">
            <summary>
            The reason this batch was made ready for consumption
            </summary>
        </member>
        <member name="F:MassTransit.BatchCompletionMode.Time">
            <summary>
            The time limit for receiving messages in the batch was reached
            </summary>
        </member>
        <member name="F:MassTransit.BatchCompletionMode.Size">
            <summary>
            The maximum number of messages in the batch was reached
            </summary>
        </member>
        <member name="F:MassTransit.BatchCompletionMode.Forced">
            <summary>
            A batch was forced, likely due to a previously faulted message being retried
            </summary>
        </member>
        <member name="T:MassTransit.ExceptionInfo">
            <summary>
            An exception information that is serializable
            </summary>
        </member>
        <member name="P:MassTransit.ExceptionInfo.ExceptionType">
            <summary>
            The type name of the exception
            </summary>
        </member>
        <member name="P:MassTransit.ExceptionInfo.InnerException">
            <summary>
            The inner exception if present (also converted to ExceptionInfo)
            </summary>
        </member>
        <member name="P:MassTransit.ExceptionInfo.StackTrace">
            <summary>
            The stack trace of the exception site
            </summary>
        </member>
        <member name="P:MassTransit.ExceptionInfo.Message">
            <summary>
            The exception message
            </summary>
        </member>
        <member name="P:MassTransit.ExceptionInfo.Source">
            <summary>
            The exception source
            </summary>
        </member>
        <member name="T:MassTransit.Fault`1">
            <summary>
            A faulted message, published when a message consumer fails to process the message
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:MassTransit.Fault`1.Message">
            <summary>
            The message that faulted
            </summary>
        </member>
        <member name="T:MassTransit.Fault">
            <summary>
            Published (or sent, if part of a request/response conversation) when a fault occurs during message
            processing
            </summary>
        </member>
        <member name="P:MassTransit.Fault.FaultId">
            <summary>
            Identifies the fault that was generated
            </summary>
        </member>
        <member name="P:MassTransit.Fault.FaultedMessageId">
            <summary>
            The messageId that faulted
            </summary>
        </member>
        <member name="P:MassTransit.Fault.Timestamp">
            <summary>
            When the fault was produced
            </summary>
        </member>
        <member name="P:MassTransit.Fault.Exceptions">
            <summary>
            The exception information that occurred
            </summary>
        </member>
        <member name="P:MassTransit.Fault.Host">
            <summary>
            The host information was the fault occurred
            </summary>
        </member>
        <member name="P:MassTransit.Fault.FaultMessageTypes">
            <summary>
            The faulted message supported types, from the original message envelope
            </summary>
        </member>
        <member name="T:MassTransit.HostInfo">
            <summary>
            The host where an event or otherwise was produced
            a routing slip
            </summary>
        </member>
        <member name="P:MassTransit.HostInfo.MachineName">
            <summary>
            The machine name (or role instance name) of the local machine
            </summary>
        </member>
        <member name="P:MassTransit.HostInfo.ProcessName">
            <summary>
            The process name hosting the routing slip activity
            </summary>
        </member>
        <member name="P:MassTransit.HostInfo.ProcessId">
            <summary>
            The processId of the hosting process
            </summary>
        </member>
        <member name="P:MassTransit.HostInfo.Assembly">
            <summary>
            The assembly where the exception occurred
            </summary>
        </member>
        <member name="P:MassTransit.HostInfo.AssemblyVersion">
            <summary>
            The assembly version
            </summary>
        </member>
        <member name="P:MassTransit.HostInfo.FrameworkVersion">
            <summary>
            The .NET framework version
            </summary>
        </member>
        <member name="P:MassTransit.HostInfo.MassTransitVersion">
            <summary>
            The version of MassTransit used by the process
            </summary>
        </member>
        <member name="P:MassTransit.HostInfo.OperatingSystemVersion">
            <summary>
            The operating system version hosting the application
            </summary>
        </member>
        <member name="P:MassTransit.HostReady.HostAddress">
            <summary>
            The Host address
            </summary>
        </member>
        <member name="P:MassTransit.HostReady.ReceiveEndpoints">
            <summary>
            The receive endpoints that were started on the host
            </summary>
        </member>
        <member name="P:MassTransit.HostReady.Riders">
            <summary>
            The riders that were started on the host
            </summary>
        </member>
        <member name="P:MassTransit.ReceiveEndpointCompleted.DeliveryCount">
            <summary>
            The number of messages delivered to the receive endpoint
            </summary>
        </member>
        <member name="P:MassTransit.ReceiveEndpointCompleted.ConcurrentDeliveryCount">
            <summary>
            The maximum concurrent messages delivery to the receive endpoint
            </summary>
        </member>
        <member name="P:MassTransit.ReceiveEndpointEvent.InputAddress">
            <summary>
            The input address of the receive endpoint
            </summary>
        </member>
        <member name="P:MassTransit.ReceiveEndpointEvent.ReceiveEndpoint">
            <summary>
            The receive endpoint upon which the event occurred
            </summary>
        </member>
        <member name="P:MassTransit.ReceiveEndpointReady.IsStarted">
            <summary>
            If true, the receive endpoint is actually ready, versus "fake-ready" for endpoints which do not auto-start
            </summary>
        </member>
        <member name="T:MassTransit.ReceiveFault">
            <summary>
            Published when a message fails to deserialize at the endpoint
            </summary>
        </member>
        <member name="P:MassTransit.ReceiveFault.ContentType">
            <summary>
            The specified content type of the message by the transport
            </summary>
        </member>
        <member name="P:MassTransit.ReceiveTransportCompleted.DeliveryCount">
            <summary>
            The number of messages delivered to the receive endpoint
            </summary>
        </member>
        <member name="P:MassTransit.ReceiveTransportCompleted.ConcurrentDeliveryCount">
            <summary>
            The maximum concurrent messages delivery to the receive endpoint
            </summary>
        </member>
        <member name="P:MassTransit.ReceiveTransportEvent.InputAddress">
            <summary>
            The input address of the receive endpoint
            </summary>
        </member>
        <member name="P:MassTransit.ReceiveTransportReady.IsStarted">
            <summary>
            If true, the receive transport is actually ready, versus "fake-ready" for endpoints which do not auto-start
            </summary>
        </member>
        <member name="P:MassTransit.Scheduling.CancelScheduledMessage.CorrelationId">
            <summary>
            The cancel scheduled message correlationId
            </summary>
        </member>
        <member name="P:MassTransit.Scheduling.CancelScheduledMessage.Timestamp">
            <summary>
            The date/time this message was created
            </summary>
        </member>
        <member name="P:MassTransit.Scheduling.CancelScheduledMessage.TokenId">
            <summary>
            The token of the scheduled message
            </summary>
        </member>
        <member name="P:MassTransit.Scheduling.CancelScheduledRecurringMessage.CorrelationId">
            <summary>
            The cancel scheduled message correlationId
            </summary>
        </member>
        <member name="P:MassTransit.Scheduling.CancelScheduledRecurringMessage.Timestamp">
            <summary>
            The date/time this message was created
            </summary>
        </member>
        <member name="T:MassTransit.Scheduling.MissedEventPolicy">
            <summary>
            If the scheduler is offline and comes back online, the policy determines how
            a missed scheduled message is handled.
            </summary>
        </member>
        <member name="F:MassTransit.Scheduling.MissedEventPolicy.Default">
            <summary>
            use the default handling of the scheduler
            </summary>
        </member>
        <member name="F:MassTransit.Scheduling.MissedEventPolicy.Skip">
            <summary>
            Skip the event, waiting for the next scheduled interval
            </summary>
        </member>
        <member name="F:MassTransit.Scheduling.MissedEventPolicy.Send">
            <summary>
            Send the message immediately and then continue the schedule as planned
            </summary>
        </member>
        <member name="P:MassTransit.Scheduling.PauseScheduledRecurringMessage.CorrelationId">
            <summary>
            The cancel scheduled message correlationId
            </summary>
        </member>
        <member name="P:MassTransit.Scheduling.PauseScheduledRecurringMessage.Timestamp">
            <summary>
            The date/time this message was created
            </summary>
        </member>
        <member name="P:MassTransit.Scheduling.RecurringSchedule.TimeZoneId">
            <summary>
            The timezone of the schedule
            </summary>
        </member>
        <member name="P:MassTransit.Scheduling.RecurringSchedule.StartTime">
            <summary>
            The time the recurring schedule is enabled
            </summary>
        </member>
        <member name="P:MassTransit.Scheduling.RecurringSchedule.EndTime">
            <summary>
            The time the recurring schedule is disabled
            If null then the job is repeated forever
            </summary>
        </member>
        <member name="P:MassTransit.Scheduling.RecurringSchedule.ScheduleId">
            <summary>
            A unique name that identifies this schedule.
            </summary>
        </member>
        <member name="P:MassTransit.Scheduling.RecurringSchedule.ScheduleGroup">
            <summary>
            A
            </summary>
        </member>
        <member name="P:MassTransit.Scheduling.RecurringSchedule.CronExpression">
            <summary>
            The Cron Schedule Expression in Cron Syntax
            </summary>
        </member>
        <member name="P:MassTransit.Scheduling.RecurringSchedule.Description">
            <summary>
            Schedule description
            </summary>
        </member>
        <member name="P:MassTransit.Scheduling.ResumeScheduledRecurringMessage.CorrelationId">
            <summary>
            The cancel scheduled message correlationId
            </summary>
        </member>
        <member name="P:MassTransit.Scheduling.ResumeScheduledRecurringMessage.Timestamp">
            <summary>
            The date/time this message was created
            </summary>
        </member>
        <member name="P:MassTransit.Scheduling.ScheduleMessage.ScheduledTime">
            <summary>
            The time at which the message should be published, should be in UTC
            </summary>
        </member>
        <member name="P:MassTransit.Scheduling.ScheduleMessage.PayloadType">
            <summary>
            The message types implemented by the message
            </summary>
        </member>
        <member name="P:MassTransit.Scheduling.ScheduleMessage.Destination">
            <summary>
            The destination where the message should be sent
            </summary>
        </member>
        <member name="P:MassTransit.Scheduling.ScheduleMessage.Payload">
            <summary>
            The actual message payload to deliver
            </summary>
        </member>
        <member name="P:MassTransit.Scheduling.ScheduleRecurringMessage.PayloadType">
            <summary>
            The message types implemented by the message
            </summary>
        </member>
        <member name="P:MassTransit.Scheduling.ScheduleRecurringMessage.Destination">
            <summary>
            The destination where the message should be sent
            </summary>
        </member>
        <member name="P:MassTransit.Scheduling.ScheduleRecurringMessage.Payload">
            <summary>
            The actual scheduled message payload
            </summary>
        </member>
        <member name="T:MassTransit.CorrelatedBy`1">
            <summary>
            Used to identify a message as correlated so that the CorrelationId can be returned
            </summary>
            <typeparam name="TKey">The type of the CorrelationId used</typeparam>
        </member>
        <member name="P:MassTransit.CorrelatedBy`1.CorrelationId">
            <summary>
            Returns the CorrelationId for the message
            </summary>
        </member>
        <member name="T:MassTransit.Courier.Contracts.ActivityException">
            <summary>
            Capture the exception information thrown by an activity
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.ActivityException.ExecutionId">
            <summary>
            The tracking number of the activity that threw the exception
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.ActivityException.Timestamp">
            <summary>
            The point in time when the exception occurred
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.ActivityException.Elapsed">
            <summary>
            The time from when the routing slip was created until the exception occurred
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.ActivityException.Name">
            <summary>
            The name of the activity that caused the exception
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.ActivityException.Host">
            <summary>
            The host where the exception was thrown
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.ActivityException.ExceptionInfo">
            <summary>
            The exception details
            </summary>
        </member>
        <member name="T:MassTransit.Courier.Contracts.ActivityLog">
            <summary>
            Message contract for storing activity log data
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.ActivityLog.ExecutionId">
            <summary>
            The tracking number for completion of the activity
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.ActivityLog.Name">
            <summary>
            The name of the activity that was completed
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.ActivityLog.Timestamp">
            <summary>
            The timestamp when the activity started
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.ActivityLog.Duration">
            <summary>
            The duration of the activity execution
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.ActivityLog.Host">
            <summary>
            The host that executed the activity
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.CompensateLog.ExecutionId">
            <summary>
            The tracking number for completion of the activity
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.CompensateLog.Address">
            <summary>
            The compensation address where the routing slip should be sent for compensation
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.CompensateLog.Data">
            <summary>
            The results of the activity saved for compensation
            </summary>
        </member>
        <member name="T:MassTransit.Courier.Contracts.RoutingSlip">
            <summary>
            A RoutingSlip is the transport-level interface that is used to carry the details
            of a message routing slip over the network.
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlip.TrackingNumber">
            <summary>
            The unique tracking number for this routing slip, used to correlate events
            and activities
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlip.CreateTimestamp">
            <summary>
            The time when the routing slip was created
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlip.Itinerary">
            <summary>
            The list of activities that are remaining
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlip.ActivityLogs">
            <summary>
            The logs of activities that have already been executed
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlip.CompensateLogs">
            <summary>
            The logs of activities that can be compensated
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlip.Variables">
            <summary>
            Variables that are carried with the routing slip for use by any activity
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlip.ActivityExceptions">
            <summary>
            A list of exceptions that have occurred during routing slip execution
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlip.Subscriptions">
            <summary>
            Subscriptions to routing slip events
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompensated.TrackingNumber">
            <summary>
            The tracking number of the routing slip that faulted
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompensated.ExecutionId">
            <summary>
            The tracking number for completion of the activity
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompensated.Timestamp">
            <summary>
            The date/time when the routing slip compensation was finished
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompensated.Duration">
            <summary>
            The duration of the activity execution
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompensated.ActivityName">
            <summary>
            The name of the activity that completed
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompensated.Host">
            <summary>
            The host that executed the activity
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompensated.Data">
            <summary>
            The results of the activity saved for compensation
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompensated.Variables">
            <summary>
            The variables that were present once the routing slip completed, can be used
            to capture the output of the slip - real events should likely be used for real
            completion items but this is useful for some cases
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompensationFailed.TrackingNumber">
            <summary>
            The tracking number of the routing slip that faulted
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompensationFailed.ExecutionId">
            <summary>
            The tracking number for completion of the activity
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompensationFailed.Timestamp">
            <summary>
            The date/time when the routing slip compensation was finished
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompensationFailed.Duration">
            <summary>
            The duration of the activity execution
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompensationFailed.Host">
            <summary>
            The host that executed the activity
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompensationFailed.ActivityName">
            <summary>
            The name of the activity that failed to compensate
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompensationFailed.Data">
            <summary>
            The results of the activity saved for compensation
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompensationFailed.Variables">
            <summary>
            The variables that were present once the routing slip completed, can be used
            to capture the output of the slip - real events should likely be used for real
            completion items but this is useful for some cases
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompensationFailed.ExceptionInfo">
            <summary>
            The exception information from the faulting compensation
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompleted.TrackingNumber">
            <summary>
            The tracking number of the routing slip that faulted
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompleted.ExecutionId">
            <summary>
            The tracking number for completion of the activity
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompleted.Timestamp">
            <summary>
            The date/time when the routing slip compensation was finished
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompleted.Duration">
            <summary>
            The duration of the activity execution
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompleted.ActivityName">
            <summary>
            The name of the activity that completed
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompleted.Host">
            <summary>
            The host that executed the activity
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompleted.Arguments">
            <summary>
            The arguments that were specified for the activity
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompleted.Data">
            <summary>
            The results saved as the CompensateLog by the Activity
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityCompleted.Variables">
            <summary>
            The variables that were present once the routing slip completed, can be used
            to capture the output of the slip - real events should likely be used for real
            completion items but this is useful for some cases
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityFaulted.TrackingNumber">
            <summary>
            The tracking number of the routing slip that faulted
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityFaulted.ExecutionId">
            <summary>
            The tracking number of this activity execution
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityFaulted.Timestamp">
            <summary>
            The date/time when the routing slip compensation was finished
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityFaulted.Duration">
            <summary>
            The duration of the activity execution
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityFaulted.ActivityName">
            <summary>
            The name of the activity that completed
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityFaulted.Host">
            <summary>
            The host that executed the activity
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityFaulted.ExceptionInfo">
            <summary>
            The exception information from the faulting activity
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityFaulted.Arguments">
            <summary>
            The arguments that were specified for the activity at execution
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipActivityFaulted.Variables">
            <summary>
            The variables that were present once the routing slip completed, can be used
            to capture the output of the slip - real events should likely be used for real
            completion items but this is useful for some cases
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipCompensationFailed.TrackingNumber">
            <summary>
            The tracking number of the routing slip that faulted
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipCompensationFailed.Timestamp">
            <summary>
            The date/time when the routing slip compensation was finished
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipCompensationFailed.Duration">
            <summary>
            The duration of the activity execution
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipCompensationFailed.Host">
            <summary>
            The host that executed the activity
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipCompensationFailed.ExceptionInfo">
            <summary>
            The exception information from the faulting activity
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipCompensationFailed.Variables">
            <summary>
            The variables that were present once the routing slip completed, can be used
            to capture the output of the slip - real events should likely be used for real
            completion items but this is useful for some cases
            </summary>
        </member>
        <member name="T:MassTransit.Courier.Contracts.RoutingSlipCompleted">
            <summary>
            Published when a routing slip completes
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipCompleted.TrackingNumber">
            <summary>
            The tracking number of the routing slip that completed
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipCompleted.Timestamp">
            <summary>
            The date/time when the routing slip completed
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipCompleted.Duration">
            <summary>
            The time from when the routing slip was created until the completion
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipCompleted.Variables">
            <summary>
            The variables that were present once the routing slip completed, can be used
            to capture the output of the slip - real events should likely be used for real
            completion items but this is useful for some cases
            </summary>
        </member>
        <member name="T:MassTransit.Courier.Contracts.RoutingSlipEventContents">
            <summary>
            Specifies the specific contents of routing slip events to be included for a subscription
            </summary>
        </member>
        <member name="F:MassTransit.Courier.Contracts.RoutingSlipEventContents.All">
            <summary>
            Include all event contents
            </summary>
        </member>
        <member name="F:MassTransit.Courier.Contracts.RoutingSlipEventContents.None">
            <summary>
            Do not include any contents with the routing slip events
            </summary>
        </member>
        <member name="F:MassTransit.Courier.Contracts.RoutingSlipEventContents.Variables">
            <summary>
            The routing slip variables after the activity was executed or compensated
            </summary>
        </member>
        <member name="F:MassTransit.Courier.Contracts.RoutingSlipEventContents.Arguments">
            <summary>
            The arguments provided to the activity
            </summary>
        </member>
        <member name="F:MassTransit.Courier.Contracts.RoutingSlipEventContents.Data">
            <summary>
            The data logged by an activity when completed or compensated
            </summary>
        </member>
        <member name="F:MassTransit.Courier.Contracts.RoutingSlipEventContents.Itinerary">
            <summary>
            The itinerary that was added/removed from the routing slip when revised
            </summary>
        </member>
        <member name="F:MassTransit.Courier.Contracts.RoutingSlipEventContents.SkipEncrypted">
            <summary>
            If specified, encrypted content is excluded from the event
            </summary>
        </member>
        <member name="F:MassTransit.Courier.Contracts.RoutingSlipEvents.All">
            <summary>
            By default, all routing slip events are included for a subscription
            </summary>
        </member>
        <member name="F:MassTransit.Courier.Contracts.RoutingSlipEvents.Completed">
            <summary>
            Send the RoutingSlipCompleted event
            </summary>
        </member>
        <member name="F:MassTransit.Courier.Contracts.RoutingSlipEvents.Faulted">
            <summary>
            Send the RoutingSlipFaulted event
            </summary>
        </member>
        <member name="F:MassTransit.Courier.Contracts.RoutingSlipEvents.CompensationFailed">
            <summary>
            Send the RoutingSlipCompensationFaulted event
            </summary>
        </member>
        <member name="F:MassTransit.Courier.Contracts.RoutingSlipEvents.Terminated">
            <summary>
            Send the routing slip terminated event
            </summary>
        </member>
        <member name="F:MassTransit.Courier.Contracts.RoutingSlipEvents.Revised">
            <summary>
            Send the routing slip revised event
            </summary>
        </member>
        <member name="F:MassTransit.Courier.Contracts.RoutingSlipEvents.ActivityCompleted">
            <summary>
            Send the RoutingSlipActivityCompleted event
            </summary>
        </member>
        <member name="F:MassTransit.Courier.Contracts.RoutingSlipEvents.ActivityFaulted">
            <summary>
            Send the RoutingSlipActivityFaulted event
            </summary>
        </member>
        <member name="F:MassTransit.Courier.Contracts.RoutingSlipEvents.ActivityCompensated">
            <summary>
            Send the RoutingSlipActivityCompensated event
            </summary>
        </member>
        <member name="F:MassTransit.Courier.Contracts.RoutingSlipEvents.ActivityCompensationFailed">
            <summary>
            Send the RoutingSlipCompensationFailed event
            </summary>
        </member>
        <member name="F:MassTransit.Courier.Contracts.RoutingSlipEvents.EventMask">
            <summary>
            Used to mask the events so that upper-level flags don't conflict
            </summary>
        </member>
        <member name="F:MassTransit.Courier.Contracts.RoutingSlipEvents.Supplemental">
            <summary>
            If specified, the event subscription is supplemental and should not prevent
            the publishing of existing routing slip events. By default, any subscription
            suppresses publishing of events.
            </summary>
        </member>
        <member name="T:MassTransit.Courier.Contracts.RoutingSlipFaulted">
            <summary>
            Published when a routing slip faults (after compensation)
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipFaulted.TrackingNumber">
            <summary>
            The tracking number of the routing slip that faulted
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipFaulted.Timestamp">
            <summary>
            The date/time when the routing slip faulted
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipFaulted.Duration">
            <summary>
            The time from when the routing slip was created until the fault occurred
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipFaulted.ActivityExceptions">
            <summary>
            The exception information from the faulting activities
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipFaulted.Variables">
            <summary>
            The variables that were present once the routing slip completed, can be used
            to capture the output of the slip - real events should likely be used for real
            completion items but this is useful for some cases
            </summary>
        </member>
        <member name="T:MassTransit.Courier.Contracts.RoutingSlipRevised">
            <summary>
            Published when a routing slip is revised during execution
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipRevised.TrackingNumber">
            <summary>
            The tracking number of the routing slip that completed
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipRevised.ExecutionId">
            <summary>
            The execution that modified the routing slip
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipRevised.Timestamp">
            <summary>
            The date/time when the routing slip completed
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipRevised.Duration">
            <summary>
            The time from when the routing slip was created until the completion
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipRevised.ActivityName">
            <summary>
            The name of the activity that terminated the routing slip
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipRevised.Host">
            <summary>
            The host that executed the activity
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipRevised.Variables">
            <summary>
            The variables that were present once the routing slip completed, can be used
            to capture the output of the slip - real events should likely be used for real
            completion items but this is useful for some cases
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipRevised.Itinerary">
            <summary>
            The new itinerary for the routing slip
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipRevised.DiscardedItinerary">
            <summary>
            The previous itinerary of the routing slip that is no longer included
            </summary>
        </member>
        <member name="T:MassTransit.Courier.Contracts.RoutingSlipTerminated">
            <summary>
            Published when a routing slip is terminated
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipTerminated.TrackingNumber">
            <summary>
            The tracking number of the routing slip that completed
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipTerminated.ExecutionId">
            <summary>
            The execution that terminated the routing slip
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipTerminated.Timestamp">
            <summary>
            The date/time when the routing slip completed
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipTerminated.Duration">
            <summary>
            The time from when the routing slip was created until the completion
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipTerminated.ActivityName">
            <summary>
            The name of the activity that terminated the routing slip
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipTerminated.Host">
            <summary>
            The host that executed the activity
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipTerminated.Variables">
            <summary>
            The variables that were present once the routing slip completed, can be used
            to capture the output of the slip - real events should likely be used for real
            completion items but this is useful for some cases
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.RoutingSlipTerminated.DiscardedItinerary">
            <summary>
            The remainder of the itinerary that will not be executed by the routing slip engine.
            </summary>
        </member>
        <member name="T:MassTransit.Courier.Contracts.Subscription">
            <summary>
            A routing slip subscription defines a specific endpoint where routing
            slip events should be sent (not published). If specified, events are not published.
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.Subscription.Address">
            <summary>
            The address where events should be sent
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.Subscription.Events">
            <summary>
            The events that are subscribed
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.Subscription.Include">
            <summary>
            The event contents to include when published
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.Subscription.ActivityName">
            <summary>
            If specified, events are only used in this subscription if the activity name matches
            </summary>
        </member>
        <member name="P:MassTransit.Courier.Contracts.Subscription.Message">
            <summary>
            The message sent as part of the subscription
            </summary>
        </member>
        <member name="T:MassTransit.IActivity`2">
            <summary>
            An Activity implements the execute and compensate methods for an activity
            </summary>
            <typeparam name="TArguments">The activity argument type</typeparam>
            <typeparam name="TLog">The activity log argument type</typeparam>
        </member>
        <member name="T:MassTransit.IActivity">
            <summary>
            Marker interface used to assist identification in IoC containers.
            Not to be used directly as it does not contain the message type of the
            consumer
            </summary>
            <remarks>
            Not to be used directly by application code, for internal reflection only
            </remarks>
        </member>
        <member name="T:MassTransit.IActivityFactory">
            <summary>
            Should be implemented by containers that support generic object resolution in order to
            provide a common lifetime management policy for all activities
            </summary>
        </member>
        <member name="M:MassTransit.IActivityFactory.Execute``2(MassTransit.ExecuteContext{``1},MassTransit.IPipe{MassTransit.ExecuteActivityContext{``0,``1}})">
            <summary>
            Create and execute the activity
            </summary>
            <typeparam name="TActivity"></typeparam>
            <typeparam name="TArguments"></typeparam>
            <param name="context"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IActivityFactory.Compensate``2(MassTransit.CompensateContext{``1},MassTransit.IPipe{MassTransit.CompensateActivityContext{``0,``1}})">
            <summary>
            Create and compensate the activity
            </summary>
            <param name="compensateContext"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ICompensateActivity`1.Compensate(MassTransit.CompensateContext{`0})">
            <summary>
            Compensate the activity and return the remaining compensation items
            </summary>
            <param name="context">The compensation information for the activity</param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.ICompensateActivity">
            <summary>
            Marker interface used to assist identification in IoC containers.
            Not to be used directly as it does not contain the message type of the
            consumer
            </summary>
            <remarks>
            Not to be used directly by application code, for internal reflection only
            </remarks>
        </member>
        <member name="M:MassTransit.IExecuteActivity`1.Execute(MassTransit.ExecuteContext{`0})">
            <summary>
            Execute the activity
            </summary>
            <param name="context">The execution context</param>
            <returns>An execution result, created from the execution passed to the activity</returns>
        </member>
        <member name="T:MassTransit.IExecuteActivity">
            <summary>
            Marker interface used to assist identification in IoC containers.
            Not to be used directly as it does not contain the message type of the
            consumer
            </summary>
            <remarks>
            Not to be used directly by application code, for internal reflection only
            </remarks>
        </member>
        <member name="T:MassTransit.IExecuteActivityFactory`2">
            <summary>
            A factory that creates an execute activity and then invokes the pipe for the activity context
            </summary>
            <typeparam name="TArguments"></typeparam>
            <typeparam name="TActivity"></typeparam>
        </member>
        <member name="M:MassTransit.IExecuteActivityFactory`2.Execute(MassTransit.ExecuteContext{`1},MassTransit.IPipe{MassTransit.ExecuteActivityContext{`0,`1}})">
            <summary>
            Executes the activity context by passing it to the activity factory, which creates the activity
            and then invokes the next pipe with the combined activity context
            </summary>
            <param name="context"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="P:MassTransit.IItineraryBuilder.TrackingNumber">
            <summary>
            The tracking number of the routing slip
            </summary>
        </member>
        <member name="M:MassTransit.IItineraryBuilder.AddActivity(System.String,System.Uri)">
            <summary>
            Adds an activity to the routing slip without specifying any arguments
            </summary>
            <param name="name">The activity name</param>
            <param name="executeAddress">The execution address of the activity</param>
        </member>
        <member name="M:MassTransit.IItineraryBuilder.AddActivity(System.String,System.Uri,System.Object)">
            <summary>
            Adds an activity to the routing slip specifying activity arguments as an anonymous object
            </summary>
            <param name="name">The activity name</param>
            <param name="executeAddress">The execution address of the activity</param>
            <param name="arguments">An anonymous object of properties matching the argument names of the activity</param>
        </member>
        <member name="M:MassTransit.IItineraryBuilder.AddActivity(System.String,System.Uri,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Adds an activity to the routing slip specifying activity arguments a dictionary
            </summary>
            <param name="name">The activity name</param>
            <param name="executeAddress">The execution address of the activity</param>
            <param name="arguments">A dictionary of name/values matching the activity argument properties</param>
        </member>
        <member name="M:MassTransit.IItineraryBuilder.AddVariable(System.String,System.String)">
            <summary>
            Add a variable to the routing slip
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:MassTransit.IItineraryBuilder.AddVariable(System.String,System.Object)">
            <summary>
            Add a variable to the routing slip
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:MassTransit.IItineraryBuilder.SetVariables(System.Object)">
            <summary>
            Sets the value of any existing variables to the value in the anonymous object,
            as well as adding any additional variables that did not exist previously.
            For example, SetVariables(new { IntValue = 27, StringValue = "Hello, World." });
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:MassTransit.IItineraryBuilder.SetVariables(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Set multiple variables (from a dictionary, for example) on the routing slip
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:MassTransit.IItineraryBuilder.AddActivitiesFromSourceItinerary">
            <summary>
            Add the original itinerary to the routing slip (if present)
            </summary>
            <returns>The number of activities added to the itinerary</returns>
        </member>
        <member name="M:MassTransit.IItineraryBuilder.AddSubscription(System.Uri,MassTransit.Courier.Contracts.RoutingSlipEvents)">
            <summary>
            Add an explicit subscription to the routing slip events
            </summary>
            <param name="address">The destination address where the events are sent</param>
            <param name="events">The events to include in the subscription</param>
        </member>
        <member name="M:MassTransit.IItineraryBuilder.AddSubscription(System.Uri,MassTransit.Courier.Contracts.RoutingSlipEvents,MassTransit.Courier.Contracts.RoutingSlipEventContents)">
            <summary>
            Add an explicit subscription to the routing slip events
            </summary>
            <param name="address">The destination address where the events are sent</param>
            <param name="events">The events to include in the subscription</param>
            <param name="contents">The contents of the routing slip event</param>
        </member>
        <member name="M:MassTransit.IItineraryBuilder.AddSubscription(System.Uri,MassTransit.Courier.Contracts.RoutingSlipEvents,System.Func{MassTransit.ISendEndpoint,System.Threading.Tasks.Task})">
            <summary>
            Adds a message subscription to the routing slip that will be sent at the specified event points
            </summary>
            <param name="address"></param>
            <param name="events"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IItineraryBuilder.AddSubscription(System.Uri,MassTransit.Courier.Contracts.RoutingSlipEvents,MassTransit.Courier.Contracts.RoutingSlipEventContents,System.Func{MassTransit.ISendEndpoint,System.Threading.Tasks.Task})">
            <summary>
            Adds a message subscription to the routing slip that will be sent at the specified event points
            </summary>
            <param name="address"></param>
            <param name="events"></param>
            <param name="contents"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IItineraryBuilder.AddSubscription(System.Uri,MassTransit.Courier.Contracts.RoutingSlipEvents,MassTransit.Courier.Contracts.RoutingSlipEventContents,System.String)">
            <summary>
            Add an explicit subscription to the routing slip events
            </summary>
            <param name="address">The destination address where the events are sent</param>
            <param name="events">The events to include in the subscription</param>
            <param name="contents">The contents of the routing slip event</param>
            <param name="activityName">Only send events for the specified activity</param>
        </member>
        <member name="M:MassTransit.IItineraryBuilder.AddSubscription(System.Uri,MassTransit.Courier.Contracts.RoutingSlipEvents,MassTransit.Courier.Contracts.RoutingSlipEventContents,System.String,System.Func{MassTransit.ISendEndpoint,System.Threading.Tasks.Task})">
            <summary>
            Adds a message subscription to the routing slip that will be sent at the specified event points
            </summary>
            <param name="address"></param>
            <param name="events"></param>
            <param name="activityName">Only send events for the specified activity</param>
            <param name="contents"></param>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IRoutingSlipBuilder.Build">
            <summary>
            Builds the routing slip using the current state of the builder
            </summary>
            <returns>The RoutingSlip</returns>
        </member>
        <member name="M:MassTransit.RoutingSlipExtensions.RanToCompletion(MassTransit.Courier.Contracts.RoutingSlip)">
            <summary>
            Returns true if there are no remaining activities to be executed
            </summary>
            <param name="routingSlip"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.IProbeSite">
            <summary>
            To support the introspection of code, this interface is used to gain
            information about the bus.
            </summary>
        </member>
        <member name="T:MassTransit.ProbeContext">
            <summary>
            Passed to a probe site to inspect it for interesting things
            </summary>
        </member>
        <member name="P:MassTransit.ProbeContext.CancellationToken">
            <summary>
            If for some reason the probe is cancelled, allowing an early withdrawal
            </summary>
        </member>
        <member name="M:MassTransit.ProbeContext.Add(System.String,System.String)">
            <summary>
            Add a key/value pair to the current probe context
            </summary>
            <param name="key">The key name</param>
            <param name="value">The value</param>
        </member>
        <member name="M:MassTransit.ProbeContext.Add(System.String,System.Object)">
            <summary>
            Add a key/value pair to the current probe context
            </summary>
            <param name="key">The key name</param>
            <param name="value">The value</param>
        </member>
        <member name="M:MassTransit.ProbeContext.Set(System.Object)">
            <summary>
            Add the properties of the object as key/value pairs to the current context
            </summary>
            <param name="values">The object (typically anonymous with new{}</param>
        </member>
        <member name="M:MassTransit.ProbeContext.Set(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Add the values from the enumeration as key/value pairs
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:MassTransit.MassTransitExceptionExtensions.ThrowIfContainsFailure(System.Collections.Generic.IEnumerable{MassTransit.ValidationResult},System.String)">
            <summary>
            Compiles the validation results and throws a <see cref="T:MassTransit.ConfigurationException" /> if any failures are present.
            </summary>
            <param name="results"></param>
            <param name="prefix">An optional prefix to override the default exception prefix</param>
            <exception cref="T:MassTransit.ConfigurationException"></exception>
        </member>
        <member name="T:MassTransit.Futures.Contracts.Get`1">
            <summary>
            Sent by a client to get a future value by type/ID
            </summary>
            <typeparam name="TFuture">The future type</typeparam>
        </member>
        <member name="M:MassTransit.HostConnectReceiveEndpointExtensions.ConnectResponseEndpoint(MassTransit.IReceiveConnector,MassTransit.IEndpointNameFormatter,System.Action{MassTransit.IReceiveEndpointConfigurator})">
            <summary>
            Connect a response endpoint for the host
            </summary>
            <param name="connector">The host to connect</param>
            <param name="endpointNameFormatter"></param>
            <param name="configureEndpoint">The configuration callback</param>
        </member>
        <member name="M:MassTransit.HostConnectReceiveEndpointExtensions.ConnectReceiveEndpoint(MassTransit.IReceiveConnector,System.Action{MassTransit.IReceiveEndpointConfigurator})">
            <summary>
            Connect an endpoint for the host
            </summary>
            <param name="connector">The host to connect</param>
            <param name="configureEndpoint">The configuration callback</param>
        </member>
        <member name="T:MassTransit.HostReceiveEndpointHandle">
            <summary>
            Returned when a receive endpoint is connected
            </summary>
        </member>
        <member name="P:MassTransit.HostReceiveEndpointHandle.Ready">
            <summary>
            Completed when the endpoint has successfully started and is ready to consume messages.
            </summary>
        </member>
        <member name="M:MassTransit.HostReceiveEndpointHandle.StopAsync(System.Threading.CancellationToken)">
            <summary>
            Stop the receive endpoint and remove it from the host. Once removed, the endpoint
            cannot be restarted using the <see cref="P:MassTransit.HostReceiveEndpointHandle.ReceiveEndpoint"/> property directly.
            </summary>
            <param name="cancellationToken">Cancel the stop operation in progress</param>
            <returns>Completed once the receive endpoint has stopped and been removed from the host</returns>
        </member>
        <member name="T:MassTransit.IBus">
            <summary>
            A bus is a logical element that includes a local endpoint and zero or more receive endpoints
            </summary>
        </member>
        <member name="P:MassTransit.IBus.Address">
            <summary>
            The InputAddress of the default bus endpoint
            </summary>
        </member>
        <member name="P:MassTransit.IBus.Topology">
            <summary>
            The bus topology
            </summary>
        </member>
        <member name="M:MassTransit.IBusControl.StartAsync(System.Threading.CancellationToken)">
            <summary>
            Starts the bus (assuming the battery isn't dead). Once the bus has been started it cannot be started again, even after it has been stopped.
            </summary>
            <returns>
            The BusHandle for the started bus. This is no longer needed, as calling Stop on the IBusControl will stop the bus equally well.
            </returns>
        </member>
        <member name="M:MassTransit.IBusControl.StopAsync(System.Threading.CancellationToken)">
            <summary>
            Stops the bus if it has been started. If the bus hasn't been started, the method returns without any warning.
            </summary>
        </member>
        <member name="M:MassTransit.IBusControl.CheckHealth">
            <summary>
            Returns the health of the bus, including all receive endpoints
            </summary>
            <returns></returns>
        </member>
        <member name="T:MassTransit.IConsumer`1">
            <summary>
            Defines a class that is a consumer of a message. The message is wrapped in an IConsumeContext
            interface to allow access to details surrounding the inbound message, including headers.
            </summary>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="T:MassTransit.IConsumer">
            <summary>
            Marker interface used to assist identification in IoC containers.
            Not to be used directly as it does not contain the message type of the
            consumer
            </summary>
            <remarks>
            Not to be used directly by application code, for internal reflection only
            </remarks>
        </member>
        <member name="T:MassTransit.IConsumerFactory`1">
            <summary>
            Maps an instance of a consumer to one or more Consume methods for the specified message type
            The whole purpose for this interface is to allow the creator of the consumer to manage the lifecycle
            of the consumer, along with anything else that needs to be managed by the factory, container, etc.
            </summary>
            <typeparam name="TConsumer">The Consumer type</typeparam>
        </member>
        <member name="P:MassTransit.IEndpointNameFormatter.Separator">
            <summary>
            The separator string used between words
            </summary>
        </member>
        <member name="M:MassTransit.IEndpointNameFormatter.TemporaryEndpoint(System.String)">
            <summary>
            Generate a temporary endpoint name, containing the specified tag
            </summary>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IEndpointNameFormatter.SanitizeName(System.String)">
            <summary>
            Clean up a name so that it matches the formatting.
            For instance, SubmitOrderControl -> submit-order-control (kebab case)
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.IJobConsumer`1">
            <summary>
            Defines a message consumer which runs a job asynchronously, without waiting, which is monitored by Conductor
            services, to monitor the job, limit concurrency, etc.
            </summary>
            <typeparam name="TJob">The job message type</typeparam>
        </member>
        <member name="T:MassTransit.Initializers.IMessageInitializer`1">
            <summary>
            A message initializer that doesn't use the input
            </summary>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="M:MassTransit.Initializers.IMessageInitializer`1.Create(MassTransit.PipeContext)">
            <summary>
            Create a message context, using <paramref name="context" /> as a base for payloads, etc.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Initializers.IMessageInitializer`1.Create(System.Threading.CancellationToken)">
            <summary>
            Create a message context
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Initializers.IMessageInitializer`1.Initialize(System.Object,System.Threading.CancellationToken)">
            <summary>
            Initialize the message, using the input
            </summary>
            <param name="input"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Initializers.IMessageInitializer`1.Initialize(MassTransit.Initializers.InitializeContext{`0},System.Object)">
            <summary>
            Initialize the message, using the input
            </summary>
            <param name="context">An existing initialize message context</param>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Initializers.IMessageInitializer`1.InitializeMessage(MassTransit.PipeContext,System.Object,MassTransit.IPipe{MassTransit.SendContext{`0}})">
            <summary>
            Initialize the message using the input and send it to the endpoint.
            </summary>
            <param name="context">The base context</param>
            <param name="input">The input object</param>
            <param name="pipe"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Initializers.IMessageInitializer`1.InitializeMessage(MassTransit.PipeContext,System.Object,System.Object[],MassTransit.IPipe{MassTransit.SendContext{`0}})">
            <summary>
            Initialize the message using the input and send it to the endpoint.
            </summary>
            <param name="context">The base context</param>
            <param name="input">The input object</param>
            <param name="moreInputs">Additional objects used to initialize the message</param>
            <param name="pipe"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Initializers.IMessageInitializer`1.InitializeMessage(System.Object,MassTransit.IPipe{MassTransit.SendContext{`0}},System.Threading.CancellationToken)">
            <summary>
            Initialize the message using the input and send it to the endpoint.
            </summary>
            <param name="input">The input object</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Initializers.InitializeContext`2">
            <summary>
            Message initialization context, which includes the message being initialized and the input
            being used to initialize the message properties.
            </summary>
            <typeparam name="TMessage">The message type</typeparam>
            <typeparam name="TInput">The input type</typeparam>
        </member>
        <member name="P:MassTransit.Initializers.InitializeContext`2.HasInput">
            <summary>
            If true, the input is present, otherwise it equals <i>default</i>.
            </summary>
        </member>
        <member name="T:MassTransit.Initializers.InitializeContext`1">
            <summary>
            The context of the message being initialized
            </summary>
            <typeparam name="TMessage">The message type</typeparam>
        </member>
        <member name="P:MassTransit.Initializers.InitializeContext`1.Message">
            <summary>
            The message being initialized
            </summary>
        </member>
        <member name="P:MassTransit.Initializers.InitializeContext.Depth">
            <summary>
            how deep this context is within the object graph
            </summary>
        </member>
        <member name="P:MassTransit.Initializers.InitializeContext.Parent">
            <summary>
            the parent initialize context, which is valid if the type is being initialized
            within another type
            </summary>
        </member>
        <member name="M:MassTransit.Initializers.InitializeContext.TryGetParent``1(MassTransit.Initializers.InitializeContext{``0}@)">
            <summary>
            Return the closest parent context for the specified type, if present
            </summary>
            <param name="parentContext"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Initializers.Variables.TimestampVariable">
            <summary>
            Used to set timestamp(s) in a message, which is the same regardless of how many times it is
            used within the same initialize message context
            </summary>
        </member>
        <member name="M:MassTransit.Internals.ExceptionExtensions.Rethrow(System.Exception)">
            <summary>
            Rethrow the exception with the call stack of the original exception
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:MassTransit.Internals.ExpressionExtensions.GetMemberName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets the name of the member specified
            </summary>
            <typeparam name="T">The type referenced</typeparam>
            <typeparam name="TMember">The type of the member referenced</typeparam>
            <param name="expression">The expression referencing the member</param>
            <returns>The name of the member referenced by the expression</returns>
        </member>
        <member name="M:MassTransit.Internals.ExpressionExtensions.GetMemberName``1(System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Gets the name of the member specified
            </summary>
            <typeparam name="T">The type referenced</typeparam>
            <param name="expression">The expression referencing the member</param>
            <returns>The name of the member referenced by the expression</returns>
        </member>
        <member name="M:MassTransit.Internals.QueryStringExtensions.ParseHostPath(System.Uri)">
            <summary>
            Parse the host path, which on a host address might be a virtual host, a scope, etc.
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Internals.QueryStringExtensions.ParseHostPathAndEntityName(System.Uri,System.String@,System.String@)">
            <summary>
            Parse the host path and entity name from the address
            </summary>
            <param name="address"></param>
            <param name="hostPath"></param>
            <param name="entityName"></param>
        </member>
        <member name="M:MassTransit.Internals.QueryStringExtensions.SplitQueryString(System.Uri)">
            <summary>
            Split the query string into an enumerable stream of tuples
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Internals.TaskExtensions.IsCompletedSuccessfully(System.Threading.Tasks.Task)">
            <summary>
            Returns true if a Task was ran to completion (without being cancelled or faulted)
            </summary>
            <param name="task"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Internals.TaskExtensions.RegisterTask(System.Threading.CancellationToken,System.Threading.Tasks.Task@)">
            <summary>
            Register a callback on the <paramref name="cancellationToken" /> which completes the resulting task.
            </summary>
            <param name="cancellationToken"></param>
            <param name="cancelTask"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:MassTransit.Internals.TypeExtensions.GetTypeName(System.Type)">
            <summary>
            Returns an easy-to-read type name from the specified Type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Internals.TypeExtensions.IsConcrete(System.Type)">
            <summary>
            Determines if a type is neither abstract nor an interface and can be constructed.
            </summary>
            <param name="type">The type to check</param>
            <returns>True if the type can be constructed, otherwise false.</returns>
        </member>
        <member name="M:MassTransit.Internals.TypeExtensions.IsConcreteAndAssignableTo(System.Type,System.Type)">
            <summary>
            Determines if a type can be constructed, and if it can, additionally determines
            if the type can be assigned to the specified type.
            </summary>
            <param name="type">The type to evaluate</param>
            <param name="assignableType">The type to which the subject type should be checked against</param>
            <returns>
            True if the type is concrete and can be assigned to the assignableType, otherwise false.
            </returns>
        </member>
        <member name="M:MassTransit.Internals.TypeExtensions.IsConcreteAndAssignableTo``1(System.Type)">
            <summary>
            Determines if a type can be constructed, and if it can, additionally determines
            if the type can be assigned to the specified type.
            </summary>
            <param name="type">The type to evaluate</param>
            <typeparam name="T">The type to which the subject type should be checked against</typeparam>
            <returns>
            True if the type is concrete and can be assigned to the assignableType, otherwise false.
            </returns>
        </member>
        <member name="M:MassTransit.Internals.TypeExtensions.IsNullable(System.Type,System.Type@)">
            <summary>
            Determines if the type is a nullable type
            </summary>
            <param name="type">The type</param>
            <param name="underlyingType">The underlying type of the nullable</param>
            <returns>True if the type can be null</returns>
        </member>
        <member name="M:MassTransit.Internals.TypeExtensions.IsOpenGeneric(System.Type)">
            <summary>
            Determines if the type is an open generic with at least one unspecified generic argument
            </summary>
            <param name="type">The type</param>
            <returns>True if the type is an open generic</returns>
        </member>
        <member name="M:MassTransit.Internals.TypeExtensions.IsOpenGeneric(System.Reflection.TypeInfo)">
            <summary>
            Determines if the TypeInfo is an open generic with at least one unspecified generic argument
            </summary>
            <param name="typeInfo">The TypeInfo</param>
            <returns>True if the TypeInfo is an open generic</returns>
        </member>
        <member name="M:MassTransit.Internals.TypeExtensions.CanBeNull(System.Type)">
            <summary>
            Determines if a type can be null
            </summary>
            <param name="type">The type</param>
            <returns>True if the type can be null</returns>
        </member>
        <member name="M:MassTransit.Internals.TypeExtensions.GetAttribute``1(System.Reflection.ICustomAttributeProvider)">
            <summary>
            Returns the first attribute of the specified type for the object specified
            </summary>
            <typeparam name="T">The type of attribute</typeparam>
            <param name="provider">An attribute provider, which can be a MethodInfo, PropertyInfo, Type, etc.</param>
            <returns>The attribute instance if found, or null</returns>
        </member>
        <member name="M:MassTransit.Internals.TypeExtensions.HasAttribute``1(System.Reflection.ICustomAttributeProvider)">
            <summary>
            Determines if the target has the specified attribute
            </summary>
            <typeparam name="T"></typeparam>
            <param name="provider"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Internals.TypeExtensions.IsAnonymousType(System.Type)">
            <summary>
            Returns true if the type is an anonymous type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Internals.TypeExtensions.IsAnonymousType(System.Reflection.TypeInfo)">
            <summary>
            Returns true if the TypeInfo is an anonymous type
            </summary>
            <param name="typeInfo"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Internals.TypeExtensions.IsFSharpType(System.Reflection.TypeInfo)">
            <summary>
            Returns true if the type is an FSharp type (maybe?)
            </summary>
            <param name="typeInfo"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Internals.TypeExtensions.IsInNamespace(System.Type,System.String)">
            <summary>
            Returns true if the type is contained within the namespace
            </summary>
            <param name="type"></param>
            <param name="nameSpace"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Internals.TypeExtensions.IsValueTypeOrObject(System.Type)">
            <summary>
            True if the type is a value type, or an object type that is treated as a value by MassTransit
            </summary>
            <param name="valueType"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Internals.GraphValidation.NodeList`2">
            <summary>
            Maintains a list of nodes for a given set of instances of T
            </summary>
            <typeparam name="T">The type encapsulated in the node</typeparam>
            <typeparam name="TNode">The type of node contained in the list</typeparam>
        </member>
        <member name="P:MassTransit.Internals.GraphValidation.NodeList`2.Item(`0)">
            <summary>
            Retrieves the node for the given key
            </summary>
            <param name="key">The key</param>
            <returns>The unique node that relates to the specified key</returns>
        </member>
        <member name="M:MassTransit.Internals.GraphValidation.NodeList`2.Index(`0)">
            <summary>
            Retrieve the index for a given key
            </summary>
            <param name="key">The key</param>
            <returns>The index</returns>
        </member>
        <member name="T:MassTransit.Internals.GraphValidation.NodeTable`1">
            <summary>
            Maintains an index of nodes so that regular ints can be used to execute algorithms
            against objects with int-compare speed vs. .Equals() speed
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:MassTransit.Internals.GraphValidation.NodeTable`1.Item(`0)">
            <summary>
            Returns the index for the specified key, which can be any type that supports
            equality comparison
            </summary>
            <param name="key">The key to retrieve</param>
            <returns>The index that uniquely relates to the specified key</returns>
        </member>
        <member name="P:MassTransit.Internals.IMessageTypeCache.DiagnosticAddress">
            <summary>
            The friendly diagnostic address for display in metrics applications
            </summary>
        </member>
        <member name="P:MassTransit.Internals.IMessageTypeCache.HasConsumerInterfaces">
            <summary>
            True if the type implements any known saga interfaces
            </summary>
        </member>
        <member name="P:MassTransit.Internals.IMessageTypeCache.HasSagaInterfaces">
            <summary>
            True if the type implements any known saga interfaces
            </summary>
        </member>
        <member name="P:MassTransit.Internals.IMessageTypeCache.IsValidMessageType">
            <summary>
            True if the message type is a valid message type
            </summary>
        </member>
        <member name="P:MassTransit.Internals.IMessageTypeCache.InvalidMessageTypeReason">
            <summary>
            Once checked, the reason why the message type is invalid
            </summary>
        </member>
        <member name="P:MassTransit.Internals.IMessageTypeCache.IsTemporaryMessageType">
            <summary>
            True if this message is not a public type
            </summary>
        </member>
        <member name="P:MassTransit.Internals.IMessageTypeCache.MessageTypes">
            <summary>
            Returns all valid message types that are contained within the s
            </summary>
        </member>
        <member name="P:MassTransit.Internals.IMessageTypeCache.MessageTypeNames">
            <summary>
            The names of all the message types supported by the message type
            </summary>
        </member>
        <member name="T:MassTransit.InVar">
            <summary>
            Variables, which can be used for message initialization
            </summary>
        </member>
        <member name="P:MassTransit.InVar.Timestamp">
            <summary>
            Generates the current timestamp, in UTC, which can be used to initialize properties
            in the message with a consistent value
            </summary>
        </member>
        <member name="P:MassTransit.InVar.Id">
            <summary>
            Generates a new identifier, and maintains that identifier for the entire message initializer lifetime,
            so that subsequent uses of the identifier return the same value. There are multiple aliases for the same
            identifier, so that property names are automatically inferred (Id, CorrelationId, etc.).
            </summary>
        </member>
        <member name="P:MassTransit.InVar.CorrelationId">
            <summary>
            Generates a new identifier, and maintains that identifier for the entire message initializer lifetime,
            so that subsequent uses of the identifier return the same value. There are multiple aliases for the same
            identifier, so that property names are automatically inferred (Id, CorrelationId, etc.).
            </summary>
        </member>
        <member name="T:MassTransit.IPublishEndpoint">
            <summary>
            A publish endpoint lets the underlying transport determine the actual endpoint to which
            the message is sent. For example, an exchange on RabbitMQ and a topic on Azure Service bus.
            </summary>
        </member>
        <member name="M:MassTransit.IPublishEndpoint.Publish``1(``0,System.Threading.CancellationToken)">
            <summary>
            <para>
            Publishes a message to all subscribed consumers for the message type as specified
            by the generic parameter. The second parameter allows the caller to customize the
            outgoing publish context and set things like headers on the message.
            </para>
            </summary>
            <typeparam name="T">The type of the message</typeparam>
            <param name="message">The messages to be published</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:MassTransit.IPublishEndpoint.Publish``1(``0,MassTransit.IPipe{MassTransit.PublishContext{``0}},System.Threading.CancellationToken)">
            <summary>
            <para>
            Publishes a message to all subscribed consumers for the message type as specified
            by the generic parameter. The second parameter allows the caller to customize the
            outgoing publish context and set things like headers on the message.
            </para>
            </summary>
            <typeparam name="T">The type of the message</typeparam>
            <param name="message">The messages to be published</param>
            <param name="publishPipe"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:MassTransit.IPublishEndpoint.Publish``1(``0,MassTransit.IPipe{MassTransit.PublishContext},System.Threading.CancellationToken)">
            <summary>
            <para>
            Publishes a message to all subscribed consumers for the message type as specified
            by the generic parameter. The second parameter allows the caller to customize the
            outgoing publish context and set things like headers on the message.
            </para>
            </summary>
            <typeparam name="T">The type of the message</typeparam>
            <param name="message">The messages to be published</param>
            <param name="publishPipe"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:MassTransit.IPublishEndpoint.Publish(System.Object,System.Threading.CancellationToken)">
            <summary>
            Publishes an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="message">The message object</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:MassTransit.IPublishEndpoint.Publish(System.Object,MassTransit.IPipe{MassTransit.PublishContext},System.Threading.CancellationToken)">
            <summary>
            Publishes an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="message">The message object</param>
            <param name="publishPipe"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:MassTransit.IPublishEndpoint.Publish(System.Object,System.Type,System.Threading.CancellationToken)">
            <summary>
            Publishes an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="message">The message object</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:MassTransit.IPublishEndpoint.Publish(System.Object,System.Type,MassTransit.IPipe{MassTransit.PublishContext},System.Threading.CancellationToken)">
            <summary>
            Publishes an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="message">The message object</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="publishPipe"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:MassTransit.IPublishEndpoint.Publish``1(System.Object,System.Threading.CancellationToken)">
            <summary>
            <see cref="M:MassTransit.IPublishEndpoint.Publish``1(``0,System.Threading.CancellationToken)" />: this is a "dynamically"
            typed overload - give it an interface as its type parameter,
            and a loosely typed dictionary of values and the MassTransit
            underlying infrastructure will populate an object instance
            with the passed values. It actually does this with DynamicProxy
            in the background.
            </summary>
            <typeparam name="T">
            The type of the interface or non-sealed class with all-virtual members.
            </typeparam>
            <param name="values">
            The dictionary of values to place in the object instance to implement the interface.
            </param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:MassTransit.IPublishEndpoint.Publish``1(System.Object,MassTransit.IPipe{MassTransit.PublishContext{``0}},System.Threading.CancellationToken)">
            <summary>
            <see cref="M:MassTransit.IPublishEndpoint.Publish``1(``0,System.Threading.CancellationToken)" />: this
            overload further takes an action; it allows you to set <see cref="T:MassTransit.PublishContext" />
            meta-data. Also <see cref="M:MassTransit.IPublishEndpoint.Publish``1(``0,System.Threading.CancellationToken)" />.
            </summary>
            <typeparam name="T">The type of the message to publish</typeparam>
            <param name="values">
            The dictionary of values to become hydrated and published under the type of the interface.
            </param>
            <param name="publishPipe"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:MassTransit.IPublishEndpoint.Publish``1(System.Object,MassTransit.IPipe{MassTransit.PublishContext},System.Threading.CancellationToken)">
            <summary>
            <see cref="M:MassTransit.IPublishEndpoint.Publish``1(``0,System.Threading.CancellationToken)" />: this
            overload further takes an action; it allows you to set <see cref="T:MassTransit.PublishContext" />
            meta-data. Also <see cref="M:MassTransit.IPublishEndpoint.Publish``1(``0,System.Threading.CancellationToken)" />.
            </summary>
            <typeparam name="T">The type of the message to publish</typeparam>
            <param name="values">
            The dictionary of values to become hydrated and published under the type of the interface.
            </param>
            <param name="publishPipe"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:MassTransit.IPublishEndpointProvider.GetPublishSendEndpoint``1">
            <summary>
            Return the SendEndpoint used for publishing the specified message
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:MassTransit.IReceiveEndpoint">
            <summary>
            A service endpoint has an inbound transport that pushes messages to consumers
            </summary>
        </member>
        <member name="M:MassTransit.IReceiveEndpoint.Start(System.Threading.CancellationToken)">
            <summary>
            Start the receive endpoint
            </summary>
            <param name="cancellationToken">Cancel the start operation in progress</param>
            <returns>An awaitable task that is completed once everything is started</returns>
        </member>
        <member name="M:MassTransit.IReceiveEndpoint.Stop(System.Threading.CancellationToken)">
            <summary>
            Stop the receive endpoint.
            </summary>
            <param name="cancellationToken">Cancel the stop operation in progress</param>
            <returns>An awaitable task that is completed once everything is stopped</returns>
        </member>
        <member name="T:MassTransit.ISaga">
            <summary>
            Interface that specifies a class is usable as a saga instance, including
            the ability to get and set the CorrelationId on the saga instance.
            </summary>
        </member>
        <member name="P:MassTransit.ISaga.CorrelationId">
            <summary>
            Identifies the saga instance uniquely, and is the primary correlation
            for the instance. While the setter is not typically called, it is there
            to support persistence consistently across implementations.
            </summary>
        </member>
        <member name="M:MassTransit.ISendEndpoint.Send``1(``0,System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="message">The message</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ISendEndpoint.Send``1(``0,MassTransit.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="message">The message</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ISendEndpoint.Send``1(``0,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="message">The message</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ISendEndpoint.Send(System.Object,System.Threading.CancellationToken)">
            <summary>
            Sends an object as a message, using the type of the message instance.
            </summary>
            <param name="message">The message object</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ISendEndpoint.Send(System.Object,System.Type,System.Threading.CancellationToken)">
            <summary>
            Sends an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="message">The message object</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ISendEndpoint.Send(System.Object,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Sends an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="message">The message object</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ISendEndpoint.Send(System.Object,System.Type,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Sends an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="message">The message object</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ISendEndpoint.Send``1(System.Object,System.Threading.CancellationToken)">
            <summary>
            Sends an interface message, initializing the properties of the interface using the anonymous object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="values">The property values to initialize on the interface</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ISendEndpoint.Send``1(System.Object,MassTransit.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Sends an interface message, initializing the properties of the interface using the anonymous object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="values">The property values to initialize on the interface</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ISendEndpoint.Send``1(System.Object,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Sends an interface message, initializing the properties of the interface using the anonymous object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="values">The property values to initialize on the interface</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="T:MassTransit.ISendEndpointProvider">
            <summary>
            The Send Endpoint Provider is used to retrieve endpoints using addresses. The interface is
            available both at the bus and within the context of most message receive handlers, including
            the consume context, saga context, consumer context, etc. The most local provider should be
            used to ensure message continuity is maintained.
            </summary>
        </member>
        <member name="M:MassTransit.ISendEndpointProvider.GetSendEndpoint(System.Uri)">
            <summary>
            Return the send endpoint for the specified address
            </summary>
            <param name="address">The endpoint address</param>
            <returns>The send endpoint</returns>
        </member>
        <member name="P:MassTransit.Contracts.JobService.CancelJob.JobId">
            <summary>
            The job identifier
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.JobService.CancelJob.Timestamp">
            <summary>
            The time the job was started
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.JobService.CancelJob.Reason">
            <summary>
            The reason for cancelling the job
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.JobService.CompleteJob.Job">
            <summary>
            The job, as an object dictionary
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.JobService.CompleteJob.Result">
            <summary>
            The result of the job
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.JobService.CompleteJob.JobTypeId">
            <summary>
            The JobTypeId, to ensure the proper job type is started
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.JobService.FaultJob.AttemptId">
            <summary>
            Identifies this attempt to run the job
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.JobService.FaultJob.RetryAttempt">
            <summary>
            Zero if the job is being started for the first time, otherwise, the number of previous failures
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.JobService.FaultJob.Duration">
            <summary>
            The overall duration spent trying to process the job
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.JobService.FaultJob.Job">
            <summary>
            The job, as an object dictionary
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.JobService.FaultJob.JobTypeId">
            <summary>
            The JobTypeId, to ensure the proper job type is started
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.JobService.GetJobAttemptStatus.JobId">
            <summary>
            The job identifier
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.JobService.GetJobAttemptStatus.AttemptId">
            <summary>
            Identifies this attempt to run the job
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.JobService.GetJobState.JobId">
            <summary>
            The job identifier
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.JobService.JobAttemptFaulted.RetryAttempt">
            <summary>
            The retry attempt that faulted. Zero for the first attempt.
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.JobService.JobAttemptFaulted.RetryDelay">
            <summary>
            If present, the delay until the next retry
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.JobService.JobAttemptStarted.JobId">
            <summary>
            The job identifier
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.JobService.JobAttemptStarted.AttemptId">
            <summary>
            Identifies this attempt to run the job
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.JobService.JobAttemptStarted.RetryAttempt">
            <summary>
            Zero if the job is being started for the first time, otherwise, the number of previous failures
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.JobService.JobAttemptStarted.Timestamp">
            <summary>
            The time the job was started
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.JobService.JobAttemptStarted.InstanceAddress">
            <summary>
            The address of the instance on which this job was started
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.JobService.JobAttemptStatus.JobId">
            <summary>
            The job identifier
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.JobService.JobAttemptStatus.AttemptId">
            <summary>
            Identifies this attempt to run the job
            </summary>
        </member>
        <member name="T:MassTransit.Contracts.JobService.JobCanceled">
            <summary>
            Published when a job faults
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.JobService.JobCanceled.JobId">
            <summary>
            The job identifier
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.JobService.JobCanceled.Timestamp">
            <summary>
            The time the job was cancelled
            </summary>
        </member>
        <member name="T:MassTransit.Contracts.JobService.JobCompleted">
            <summary>
            Published when a job completes
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.JobService.JobCompleted.JobId">
            <summary>
            The job identifier
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.JobService.JobCompleted.Job">
            <summary>
            The arguments used to start the job
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.JobService.JobCompleted.Result">
            <summary>
            The result of the job
            </summary>
        </member>
        <member name="T:MassTransit.Contracts.JobService.JobCompleted`1">
            <summary>
            Published when a job completes (separately from <see cref="T:MassTransit.Contracts.JobService.JobCompleted"/>)
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.JobService.JobCompleted`1.Job">
            <summary>
            The arguments used to start the job
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.JobService.JobCompleted`1.Result">
            <summary>
            The result of the job
            </summary>
        </member>
        <member name="T:MassTransit.Contracts.JobService.JobFaulted">
            <summary>
            Published when a job faults
            </summary>
        </member>
        <member name="T:MassTransit.Contracts.JobService.JobStarted">
            <summary>
            Event published when a node starts processing a job
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.JobService.JobStarted.JobId">
            <summary>
            The job identifier
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.JobService.JobStarted.AttemptId">
            <summary>
            Identifies this attempt to run the job
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.JobService.JobStarted.RetryAttempt">
            <summary>
            Zero if the job is being started for the first time, otherwise, the number of previous failures
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.JobService.JobStarted.Timestamp">
            <summary>
            The time the job was started
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.JobService.JobState.JobId">
            <summary>
            The job identifier
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.JobService.JobState.Submitted">
            <summary>
            When the job was submitted
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.JobService.JobState.Started">
            <summary>
            When the job was started, if it has started
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.JobService.JobState.Completed">
            <summary>
            When the job completed, if it completed
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.JobService.JobState.Faulted">
            <summary>
            When the job faulted, if it faulted
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.JobService.JobState.Reason">
            <summary>
            The fault reason, if it faulted
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.JobService.JobState.LastRetryAttempt">
            <summary>
            If the job has been retried, will be > 0
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.JobService.JobState.CurrentState">
            <summary>
            The current job state
            </summary>
        </member>
        <member name="T:MassTransit.Contracts.JobService.JobStatusCheckRequested">
            <summary>
            Signals that the time to supervise a job has expired, and the instance should be checked
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.JobService.JobStatusCheckRequested.AttemptId">
            <summary>
            Identifies this attempt to run the job
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.JobService.JobSubmitted.JobId">
            <summary>
            The job identifier
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.JobService.JobSubmitted.Timestamp">
            <summary>
            The time the job was submitted
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.JobService.JobSubmitted.JobTimeout">
            <summary>
            Timeout when running job
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.JobService.JobSubmitted.Job">
            <summary>
            The job, as an object dictionary
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.JobService.RetryJob.JobId">
            <summary>
            The job identifier
            </summary>
        </member>
        <member name="T:MassTransit.Contracts.JobService.SetConcurrentJobLimit">
            <summary>
            When the bus is started, the current job limit for a job type is published along with the instance address.
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.JobService.SetConcurrentJobLimit.Duration">
            <summary>
            How long a overridden limit should be in effect
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.JobService.StartJob.JobId">
            <summary>
            The job identifier
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.JobService.StartJob.AttemptId">
            <summary>
            Identifies this attempt to run the job
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.JobService.StartJob.RetryAttempt">
            <summary>
            Zero if the job is being started for the first time, otherwise, the number of previous failures
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.JobService.StartJob.Job">
            <summary>
            The job, as an object dictionary
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.JobService.StartJob.JobTypeId">
            <summary>
            The JobTypeId, to ensure the proper job type is started
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.JobService.StartJobAttempt.JobId">
            <summary>
            The job identifier
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.JobService.StartJobAttempt.AttemptId">
            <summary>
            Identifies this attempt to run the job
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.JobService.StartJobAttempt.RetryAttempt">
            <summary>
            Zero if the job is being started for the first time, otherwise, the number of previous failures
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.JobService.StartJobAttempt.ServiceAddress">
            <summary>
            The service address where the job can be started
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.JobService.StartJobAttempt.InstanceAddress">
            <summary>
            The instance address of the assigned job slot instance
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.JobService.StartJobAttempt.Job">
            <summary>
            The job, as an object dictionary
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.JobService.StartJobAttempt.JobTypeId">
            <summary>
            The JobTypeId, to ensure the proper job type is started
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.CircuitBreakerOpened.Exception">
            <summary>
            The exception that caused the circuit breaker to open
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.CommandContext.Timestamp">
            <summary>
            The timestamp at which the command was sent
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.CommandContext`1.Command">
            <summary>
            The command object
            </summary>
        </member>
        <member name="T:MassTransit.Contracts.ConcurrencyLimitUpdated">
            <summary>
            Published when the concurrency limit of a filter is updated.
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.ConcurrencyLimitUpdated.Timestamp">
            <summary>
            The actual time at which the adjustment was applied
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.ConcurrencyLimitUpdated.Id">
            <summary>
            The identifier that was adjusted
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.ConcurrencyLimitUpdated.ConcurrencyLimit">
            <summary>
            The current concurrency limit value
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.EventContext.Timestamp">
            <summary>
            The timestamp at which the command was sent
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.EventContext`1.Event">
            <summary>
            The event object
            </summary>
        </member>
        <member name="T:MassTransit.Contracts.SetConcurrencyLimit">
            <summary>
            Sets the concurrency limit of a concurrency limit filter
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.SetConcurrencyLimit.Timestamp">
            <summary>
            The timestamp at which the adjustment command was sent
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.SetConcurrencyLimit.Id">
            <summary>
            The identifier of the concurrency limit to set (optional)
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.SetConcurrencyLimit.ConcurrencyLimit">
            <summary>
            The new concurrency limit for the filter
            </summary>
        </member>
        <member name="T:MassTransit.Contracts.SetRateLimit">
            <summary>
            Set the rate limit of the RateLimitFilter
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.SetRateLimit.RateLimit">
            <summary>
            The new rate limit for the filter
            </summary>
        </member>
        <member name="T:MassTransit.Contracts.RequestCompleted">
            <summary>
            Published by the saga when a request is completed, so that waiting requests can be completed, or redelivered to the
            saga for completion.
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.RequestCompleted.CorrelationId">
            <summary>
            The saga correlationId
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.RequestCompleted.Timestamp">
            <summary>
            The timestamp when the request was completed
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.RequestCompleted.PayloadType">
            <summary>
            The payload types supported by the payload
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.RequestCompleted.Payload">
            <summary>
            The actual message payload
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.RequestFaulted.CorrelationId">
            <summary>
            The saga correlationId, used to reconnect to the saga once the request is completed
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.RequestFaulted.PayloadType">
            <summary>
            The payload types supported by the payload
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.RequestFaulted.Payload">
            <summary>
            The actual message payload
            </summary>
        </member>
        <member name="T:MassTransit.Contracts.RequestStarted">
            <summary>
            Published when a saga starts to process a request, but a subsequent operation (such as another request) is
            pending.
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.RequestStarted.CorrelationId">
            <summary>
            The saga correlationId, used to reconnect to the saga once the request is completed
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.RequestStarted.RequestId">
            <summary>
            The RequestId header value that was specified in the original request
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.RequestStarted.ResponseAddress">
            <summary>
            The ResponseAddress header value from the original request
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.RequestStarted.FaultAddress">
            <summary>
            The FaultAddress header value from the original request
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.RequestStarted.ExpirationTime">
            <summary>
            The expiration time for this request, which if completed after, the response is discarded
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.RequestStarted.PayloadType">
            <summary>
            The payload types supported by the payload
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.RequestStarted.Payload">
            <summary>
            The actual message payload
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.RequestTimeoutExpired`1.CorrelationId">
            <summary>
            The correlationId of the state machine
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.RequestTimeoutExpired`1.Timestamp">
            <summary>
            When the request expired
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.RequestTimeoutExpired`1.ExpirationTime">
            <summary>
            The expiration time that was scheduled for the request
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.RequestTimeoutExpired`1.RequestId">
            <summary>
            The requestId of the request
            </summary>
        </member>
        <member name="P:MassTransit.Contracts.RequestTimeoutExpired`1.Message">
            <summary>
            The  original request message.
            </summary>
        </member>
        <member name="M:MassTransit.MediatorRequestExtensions.SendRequest``1(MassTransit.Mediator.IMediator,MassTransit.Mediator.Request{``0},System.Threading.CancellationToken)">
            <summary>
            Sends a request, with the specified response type, and awaits the response.
            </summary>
            <param name="mediator"></param>
            <param name="request">The request message</param>
            <param name="cancellationToken"></param>
            <typeparam name="T">The response type</typeparam>
            <returns>The response object</returns>
        </member>
        <member name="T:MassTransit.Mediator.MediatorRequestHandler`1">
            <summary>
            A Mediator request handler base class, that provides a simplified overridable method with
            a Task (void) return type
            </summary>
            <typeparam name="TRequest"></typeparam>
        </member>
        <member name="T:MassTransit.Mediator.MediatorRequestHandler`2">
            <summary>
            A Mediator request handler base class, that provides a simplified overridable method with
            a Task&lt;typeparamref name="TResponse"/>&gt; return type
            </summary>
            <typeparam name="TRequest"></typeparam>
            <typeparam name="TResponse"></typeparam>
        </member>
        <member name="T:MassTransit.Mediator.Request`1">
            <summary>
            A mediator interface, signaling the response type expected by a request
            </summary>
            <typeparam name="TResponse">The response type tied to the request</typeparam>
        </member>
        <member name="P:MassTransit.IMessageData.Address">
            <summary>
            Returns the address of the message data
            </summary>
        </member>
        <member name="P:MassTransit.IMessageData.HasValue">
            <summary>
            True if the value is present in the message, and not null
            </summary>
        </member>
        <member name="T:MassTransit.IMessageDataRepository">
            <summary>
            Storage of large message data that can be stored and retrieved separate of the message body.
            Implemented as a claim-check pattern when an identifier is stored in the message body which
            is used to retrieve the message data separately.
            </summary>
        </member>
        <member name="M:MassTransit.IMessageDataRepository.Get(System.Uri,System.Threading.CancellationToken)">
            <summary>
            Returns a stream to read the message data for the specified address.
            </summary>
            <param name="address">The data address</param>
            <param name="cancellationToken">A cancellation token for the request</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IMessageDataRepository.Put(System.IO.Stream,System.Nullable{System.TimeSpan},System.Threading.CancellationToken)">
            <summary>
            Puts message data into the repository
            </summary>
            <param name="stream">The stream of data for the message</param>
            <param name="timeToLive"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.MessageData`1">
            <summary>
            MessageData is used when a property size may be larger than what should be sent via the message
            transport. This would includes attachments such as images, documents, videos, etc. Using MessageData,
            it is possible to include large properties without sending them in the actual message. The claim check
            pattern is the common reference.
            </summary>
            <typeparam name="T">
            The type used to access the message data, valid types include stream, string, and byte[].
            </typeparam>
        </member>
        <member name="P:MassTransit.MessageData`1.Value">
            <summary>
            The property value, which may be loaded asynchronously from the message data repository.
            </summary>
        </member>
        <member name="P:MassTransit.MessageDataDefaults.AlwaysWriteToRepository">
            <summary>
            Transitional, will always write to the repository but will include inline to avoid reading on
            current framework clients. If all services are upgraded, set to false so that data sizes below
            the threshold are not written to the repository.
            </summary>
        </member>
        <member name="P:MassTransit.MessageDataDefaults.Threshold">
            <summary>
            Set the threshold for automatic message data to be written to the repository, vs stored inline.
            </summary>
        </member>
        <member name="P:MassTransit.MessageDataDefaults.TimeToLive">
            <summary>
            Set the default time to live for message data when no expiration is specified
            </summary>
        </member>
        <member name="P:MassTransit.MessageDataDefaults.ExtraTimeToLive">
            <summary>
            Set an extra time to live for message data, which is added to inferred expiration based upon
            SendContext TimeToLive.
            </summary>
        </member>
        <member name="T:MassTransit.MessageHandler`1">
            <summary>
            A message handler is a delegate type that asynchronously consumes the message
            </summary>
            <typeparam name="TMessage">The message type</typeparam>
            <param name="context">The consume context</param>
            <returns>An awaitable task that is completed once the message has been consumed</returns>
        </member>
        <member name="F:MassTransit.MessageHeaders.Reason">
            <summary>
            The reason for a message action being taken
            </summary>
        </member>
        <member name="F:MassTransit.MessageHeaders.FaultExceptionType">
            <summary>
            The type of exception from a Fault
            </summary>
        </member>
        <member name="F:MassTransit.MessageHeaders.FaultInputAddress">
            <summary>
            The input address of the endpoint on which the fault occurred
            </summary>
        </member>
        <member name="F:MassTransit.MessageHeaders.FaultMessage">
            <summary>
            The exception message from a Fault
            </summary>
        </member>
        <member name="F:MassTransit.MessageHeaders.FaultMessageType">
            <summary>
            The message type from a Fault
            </summary>
        </member>
        <member name="F:MassTransit.MessageHeaders.FaultConsumerType">
            <summary>
            The consumer type which faulted
            </summary>
        </member>
        <member name="F:MassTransit.MessageHeaders.FaultTimestamp">
            <summary>
            The timestamp when the fault occurred
            </summary>
        </member>
        <member name="F:MassTransit.MessageHeaders.FaultStackTrace">
            <summary>
            The stack trace from a Fault
            </summary>
        </member>
        <member name="F:MassTransit.MessageHeaders.FaultRetryCount">
            <summary>
            The number of times the message was retried
            </summary>
        </member>
        <member name="F:MassTransit.MessageHeaders.FaultRedeliveryCount">
            <summary>
            The number of times the message was redelivered
            </summary>
        </member>
        <member name="F:MassTransit.MessageHeaders.ForwarderAddress">
            <summary>
            The endpoint that forwarded the message to the new destination
            </summary>
        </member>
        <member name="F:MassTransit.MessageHeaders.SchedulingTokenId">
            <summary>
            The tokenId for the message that was registered with the scheduler
            </summary>
        </member>
        <member name="F:MassTransit.MessageHeaders.RedeliveryCount">
            <summary>
            The number of times the message has been redelivered (zero if never)
            </summary>
        </member>
        <member name="F:MassTransit.MessageHeaders.QuartzTriggerKey">
            <summary>
            The trigger key that was used when the scheduled message was trigger
            </summary>
        </member>
        <member name="F:MassTransit.MessageHeaders.ClientId">
            <summary>
            Identifies the client from which the request is being sent
            </summary>
        </member>
        <member name="F:MassTransit.MessageHeaders.EndpointId">
            <summary>
            Identifies the endpoint that handled the request
            </summary>
        </member>
        <member name="F:MassTransit.MessageHeaders.InitiatingConversationId">
            <summary>
            The initiating conversation id if a new conversation was started by this message
            </summary>
        </member>
        <member name="F:MassTransit.MessageHeaders.MessageId">
            <summary>
            MessageId - <see cref="T:MassTransit.Serialization.MessageEnvelope" />
            </summary>
        </member>
        <member name="F:MassTransit.MessageHeaders.CorrelationId">
            <summary>
            CorrelationId - <see cref="T:MassTransit.Serialization.MessageEnvelope" />
            </summary>
        </member>
        <member name="F:MassTransit.MessageHeaders.ConversationId">
            <summary>
            ConversationId - <see cref="T:MassTransit.Serialization.MessageEnvelope" />
            </summary>
        </member>
        <member name="F:MassTransit.MessageHeaders.RequestId">
            <summary>
            RequestId - <see cref="T:MassTransit.Serialization.MessageEnvelope" />
            </summary>
        </member>
        <member name="F:MassTransit.MessageHeaders.InitiatorId">
            <summary>
            InitiatorId - <see cref="T:MassTransit.Serialization.MessageEnvelope" />
            </summary>
        </member>
        <member name="F:MassTransit.MessageHeaders.SourceAddress">
            <summary>
            SourceAddress - <see cref="T:MassTransit.Serialization.MessageEnvelope" />
            </summary>
        </member>
        <member name="F:MassTransit.MessageHeaders.ResponseAddress">
            <summary>
            ResponseAddress - <see cref="T:MassTransit.Serialization.MessageEnvelope" />
            </summary>
        </member>
        <member name="F:MassTransit.MessageHeaders.FaultAddress">
            <summary>
            FaultAddress - <see cref="T:MassTransit.Serialization.MessageEnvelope" />
            </summary>
        </member>
        <member name="F:MassTransit.MessageHeaders.MessageType">
            <summary>
            MessageType - <see cref="T:MassTransit.Serialization.MessageEnvelope" />
            </summary>
        </member>
        <member name="F:MassTransit.MessageHeaders.TransportMessageId">
            <summary>
            The Transport message ID, which is a string, because we can't assume anything
            </summary>
        </member>
        <member name="F:MassTransit.MessageHeaders.OriginalMessageId">
            <summary>
            When the message is redelivered or scheduled, and a new MessageId was generated, the original messageId
            </summary>
        </member>
        <member name="F:MassTransit.MessageHeaders.ContentType">
            <summary>
            When a transport header is used, this is the name
            </summary>
        </member>
        <member name="F:MassTransit.MessageHeaders.FutureId">
            <summary>
            Used in routing slip variables to store the correlationId of a future
            </summary>
        </member>
        <member name="F:MassTransit.MessageHeaders.Quartz.Scheduled">
            <summary>
            The time when the message was scheduled
            </summary>
        </member>
        <member name="F:MassTransit.MessageHeaders.Quartz.Sent">
            <summary>
            When the event for this message was fired by Quartz
            </summary>
        </member>
        <member name="F:MassTransit.MessageHeaders.Quartz.NextScheduled">
            <summary>
            When the next message is scheduled to be sent
            </summary>
        </member>
        <member name="F:MassTransit.MessageHeaders.Quartz.PreviousSent">
            <summary>
            When the previous message was sent
            </summary>
        </member>
        <member name="F:MassTransit.MessageHeaders.Quartz.ScheduleId">
            <summary>
            Schedule identifier
            </summary>
        </member>
        <member name="F:MassTransit.MessageHeaders.Quartz.ScheduleGroup">
            <summary>
            Schedule group
            </summary>
        </member>
        <member name="M:MassTransit.MessageTypeCache`1.GetMessageTypes">
            <summary>
            Returns all the message types that are available for the specified type. This will
            return any base classes or interfaces implemented by the type that are allowed
            message types.
            </summary>
            <returns>An enumeration of valid message types implemented by the specified type</returns>
        </member>
        <member name="M:MassTransit.MessageTypeCache`1.CheckIfValidMessageType">
            <summary>
            Returns true if the specified type is an allowed message type, i.e.
            that it doesn't come from the .Net core assemblies or is without a namespace,
            amongst others.
            </summary>
            <returns>True if the message can be sent, otherwise false</returns>
        </member>
        <member name="M:MassTransit.Metadata.IImplementedMessageTypeCache`1.EnumerateImplementedTypes(MassTransit.Metadata.IImplementedMessageType,System.Boolean)">
            <summary>
            Invokes the interface for each implemented type of the message
            </summary>
            <param name="implementedMessageType"></param>
            <param name="includeActualType"></param>
        </member>
        <member name="M:MassTransit.Metadata.ImplementedMessageTypeCache`1.EnumerateImplementedTypes(MassTransit.Metadata.IImplementedMessageType,System.Boolean)">
            <summary>
            Enumerate the implemented message types
            </summary>
            <param name="implementedMessageType">The interface reference to invoke for each type</param>
            <param name="includeActualType">Include the actual message type first, before any implemented types</param>
        </member>
        <member name="F:MassTransit.Metadata.ImplementedMessageTypeCache`1.ImplementedType.Type">
            <summary>
            The implemented type
            </summary>
        </member>
        <member name="F:MassTransit.Metadata.ImplementedMessageTypeCache`1.ImplementedType.Direct">
            <summary>
            True if the interface is directly implemented by the type
            </summary>
        </member>
        <member name="M:MassTransit.AgentExtensions.Stop(MassTransit.IAgent,System.Threading.CancellationToken)">
            <summary>
            Stop the agent, using the default StopContext
            </summary>
            <param name="agent"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.AgentExtensions.Stop(MassTransit.IAgent,System.String,System.Threading.CancellationToken)">
            <summary>
            Stop the agent, using the default StopContext
            </summary>
            <param name="agent"></param>
            <param name="reason">The reason for stopping the agent</param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.BindContext`2">
            <summary>
            The binding of a value to the context, which is a fancy form of Tuple
            </summary>
            <typeparam name="TLeft">The pipe context type</typeparam>
            <typeparam name="TRight">The source context type</typeparam>
        </member>
        <member name="M:MassTransit.ConcurrencyLimitExtensions.SetConcurrencyLimit(MassTransit.IPipe{MassTransit.Contracts.CommandContext},System.Int32)">
            <summary>
            Set the concurrency limit of the filter
            </summary>
            <param name="pipe"></param>
            <param name="concurrencyLimit"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.IAgent">
            <summary>
            An agent can be supervised, and signals when it has completed
            </summary>
        </member>
        <member name="P:MassTransit.IAgent.Ready">
            <summary>
            A Task which can be awaited and is completed when the agent is either ready or faulted/canceled
            </summary>
        </member>
        <member name="P:MassTransit.IAgent.Completed">
            <summary>
            A Task which is completed when the agent has completed (should never be set to Faulted, per convention)
            </summary>
        </member>
        <member name="P:MassTransit.IAgent.Stopping">
            <summary>
            The token which indicates if the agent is in the process of stopping (or stopped)
            </summary>
        </member>
        <member name="P:MassTransit.IAgent.Stopped">
            <summary>
            The token which indicates if the agent is stopped
            </summary>
        </member>
        <member name="M:MassTransit.IAgent.Stop(MassTransit.StopContext)">
            <summary>
            Stop the agent, and any supervised agents under it's control. Any faults related to stopping should
            be returned via this method, and not propagated to the <see cref="P:MassTransit.IAgent.Completed"/> Task.
            </summary>
            <param name="context">The stop context</param>
        </member>
        <member name="T:MassTransit.IAgent`1">
            <summary>
            An agent that is also a pipe context source, of the specified context type
            </summary>
            <typeparam name="TContext"></typeparam>
        </member>
        <member name="T:MassTransit.IExceptionFilter">
            <summary>
            Filter exceptions for policies that act based on an exception
            </summary>
        </member>
        <member name="M:MassTransit.IExceptionFilter.Match(System.Exception)">
            <summary>
            Returns true if the exception matches the filter and the policy should
            be applied to the exception.
            </summary>
            <param name="exception">The exception</param>
            <returns>True if the exception matches the filter, otherwise false.</returns>
        </member>
        <member name="T:MassTransit.IFilter`1">
            <summary>
            A filter is a functional node in a pipeline, connected by pipes to
            other filters.
            </summary>
            <typeparam name="TContext">The pipe context type</typeparam>
        </member>
        <member name="M:MassTransit.IFilter`1.Send(`0,MassTransit.IPipe{`0})">
            <summary>
            Sends a context to a filter, such that it can be processed and then passed to the
            specified output pipe for further processing.
            </summary>
            <param name="context">The pipe context type</param>
            <param name="next">The next pipe in the pipeline</param>
            <returns>An awaitable Task</returns>
        </member>
        <member name="M:MassTransit.IPipe`1.Send(`0)">
            <summary>
            The base primitive, Send delivers the pipe context of T to the pipe.
            </summary>
            <param name="context">The pipe context of type T</param>
            <returns>A task which is completed once the pipe has processed the context</returns>
        </member>
        <member name="T:MassTransit.IPipeContextSource`1">
            <summary>
            A source provides the context which is sent to the specified pipe.
            </summary>
            <typeparam name="TContext">The pipe context type</typeparam>
        </member>
        <member name="M:MassTransit.IPipeContextSource`1.Send(MassTransit.IPipe{`0},System.Threading.CancellationToken)">
            <summary>
            Send a context from the source through the specified pipe
            </summary>
            <param name="pipe">The destination pipe</param>
            <param name="cancellationToken">The cancellationToken, which should be included in the context</param>
        </member>
        <member name="T:MassTransit.IPipeContextSource`2">
            <summary>
            A source which provides the context using the input context to select the appropriate source.
            </summary>
            <typeparam name="TContext">The output context type</typeparam>
            <typeparam name="TInput">The input context type</typeparam>
        </member>
        <member name="M:MassTransit.IPipeContextSource`2.Send(`1,MassTransit.IPipe{`0})">
            <summary>
            Send a context from the source through the specified pipe, using the input context to select the proper source.
            </summary>
            <param name="context"></param>
            <param name="pipe"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.IRequestPipeConnector">
            <summary>
            Connect a request pipe to the pipeline
            </summary>
        </member>
        <member name="M:MassTransit.IRequestPipeConnector.ConnectRequestPipe``1(System.Guid,MassTransit.IPipe{MassTransit.ConsumeContext{``0}})">
            <summary>
            Connect the consume pipe to the pipeline for messages with the specified RequestId header
            </summary>
            <typeparam name="T"></typeparam>
            <param name="requestId"></param>
            <param name="pipe"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.IRetryPolicy">
            <summary>
            A retry policy determines how exceptions are handled, and whether or not the
            remaining filters should be retried
            </summary>
        </member>
        <member name="M:MassTransit.IRetryPolicy.CreatePolicyContext``1(``0)">
            <summary>
            Creates a retry policy context for the retry, which initiates the exception tracking
            </summary>
            <typeparam name="T"></typeparam>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IRetryPolicy.IsHandled(System.Exception)">
            <summary>
            If the retry policy handles the exception, should return true
            </summary>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.ISupervisor">
            <summary>
            A supervisor with a set of agents (a supervisor is also an agent)
            </summary>
        </member>
        <member name="P:MassTransit.ISupervisor.PeakActiveCount">
            <summary>
            The peak number of agents active at the same time
            </summary>
        </member>
        <member name="P:MassTransit.ISupervisor.TotalCount">
            <summary>
            The total number of agents that were added to the supervisor
            </summary>
        </member>
        <member name="M:MassTransit.ISupervisor.Add(MassTransit.IAgent)">
            <summary>
            Add an Agent to the Supervisor
            </summary>
            <param name="agent">The agent</param>
        </member>
        <member name="T:MassTransit.ISupervisor`1">
            <summary>
            A supervisor that is also a <see cref="T:MassTransit.IPipeContextSource`1"/>
            </summary>
            <typeparam name="TContext">The source context type</typeparam>
        </member>
        <member name="T:MassTransit.Middleware.Agent">
            <summary>
            An Agent Provocateur that simply exists, out of context
            </summary>
        </member>
        <member name="M:MassTransit.Middleware.Agent.#ctor">
            <summary>
            Creates the Agent
            </summary>
        </member>
        <member name="P:MassTransit.Middleware.Agent.IsStopping">
            <summary>
            True if the agent is in the process of stopping or is stopped
            </summary>
        </member>
        <member name="P:MassTransit.Middleware.Agent.IsStopped">
            <summary>
            True if the agent is stopped
            </summary>
        </member>
        <member name="P:MassTransit.Middleware.Agent.Ready">
            <inheritdoc />
        </member>
        <member name="P:MassTransit.Middleware.Agent.Completed">
            <inheritdoc />
        </member>
        <member name="P:MassTransit.Middleware.Agent.Stopping">
            <inheritdoc />
        </member>
        <member name="P:MassTransit.Middleware.Agent.Stopped">
            <inheritdoc />
        </member>
        <member name="M:MassTransit.Middleware.Agent.Stop(MassTransit.StopContext)">
            <inheritdoc />
        </member>
        <member name="M:MassTransit.Middleware.Agent.StopAgent(MassTransit.StopContext)">
            <summary>
            Stops the agent
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Middleware.Agent.SetReady">
            <summary>
            Puts the agent in a ready state, explicitly
            </summary>
        </member>
        <member name="M:MassTransit.Middleware.Agent.SetNotReady(System.Exception)">
            <summary>
            Puts the agent in a faulted state where it will never be ready
            </summary>
            <param name="exception"></param>
        </member>
        <member name="M:MassTransit.Middleware.Agent.SetReady(System.Threading.Tasks.Task)">
            <summary>
            Set the agent ready for duty
            </summary>
            <param name="readyTask"></param>
        </member>
        <member name="M:MassTransit.Middleware.Agent.SetCompleted(System.Threading.Tasks.Task)">
            <summary>
            Set the agent Completed for duty
            </summary>
            <param name="completedTask"></param>
        </member>
        <member name="M:MassTransit.Middleware.Agent.SetFaulted(System.Threading.Tasks.Task)">
            <summary>
            Set the agent faulted, making it dead.
            </summary>
            <param name="task"></param>
        </member>
        <member name="T:MassTransit.Middleware.BasePipeContext">
            <summary>
            The base for a pipe context, with the underlying support for managing payloads (out-of-band data
            that is carried along with the context).
            </summary>
        </member>
        <member name="M:MassTransit.Middleware.BasePipeContext.#ctor">
            <summary>
            A pipe with no cancellation support
            </summary>
        </member>
        <member name="M:MassTransit.Middleware.BasePipeContext.#ctor(System.Object[])">
            <summary>
            A pipe with no cancellation support
            </summary>
            <param name="payloads">Loads the payload cache with the specified objects</param>
        </member>
        <member name="M:MassTransit.Middleware.BasePipeContext.#ctor(System.Threading.CancellationToken)">
            <summary>
            A pipe using the specified <paramref name="cancellationToken" />
            </summary>
            <param name="cancellationToken">A cancellation token</param>
        </member>
        <member name="M:MassTransit.Middleware.BasePipeContext.#ctor(System.Threading.CancellationToken,System.Object[])">
            <summary>
            A pipe using the specified <paramref name="cancellationToken" />
            </summary>
            <param name="cancellationToken">A cancellation token</param>
            <param name="payloads">Loads the payload cache with the specified objects</param>
        </member>
        <member name="M:MassTransit.Middleware.BasePipeContext.#ctor(MassTransit.Payloads.IPayloadCache)">
            <summary>
            A pipe with no cancellation support, using the specified <paramref name="payloadCache" />
            </summary>
            <param name="payloadCache"></param>
        </member>
        <member name="M:MassTransit.Middleware.BasePipeContext.#ctor(MassTransit.Payloads.IPayloadCache,System.Threading.CancellationToken)">
            <summary>
            A pipe using the specified <paramref name="cancellationToken" /> and <paramref name="payloadCache" />
            </summary>
            <param name="payloadCache">A payload cache</param>
            <param name="cancellationToken">A cancellation token</param>
        </member>
        <member name="P:MassTransit.Middleware.BasePipeContext.CancellationToken">
            <summary>
            Returns the CancellationToken for the context (implicit interface)
            </summary>
        </member>
        <member name="M:MassTransit.Middleware.BasePipeContext.HasPayloadType(System.Type)">
            <summary>
            Returns true if the payload type is included with or supported by the context type
            </summary>
            <param name="payloadType"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Middleware.BasePipeContext.TryGetPayload``1(``0@)">
            <summary>
            Attempts to get the specified payload type
            </summary>
            <param name="payload"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Middleware.BasePipeContext.GetOrAddPayload``1(MassTransit.PayloadFactory{``0})">
            <summary>
            Get or add a payload to the context, using the provided payload factory.
            </summary>
            <param name="payloadFactory">The payload factory, which is only invoked if the payload is not present.</param>
            <typeparam name="T">The payload type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Middleware.BasePipeContext.AddOrUpdatePayload``1(MassTransit.PayloadFactory{``0},MassTransit.UpdatePayloadFactory{``0})">
            <summary>
            Either adds a new payload, or updates an existing payload
            </summary>
            <param name="addFactory">The payload factory called if the payload is not present</param>
            <param name="updateFactory">The payload factory called if the payload already exists</param>
            <typeparam name="T">The payload type</typeparam>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Middleware.LastPipe`1">
            <summary>
            The last pipe in a pipeline is always an end pipe that does nothing and returns synchronously
            </summary>
            <typeparam name="TContext"></typeparam>
        </member>
        <member name="T:MassTransit.Middleware.MessagePublishPipe`1">
            <summary>
            Converts an inbound context type to a pipe context type post-dispatch
            </summary>
            <typeparam name="TMessage">The subsequent pipe context type</typeparam>
        </member>
        <member name="T:MassTransit.Middleware.MessageSendPipe`1">
            <summary>
            Converts an inbound context type to a pipe context type post-dispatch
            </summary>
            <typeparam name="TOutput">The subsequent pipe context type</typeparam>
        </member>
        <member name="T:MassTransit.Middleware.ProxyPipeContext">
            <summary>
            The base for any pipe context proxy, optimized to avoid member access
            </summary>
        </member>
        <member name="M:MassTransit.Middleware.ProxyPipeContext.#ctor(MassTransit.PipeContext)">
            <summary>
            The parent pipe context for this proxy
            </summary>
        </member>
        <member name="P:MassTransit.Middleware.ProxyPipeContext.CancellationToken">
            <summary>
            Returns the CancellationToken for the context (implicit interface)
            </summary>
        </member>
        <member name="M:MassTransit.Middleware.ProxyPipeContext.HasPayloadType(System.Type)">
            <summary>
            Returns true if the payload type is included with or supported by the context type
            </summary>
            <param name="payloadType"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Middleware.ProxyPipeContext.TryGetPayload``1(``0@)">
            <summary>
            Attempts to get the specified payload type
            </summary>
            <param name="payload"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Middleware.ProxyPipeContext.GetOrAddPayload``1(MassTransit.PayloadFactory{``0})">
            <summary>
            Get or add a payload to the context, using the provided payload factory.
            </summary>
            <param name="payloadFactory">The payload factory, which is only invoked if the payload is not present.</param>
            <typeparam name="T">The payload type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Middleware.ProxyPipeContext.AddOrUpdatePayload``1(MassTransit.PayloadFactory{``0},MassTransit.UpdatePayloadFactory{``0})">
            <summary>
            Either adds a new payload, or updates an existing payload
            </summary>
            <param name="addFactory">The payload factory called if the payload is not present</param>
            <param name="updateFactory">The payload factory called if the payload already exists</param>
            <typeparam name="T">The payload type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Middleware.ScopePipeContext.#ctor(MassTransit.PipeContext)">
            <summary>
            A pipe using the parent scope cancellationToken
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:MassTransit.Middleware.ScopePipeContext.#ctor(MassTransit.PipeContext,System.Object[])">
            <summary>
            A pipe using the parent scope cancellationToken
            </summary>
            <param name="context"></param>
            <param name="payloads">Loads the payload cache with the specified objects</param>
        </member>
        <member name="T:MassTransit.Middleware.Supervisor">
            <summary>
            Supervises a set of agents, allowing for graceful Start, Stop, and Ready state management
            </summary>
        </member>
        <member name="M:MassTransit.Middleware.Supervisor.#ctor">
            <summary>
            Creates a Supervisor
            </summary>
        </member>
        <member name="M:MassTransit.Middleware.Supervisor.Add(MassTransit.IAgent)">
            <inheritdoc />
        </member>
        <member name="P:MassTransit.Middleware.Supervisor.PeakActiveCount">
            <inheritdoc />
        </member>
        <member name="P:MassTransit.Middleware.Supervisor.TotalCount">
            <inheritdoc />
        </member>
        <member name="M:MassTransit.Middleware.Supervisor.SetReady">
            <inheritdoc />
        </member>
        <member name="M:MassTransit.Middleware.Supervisor.StopAgent(MassTransit.StopContext)">
            <inheritdoc />
        </member>
        <member name="T:MassTransit.Payloads.IPayloadCache">
            <summary>
            The context properties
            </summary>
        </member>
        <member name="M:MassTransit.Payloads.IPayloadCache.HasPayloadType(System.Type)">
            <summary>
            Checks if the property exists in the cache
            </summary>
            <param name="payloadType">The property type</param>
            <returns>True if the property exists in the cache, otherwise false</returns>
        </member>
        <member name="M:MassTransit.Payloads.IPayloadCache.TryGetPayload``1(``0@)">
            <summary>
            Returns the value of the property if it exists in the cache
            </summary>
            <typeparam name="TPayload">The property type</typeparam>
            <param name="payload">The property value</param>
            <returns>True if the value was returned, otherwise false</returns>
        </member>
        <member name="M:MassTransit.Payloads.IPayloadCache.GetOrAddPayload``1(MassTransit.PayloadFactory{``0})">
            <summary>
            Return an existing or create a new property
            </summary>
            <param name="payloadFactory"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Payloads.IPayloadCache.AddOrUpdatePayload``1(MassTransit.PayloadFactory{``0},MassTransit.UpdatePayloadFactory{``0})">
            <summary>
            Either adds a new payload, or updates an existing payload
            </summary>
            <param name="addFactory">The payload factory called if the payload is not present</param>
            <param name="updateFactory">The payload factory called if the payload already exists</param>
            <typeparam name="T">The payload type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Pipe.New``1(System.Action{MassTransit.IPipeConfigurator{``0}})">
            <summary>
            Create a new pipe using the pipe configurator to add filters, etc.
            </summary>
            <typeparam name="T">The pipe context type</typeparam>
            <param name="callback">The configuration callback</param>
            <returns>An initialized pipe ready for use</returns>
        </member>
        <member name="M:MassTransit.Pipe.New``1(System.Action{MassTransit.IPipeConfigurator{``0}},System.Boolean)">
            <summary>
            Create a new pipe using the pipe configurator to add filters, etc.
            </summary>
            <typeparam name="T">The pipe context type</typeparam>
            <param name="callback">The configuration callback</param>
            <param name="validate">True if the pipe should be validated</param>
            <returns>An initialized pipe ready for use</returns>
        </member>
        <member name="M:MassTransit.Pipe.Execute``1(System.Action{``0})">
            <summary>
            Constructs a simple pipe that executes the specified action
            </summary>
            <typeparam name="T">The pipe context type</typeparam>
            <param name="action">The method to execute</param>
            <returns>The constructed pipe</returns>
        </member>
        <member name="M:MassTransit.Pipe.AddCallback``1(MassTransit.IPipe{``0},System.Action{``0})">
            <summary>
            Constructs a simple pipe that executes the specified action
            </summary>
            <typeparam name="T">The pipe context type</typeparam>
            <param name="pipe"></param>
            <param name="action">The method to execute</param>
            <returns>The constructed pipe</returns>
        </member>
        <member name="M:MassTransit.Pipe.ExecuteAsync``1(System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            Constructs a simple pipe that executes the specified action
            </summary>
            <typeparam name="T">The pipe context type</typeparam>
            <param name="action">The method to execute</param>
            <returns>The constructed pipe</returns>
        </member>
        <member name="M:MassTransit.Pipe.Empty``1">
            <summary>
            Returns an empty pipe of the specified context type
            </summary>
            <typeparam name="T">The context type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Pipe.ToPipe``1(MassTransit.IFilter{``0})">
            <summary>
            Returns a pipe for the filter
            </summary>
            <param name="filter"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:MassTransit.PipeExtensions.IsNotEmpty``1(MassTransit.IPipe{``0})">
            <summary>
            Returns true if the pipe is not empty
            </summary>
            <param name="pipe"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.PipeExtensions.IsEmpty``1(MassTransit.IPipe{``0})">
            <summary>
            Returns true if the pipe is empty
            </summary>
            <param name="pipe"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.PipeExtensions.GetPayload``1(MassTransit.PipeContext)">
            <summary>
            Get a payload from the pipe context
            </summary>
            <typeparam name="TPayload">The payload type</typeparam>
            <param name="context">The pipe context</param>
            <returns>The payload, or throws a PayloadNotFoundException if the payload is not present</returns>
        </member>
        <member name="M:MassTransit.PipeExtensions.GetPayload``1(MassTransit.PipeContext,``0)">
            <summary>
            Get a payload from the pipe context
            </summary>
            <typeparam name="TPayload">The payload type</typeparam>
            <param name="context">The pipe context</param>
            <param name="defaultPayload"></param>
            <returns>The payload, or the default Value</returns>
        </member>
        <member name="M:MassTransit.PipeExtensions.OneTimeSetup``1(MassTransit.PipeContext,System.Func{``0,System.Threading.Tasks.Task},MassTransit.PayloadFactory{``0})">
            <summary>
            Using a filter-supplied context type, block so that the one time code is only executed once regardless of how many
            threads are pushing through the pipe at the same time.
            </summary>
            <typeparam name="T">The payload type, should be an interface</typeparam>
            <param name="context">The pipe context</param>
            <param name="setupMethod">The setup method, called once regardless of the thread count</param>
            <param name="payloadFactory">The factory method for the payload context, optional if an interface is specified</param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.RetryContext">
            <summary>
            The base context of a retry
            </summary>
        </member>
        <member name="P:MassTransit.RetryContext.CancellationToken">
            <summary>
            Canceled when the retry should be canceled (not the same as if the underlying context
            is canceled, which is different). This can be used to cancel retry, but not the operation
            itself.
            </summary>
        </member>
        <member name="P:MassTransit.RetryContext.Exception">
            <summary>
            The exception that originally caused the retry to be initiated
            </summary>
        </member>
        <member name="P:MassTransit.RetryContext.RetryAttempt">
            <summary>
            The retry attempt currently being attempted (should be 1 > than RetryCount)
            </summary>
        </member>
        <member name="P:MassTransit.RetryContext.RetryCount">
            <summary>
            The number of retries which were attempted beyond the initial attempt
            </summary>
        </member>
        <member name="P:MassTransit.RetryContext.Delay">
            <summary>
            The time to wait before the next retry attempt
            </summary>
        </member>
        <member name="P:MassTransit.RetryContext.ContextType">
            <summary>
            The context type of the retry context
            </summary>
        </member>
        <member name="M:MassTransit.RetryContext.RetryFaulted(System.Exception)">
            <summary>
            Called after the retry attempt has failed
            </summary>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.RetryContext.PreRetry">
            <summary>
            Called before the retry attempt is performed
            </summary>
            <returns></returns>
        </member>
        <member name="T:MassTransit.RetryContext`1">
            <summary>
            The retry context, with the specified context type
            </summary>
            <typeparam name="TContext">The context type</typeparam>
        </member>
        <member name="P:MassTransit.RetryContext`1.Context">
            <summary>
            The context being managed by the retry policy
            </summary>
        </member>
        <member name="M:MassTransit.RetryContext`1.CanRetry(System.Exception,MassTransit.RetryContext{`0}@)">
            <summary>
            Determines if the exception can be retried
            </summary>
            <param name="exception">The exception that occurred</param>
            <param name="retryContext">The retry context for the retry</param>
            <returns>True if the task should be retried</returns>
        </member>
        <member name="M:MassTransit.RetryContextExtensions.GetRetryAttempt(MassTransit.ConsumeContext)">
            <summary>
            If within a retry attempt, the return value is greater than zero and indicates the number of the retry attempt
            in progress.
            </summary>
            <param name="context"></param>
            <returns>The retry attempt number, 0 = first time, >= 1 = retry</returns>
        </member>
        <member name="M:MassTransit.RetryContextExtensions.GetRetryCount(MassTransit.ConsumeContext)">
            <summary>
            If within a retry attempt, the return value indicates the number of retry attempts that have already occurred.
            </summary>
            <param name="context"></param>
            <returns>The number of retries that have already been attempted, 0 = first time or first retry, >= 1 = subsequent retry</returns>
        </member>
        <member name="M:MassTransit.RetryContextExtensions.GetRedeliveryCount(MassTransit.ConsumeContext)">
            <summary>
            If the message is being redelivered, returns the redelivery attempt
            </summary>
            <param name="context"></param>
            <returns>The retry attempt number, 0 = first time, >= 1 = retry</returns>
        </member>
        <member name="T:MassTransit.RetryPolicyContext`1">
            <summary>
            An initial context acquired to begin a retry filter
            </summary>
            <typeparam name="TContext"></typeparam>
        </member>
        <member name="P:MassTransit.RetryPolicyContext`1.Context">
            <summary>
            The context being managed by the retry policy
            </summary>
        </member>
        <member name="M:MassTransit.RetryPolicyContext`1.CanRetry(System.Exception,MassTransit.RetryContext{`0}@)">
            <summary>
            Determines if the exception can be retried
            </summary>
            <param name="exception">The exception that occurred</param>
            <param name="retryContext">The retry context for the retry</param>
            <returns>True if the task should be retried</returns>
        </member>
        <member name="M:MassTransit.RetryPolicyContext`1.RetryFaulted(System.Exception)">
            <summary>
            Called after the retry attempt has failed
            </summary>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.RetryPolicyContext`1.Cancel">
            <summary>
            Cancel any pending or subsequent retries
            </summary>
        </member>
        <member name="T:MassTransit.NewId">
            <summary>
            A NewId is a type that fits into the same space as a Guid/Uuid/unique identifier,
            but is guaranteed to be both unique and ordered, assuming it is generated using
            a single instance of the generator for each network address used.
            </summary>
        </member>
        <member name="M:MassTransit.NewId.#ctor(System.Byte[]@)">
            <summary>
            Creates a NewId using the specified byte array.
            </summary>
            <param name="bytes"></param>
        </member>
        <member name="M:MassTransit.NewId.Next">
            <summary>
            Generate a NewId
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.NewId.Next(System.Int32)">
            <summary>
            Generate an array of NewIds
            </summary>
            <param name="count">The number of NewIds to generate</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.NewId.Next(MassTransit.NewId[],System.Int32,System.Int32)">
            <summary>
            Generate an array of NewIds
            </summary>
            <param name="index">The starting offset for the newly generated ids</param>
            <param name="count">The number of NewIds to generate</param>
            <param name="ids">An existing array</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.NewId.NextGuid(System.Int32)">
            <summary>
            Generate an array of NewIds
            </summary>
            <param name="count">The number of NewIds to generate</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.NewId.NextGuid(System.Guid[],System.Int32,System.Int32)">
            <summary>
            Generate an array of NewIds
            </summary>
            <param name="index">The starting offset for the newly generated ids</param>
            <param name="count">The number of NewIds to generate</param>
            <param name="ids">An existing array</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.NewId.NextGuid">
            <summary>
            Generate a NewId, and return it as a Guid
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.NewId.NextSequentialGuid">
            <summary>
            Generate a NewId, and return it as a Guid in sequential format
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IActivityObserver.PreExecute``2(MassTransit.ExecuteActivityContext{``0,``1})">
            <summary>
            Called before a message is dispatched to any consumers
            </summary>
            <param name="context">The consume context</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IActivityObserver.PostExecute``2(MassTransit.ExecuteActivityContext{``0,``1})">
            <summary>
            Called after the message has been dispatched to all consumers - note that in the case of an exception
            this method is not called, and the DispatchFaulted method is called instead
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IActivityObserver.ExecuteFault``2(MassTransit.ExecuteActivityContext{``0,``1},System.Exception)">
            <summary>
            Called after the message has been dispatched to all consumers when one or more exceptions have occurred
            </summary>
            <param name="context"></param>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IActivityObserver.PreCompensate``2(MassTransit.CompensateActivityContext{``0,``1})">
            <summary>
            Called before a message is dispatched to any consumers
            </summary>
            <param name="context">The consume context</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IActivityObserver.PostCompensate``2(MassTransit.CompensateActivityContext{``0,``1})">
            <summary>
            Called after the message has been dispatched to all consumers - note that in the case of an exception
            this method is not called, and the DispatchFaulted method is called instead
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IActivityObserver.CompensateFail``2(MassTransit.CompensateActivityContext{``0,``1},System.Exception)">
            <summary>
            Called after the message has been dispatched to all consumers when one or more exceptions have occurred
            </summary>
            <param name="context"></param>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.IBusObserver">
            <summary>
            Used to observe events produced by the bus
            </summary>
        </member>
        <member name="M:MassTransit.IBusObserver.PostCreate(MassTransit.IBus)">
            <summary>
            Called after the bus has been created.
            </summary>
            <param name="bus"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IBusObserver.CreateFaulted(System.Exception)">
            <summary>
            Called when the bus fails to be created
            </summary>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IBusObserver.PreStart(MassTransit.IBus)">
            <summary>
            Called when the bus is being started, before the actual Start commences.
            </summary>
            <param name="bus"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IBusObserver.PostStart(MassTransit.IBus,System.Threading.Tasks.Task{MassTransit.BusReady})">
            <summary>
            Called once the bus has started and is running
            </summary>
            <param name="bus"></param>
            <param name="busReady">
            A task which is completed once the bus is ready and all receive endpoints are ready.
            </param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IBusObserver.StartFaulted(MassTransit.IBus,System.Exception)">
            <summary>
            Called when the bus fails to start
            </summary>
            <param name="bus"></param>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IBusObserver.PreStop(MassTransit.IBus)">
            <summary>
            Called when the bus is being stopped, before the actual Stop commences.
            </summary>
            <param name="bus"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IBusObserver.PostStop(MassTransit.IBus)">
            <summary>
            Called when the bus has been stopped.
            </summary>
            <param name="bus"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IBusObserver.StopFaulted(MassTransit.IBus,System.Exception)">
            <summary>
            Called when the bus failed to Stop.
            </summary>
            <param name="bus"></param>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IBusObserverConnector.ConnectBusObserver(MassTransit.IBusObserver)">
            <summary>
            Connects a bus observer to the bus to observe lifecycle events on the bus
            </summary>
            <param name="observer"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.IConsumeMessageObserver`1">
            <summary>
            Intercepts the ConsumeContext
            </summary>
            <typeparam name="T">The message type</typeparam>
        </member>
        <member name="M:MassTransit.IConsumeMessageObserver`1.PreConsume(MassTransit.ConsumeContext{`0})">
            <summary>
            Called before a message is dispatched to any consumers
            </summary>
            <param name="context">The consume context</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IConsumeMessageObserver`1.PostConsume(MassTransit.ConsumeContext{`0})">
            <summary>
            Called after the message has been dispatched to all consumers - note that in the case of an exception
            this method is not called, and the DispatchFaulted method is called instead
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IConsumeMessageObserver`1.ConsumeFault(MassTransit.ConsumeContext{`0},System.Exception)">
            <summary>
            Called after the message has been dispatched to all consumers when one or more exceptions have occurred
            </summary>
            <param name="context"></param>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.IConsumeMessageObserverConnector">
            <summary>
            Supports connection of a message observer to the pipeline
            </summary>
        </member>
        <member name="T:MassTransit.IConsumeObserver">
            <summary>
            Intercepts the ConsumeContext
            </summary>
        </member>
        <member name="M:MassTransit.IConsumeObserver.PreConsume``1(MassTransit.ConsumeContext{``0})">
            <summary>
            Called before a message is dispatched to any consumers
            </summary>
            <param name="context">The consume context</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IConsumeObserver.PostConsume``1(MassTransit.ConsumeContext{``0})">
            <summary>
            Called after the message has been dispatched to all consumers - note that in the case of an exception
            this method is not called, and the DispatchFaulted method is called instead
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IConsumeObserver.ConsumeFault``1(MassTransit.ConsumeContext{``0},System.Exception)">
            <summary>
            Called after the message has been dispatched to all consumers when one or more exceptions have occurred
            </summary>
            <param name="context"></param>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.IConsumeObserverConnector">
            <summary>
            Supports connection of a consume observer
            </summary>
        </member>
        <member name="M:MassTransit.IFilterObserver.PreSend``1(``0)">
            <summary>
            Called before a message is dispatched to any consumers
            </summary>
            <param name="context">The consume context</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IFilterObserver.PostSend``1(``0)">
            <summary>
            Called after the message has been dispatched to all consumers - note that in the case of an exception
            this method is not called, and the DispatchFaulted method is called instead
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IFilterObserver.SendFault``1(``0,System.Exception)">
            <summary>
            Called after the message has been dispatched to all consumers when one or more exceptions have occurred
            </summary>
            <param name="context"></param>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IFilterObserver`1.PreSend(`0)">
            <summary>
            Called before a message is dispatched to any consumers
            </summary>
            <param name="context">The consume context</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IFilterObserver`1.PostSend(`0)">
            <summary>
            Called after the message has been dispatched to all consumers - note that in the case of an exception
            this method is not called, and the DispatchFaulted method is called instead
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IFilterObserver`1.SendFault(`0,System.Exception)">
            <summary>
            Called after the message has been dispatched to all consumers when one or more exceptions have occurred
            </summary>
            <param name="context"></param>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IFilterObserverConnector.ConnectObserver``1(MassTransit.IFilterObserver{``0})">
            <summary>
            Connect an observer to the filter and/or pipe
            </summary>
            <param name="observer"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IFilterObserverConnector.ConnectObserver(MassTransit.IFilterObserver)">
            <summary>
            Connect an observer to the filter and/or pipe
            </summary>
            <param name="observer"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IFilterObserverConnector`1.ConnectObserver(MassTransit.IFilterObserver{`0})">
            <summary>
            Connect an observer to the filter and/or pipe
            </summary>
            <param name="observer"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.IPublishObserver">
            <summary>
            Observes messages as they are published via a publish endpoint. These should not be used to intercept or
            filter messages, in that case a filter should be created and registered on the transport.
            </summary>
        </member>
        <member name="M:MassTransit.IPublishObserver.PrePublish``1(MassTransit.PublishContext{``0})">
            <summary>
            Called before the message is sent to the transport
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The message send context</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IPublishObserver.PostPublish``1(MassTransit.PublishContext{``0})">
            <summary>
            Called after the message is sent to the transport (and confirmed by the transport if supported)
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The message send context</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IPublishObserver.PublishFault``1(MassTransit.PublishContext{``0},System.Exception)">
            <summary>
            Called when the message fails to send to the transport, including the exception that was thrown
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The message send context</param>
            <param name="exception">The exception from the transport</param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.IPublishObserverConnector">
            <summary>
            Connect an observer that is notified when a message is sent to an endpoint
            </summary>
        </member>
        <member name="T:MassTransit.IReceiveEndpointObserver">
            <summary>
            Used to observe the events signaled by a receive endpoint
            </summary>
        </member>
        <member name="M:MassTransit.IReceiveEndpointObserver.Ready(MassTransit.ReceiveEndpointReady)">
            <summary>
            Called when the receive endpoint is ready to receive messages
            </summary>
            <param name="ready"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IReceiveEndpointObserver.Stopping(MassTransit.ReceiveEndpointStopping)">
            <summary>
            Called when the receive endpoint is being stopped, prior to actually stopping
            </summary>
            <param name="stopping"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IReceiveEndpointObserver.Completed(MassTransit.ReceiveEndpointCompleted)">
            <summary>
            Called when the receive endpoint has completed
            </summary>
            <param name="completed"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IReceiveEndpointObserver.Faulted(MassTransit.ReceiveEndpointFaulted)">
            <summary>
            Called when the receive endpoint faults
            </summary>
            <param name="faulted"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.IReceiveObserver">
            <summary>
            An observer that can monitor a receive endpoint to track message consumption at the
            endpoint level.
            </summary>
        </member>
        <member name="M:MassTransit.IReceiveObserver.PreReceive(MassTransit.ReceiveContext)">
            <summary>
            Called when a message has been delivered by the transport is about to be received by the endpoint
            </summary>
            <param name="context">The receive context of the message</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IReceiveObserver.PostReceive(MassTransit.ReceiveContext)">
            <summary>
            Called when the message has been received and acknowledged on the transport
            </summary>
            <param name="context">The receive context of the message</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IReceiveObserver.PostConsume``1(MassTransit.ConsumeContext{``0},System.TimeSpan,System.String)">
            <summary>
            Called when a message has been consumed by a consumer
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The message consume context</param>
            <param name="duration">The consumer duration</param>
            <param name="consumerType">The consumer type</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IReceiveObserver.ConsumeFault``1(MassTransit.ConsumeContext{``0},System.TimeSpan,System.String,System.Exception)">
            <summary>
            Called when a message being consumed produced a fault
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The message consume context</param>
            <param name="duration">The consumer duration</param>
            <param name="consumerType">The consumer type</param>
            <param name="exception">The exception from the consumer</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IReceiveObserver.ReceiveFault(MassTransit.ReceiveContext,System.Exception)">
            <summary>
            Called when the transport receive faults
            </summary>
            <param name="context">The receive context of the message</param>
            <param name="exception">The exception that was thrown</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IReceiveObserverConnector.ConnectReceiveObserver(MassTransit.IReceiveObserver)">
            <summary>
            Connect an observer to the receiving endpoint
            </summary>
            <param name="observer"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.IReceiveTransportObserver">
            <summary>
            Used to observe the events signaled by a receive endpoint
            </summary>
        </member>
        <member name="M:MassTransit.IReceiveTransportObserver.Ready(MassTransit.ReceiveTransportReady)">
            <summary>
            Called when the receive endpoint is ready to receive messages
            </summary>
            <param name="ready"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IReceiveTransportObserver.Completed(MassTransit.ReceiveTransportCompleted)">
            <summary>
            Called when the receive endpoint has completed
            </summary>
            <param name="completed"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IReceiveTransportObserver.Faulted(MassTransit.ReceiveTransportFaulted)">
            <summary>
            Called when the receive endpoint faults
            </summary>
            <param name="faulted"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IRetryObserver.PostCreate``1(MassTransit.RetryPolicyContext{``0})">
            <summary>
            Called before a message is dispatched to any consumers
            </summary>
            <param name="context">The consume context</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IRetryObserver.PostFault``1(MassTransit.RetryContext{``0})">
            <summary>
            Called after a fault has occurred, but will be retried
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IRetryObserver.PreRetry``1(MassTransit.RetryContext{``0})">
            <summary>
            Called immediately before an exception will be retried
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IRetryObserver.RetryFault``1(MassTransit.RetryContext{``0})">
            <summary>
            Called when the retry filter is no longer going to retry, and the context is faulted.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IRetryObserver.RetryComplete``1(MassTransit.RetryContext{``0})">
            <summary>
            Called when the retry filter retried at least once, and the context completed successfully.
            </summary>
            <param name="context"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IRetryObserverConnector.ConnectRetryObserver(MassTransit.IRetryObserver)">
            <summary>
            Connect an observer to the filter and/or pipe
            </summary>
            <param name="observer"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.ISendObserver">
            <summary>
            Observes messages as they are sent to transports. These should not be used to intercept or
            filter messages, in that case a filter should be created and registered on the transport.
            </summary>
        </member>
        <member name="M:MassTransit.ISendObserver.PreSend``1(MassTransit.SendContext{``0})">
            <summary>
            Called before the message is sent to the transport
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The message send context</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ISendObserver.PostSend``1(MassTransit.SendContext{``0})">
            <summary>
            Called after the message is sent to the transport (and confirmed by the transport if supported)
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The message send context</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ISendObserver.SendFault``1(MassTransit.SendContext{``0},System.Exception)">
            <summary>
            Called when the message fails to send to the transport, including the exception that was thrown
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The message send context</param>
            <param name="exception">The exception from the transport</param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.ISendObserverConnector">
            <summary>
            Connect an observer that is notified when a message is sent to an endpoint
            </summary>
        </member>
        <member name="T:MassTransit.Observables.ConsumeObserverConverter`1">
            <summary>
            Converts the object message type to the generic type T and publishes it on the endpoint specified.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MassTransit.Observables.ConsumeObserverConverterCache">
            <summary>
            Caches the converters that allow a raw object to be published using the object's type through
            the generic Send method.
            </summary>
        </member>
        <member name="T:MassTransit.Observables.IConsumeObserverConverter">
            <summary>
            Calls the generic version of the IPublishEndpoint.Send method with the object's type
            </summary>
        </member>
        <member name="M:MassTransit.PublishEndpointExtensions.Publish(MassTransit.IPublishEndpoint,System.Type,System.Object,System.Threading.CancellationToken)">
            <summary>
            Publish a dynamically typed message initialized by a loosely typed dictionary of values. MassTransit will
            create and populate an object instance with the properties of the <paramref name="values" /> argument.
            </summary>
            <param name="messageType">The message type to publish</param>
            <param name="values">
            The dictionary of values to become hydrated and published under the type of the interface.
            </param>
            <param name="cancellationToken"></param>
            <param name="publishEndpoint"></param>
        </member>
        <member name="M:MassTransit.PublishEndpointExtensions.Publish(MassTransit.IPublishEndpoint,System.Type,System.Object,MassTransit.IPipe{MassTransit.PublishContext},System.Threading.CancellationToken)">
            <summary>
            Publish a dynamically typed message initialized by a loosely typed dictionary of values. MassTransit will
            create and populate an object instance with the properties of the <paramref name="values" /> argument.
            </summary>
            <param name="messageType">The message type to publish</param>
            <param name="values">
            The dictionary of values to become hydrated and published under the type of the interface.
            </param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <param name="publishEndpoint"></param>
        </member>
        <member name="T:MassTransit.ReceiveEndpointHandle">
            <summary>
            A handle to an active endpoint
            </summary>
        </member>
        <member name="P:MassTransit.ReceiveEndpointHandle.Ready">
            <summary>
            A task which can be awaited to know when the receive endpoint is ready
            </summary>
        </member>
        <member name="M:MassTransit.ReceiveEndpointHandle.Stop(System.Threading.CancellationToken)">
            <summary>
            Stop the endpoint, releasing any resources associated with the endpoint
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.AsyncEventExceptionMessageFactory`3">
            <summary>
            Returns a message from an event exception
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TException"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.AsyncEventExceptionMessageFactory`4">
            <summary>
            Returns a message from an event exception
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="TException"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.BehaviorContext`1">
            <summary>
            A behavior context is an event context delivered to a behavior, including the state instance
            </summary>
            <typeparam name="TSaga">The state instance type</typeparam>
        </member>
        <member name="M:MassTransit.BehaviorContext`1.Raise(MassTransit.Event)">
            <summary>
            Raise an event on the current instance, pushing the current event on the stack
            </summary>
            <param name="event">The event to raise</param>
            <returns>An awaitable Task</returns>
        </member>
        <member name="M:MassTransit.BehaviorContext`1.Raise``1(MassTransit.Event{``0},``0)">
            <summary>
            Raise an event on the current instance, pushing the current event on the stack
            </summary>
            <param name="event">The event to raise</param>
            <param name="data">THe event data</param>
            <returns>An awaitable Task</returns>
        </member>
        <member name="M:MassTransit.BehaviorContext`1.CreateProxy(MassTransit.Event)">
            <summary>
            Return a proxy of the current behavior context with the specified event
            </summary>
            <param name="event">The event for the new context</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.BehaviorContext`1.CreateProxy``1(MassTransit.Event{``0},``0)">
            <summary>
            Return a proxy of the current behavior context with the specified event and data
            </summary>
            <typeparam name="T">The data type</typeparam>
            <param name="event">The event for the new context</param>
            <param name="data">The data for the event</param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.BehaviorContext`2">
            <summary>
            A behavior context include an event context, along with the behavior for a state instance.
            </summary>
            <typeparam name="TSaga">The instance type</typeparam>
            <typeparam name="TMessage">The event type</typeparam>
        </member>
        <member name="T:MassTransit.BehaviorExceptionContext`2">
            <summary>
            An exceptional behavior context
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TException"></typeparam>
        </member>
        <member name="M:MassTransit.BehaviorExceptionContext`2.CreateProxy``1(MassTransit.Event{``0},``0)">
            <summary>
            Return a proxy of the current behavior context with the specified event and data
            </summary>
            <typeparam name="T">The data type</typeparam>
            <param name="event">The event for the new context</param>
            <param name="data">The data for the event</param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.BehaviorExceptionContext`3">
            <summary>
            An exceptional behavior context
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="TException"></typeparam>
        </member>
        <member name="M:MassTransit.BehaviorExceptionContext`3.CreateProxy``1(MassTransit.Event{``0},``0)">
            <summary>
            Return a proxy of the current behavior context with the specified event and data
            </summary>
            <typeparam name="T">The data type</typeparam>
            <param name="event">The event for the new context</param>
            <param name="data">The data for the event</param>
            <returns></returns>
        </member>
        <member name="F:MassTransit.CompositeEventOptions.IncludeInitial">
            <summary>
            Include the composite event in the initial state
            </summary>
        </member>
        <member name="F:MassTransit.CompositeEventOptions.IncludeFinal">
            <summary>
            Include the composite event in the final state
            </summary>
        </member>
        <member name="F:MassTransit.CompositeEventOptions.RaiseOnce">
            <summary>
            Specifies that the composite event should only be raised once and ignore any subsequent events
            </summary>
        </member>
        <member name="P:MassTransit.IEventCorrelationConfigurator`2.InsertOnInitial">
            <summary>
            If set to true, the state machine suggests that the saga instance be inserted blinding prior to the get/lock
            using a weaker isolation level. This prevents range locks in the database from slowing inserts.
            </summary>
        </member>
        <member name="P:MassTransit.IEventCorrelationConfigurator`2.ReadOnly">
            <summary>
            If set to true, changes to the saga instance will not be saved to the repository. Note that the in-memory saga repository
            does not support read-only since the changes are made directly to the saga instance.
            </summary>
        </member>
        <member name="P:MassTransit.IEventCorrelationConfigurator`2.ConfigureConsumeTopology">
            <summary>
            If set to false, the event type will not be configured as part of the broker topology
            </summary>
        </member>
        <member name="M:MassTransit.IEventCorrelationConfigurator`2.CorrelateById(System.Func{MassTransit.ConsumeContext{`1},System.Guid})">
            <summary>
            Correlate to the saga instance by CorrelationId, using the id from the event data
            </summary>
            <param name="selector">Returns the CorrelationId from the event data</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IEventCorrelationConfigurator`2.CorrelateById``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{MassTransit.ConsumeContext{`1},``0})">
            <summary>
            Correlate to the saga instance by a single value property, matched to the property value of the message
            </summary>
            <param name="propertyExpression">The instance property</param>
            <param name="selector">The identifier selector for the message</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IEventCorrelationConfigurator`2.CorrelateBy``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.Func{MassTransit.ConsumeContext{`1},System.Nullable{``0}})">
            <summary>
            Correlate to the saga instance by a single property, matched to the property value of the message
            </summary>
            <param name="propertyExpression">The instance property</param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IEventCorrelationConfigurator`2.CorrelateBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Func{MassTransit.ConsumeContext{`1},``0})">
            <summary>
            Correlate to the saga instance by a single property, matched to the property value of the message
            </summary>
            <param name="propertyExpression">The instance property</param>
            <param name="selector"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IEventCorrelationConfigurator`2.SelectId(System.Func{MassTransit.ConsumeContext{`1},System.Guid})">
            <summary>
            When creating a new saga instance, initialize the saga CorrelationId with the id from the event data
            </summary>
            <param name="selector">Returns the CorrelationId from the event data</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IEventCorrelationConfigurator`2.CorrelateBy(System.Linq.Expressions.Expression{System.Func{`0,MassTransit.ConsumeContext{`1},System.Boolean}})">
            <summary>
            Specify the correlation expression for the event
            </summary>
            <param name="correlationExpression"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IEventCorrelationConfigurator`2.SetSagaFactory(MassTransit.SagaFactoryMethod{`0,`1})">
            <summary>
            Creates a new instance of the saga, and if appropriate, pre-inserts the saga instance to the database. If the saga already exists, any
            exceptions from the insert are suppressed and processing continues normally.
            </summary>
            <param name="factoryMethod">The factory method for the saga</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IEventCorrelationConfigurator`2.OnMissingInstance(System.Func{MassTransit.IMissingInstanceConfigurator{`0,`1},MassTransit.IPipe{MassTransit.ConsumeContext{`1}}})">
            <summary>
            If an event is consumed that is not matched to an existing saga instance, discard the event without throwing an exception.
            The default behavior is to throw an exception, which moves the event into the error queue for later processing
            </summary>
            <param name="getBehavior">The configuration call to specify the behavior on missing instance</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IMissingInstanceConfigurator`2.Discard">
            <summary>
            Discard the event, silently ignoring the missing instance for the event
            </summary>
        </member>
        <member name="M:MassTransit.IMissingInstanceConfigurator`2.Fault">
            <summary>
            Fault the saga consumer, which moves the message to the error queue
            </summary>
        </member>
        <member name="M:MassTransit.IMissingInstanceConfigurator`2.ExecuteAsync(System.Func{MassTransit.ConsumeContext{`1},System.Threading.Tasks.Task})">
            <summary>
            Execute an asynchronous method when the instance is missed, allowing a custom behavior to be specified.
            </summary>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IMissingInstanceConfigurator`2.Execute(System.Action{MassTransit.ConsumeContext{`1}})">
            <summary>
            Execute a method when the instance is missed, allowing a custom behavior to be specified.
            </summary>
            <param name="callback"></param>
            <returns></returns>
        </member>
        <member name="P:MassTransit.IRequestConfigurator.ServiceAddress">
            <summary>
            Sets the service address of the request handler
            </summary>
        </member>
        <member name="P:MassTransit.IRequestConfigurator.Timeout">
            <summary>
            Sets the request timeout
            </summary>
        </member>
        <member name="P:MassTransit.IRequestConfigurator.TimeToLive">
            <summary>
            Set the time to live of the request message sent by the saga. If not specified, and the timeout
            is > TimeSpan.Zero, the <see cref="P:MassTransit.IRequestConfigurator.Timeout" /> value is used.
            </summary>
        </member>
        <member name="P:MassTransit.IRequestConfigurator`3.Completed">
            <summary>
            Configure the behavior of the Completed event, the same was Events are configured on
            the state machine.
            </summary>
        </member>
        <member name="P:MassTransit.IRequestConfigurator`3.Faulted">
            <summary>
            Configure the behavior of the Faulted event, the same was Events are configured on
            the state machine.
            </summary>
        </member>
        <member name="P:MassTransit.IRequestConfigurator`3.TimeoutExpired">
            <summary>
            Configure the behavior of the Faulted event, the same was Events are configured on
            the state machine.
            </summary>
        </member>
        <member name="P:MassTransit.IRequestConfigurator`4.Completed2">
            <summary>
            Configure the behavior of the Completed event, the same was Events are configured on
            the state machine.
            </summary>
        </member>
        <member name="P:MassTransit.IRequestConfigurator`5.Completed3">
            <summary>
            Configure the behavior of the Completed event, the same was Events are configured on
            the state machine.
            </summary>
        </member>
        <member name="P:MassTransit.IScheduleConfigurator`2.Delay">
            <summary>
            Set a fixed message delay, which is applied to all scheduled messages unless
            overriden by the .Schedule method.
            </summary>
        </member>
        <member name="P:MassTransit.IScheduleConfigurator`2.DelayProvider">
            <summary>
            Set a dynamic message delay provider, which uses the instance to determine the delay
            unless overriden by the .Schedule method.
            </summary>
        </member>
        <member name="P:MassTransit.IScheduleConfigurator`2.Received">
            <summary>
            Configure the behavior of the Received event, the same was Events are configured on
            the state machine.
            </summary>
        </member>
        <member name="T:MassTransit.ScheduleSettings`2">
            <summary>
            The schedule settings, including the default delay for the message
            </summary>
        </member>
        <member name="P:MassTransit.ScheduleSettings`2.DelayProvider">
            <summary>
            Provides the delay for the message
            </summary>
        </member>
        <member name="P:MassTransit.ScheduleSettings`2.Received">
            <summary>
            Configure the received correlation
            </summary>
        </member>
        <member name="T:MassTransit.DestinationAddressProvider`2">
            <summary>
            Returns the address for the message provided
            </summary>
            <typeparam name="TSaga">The saga instance</typeparam>
            <typeparam name="TMessage">The message data</typeparam>
            <returns></returns>
        </member>
        <member name="T:MassTransit.DestinationAddressProvider`1">
            <summary>
            Returns the address for the message provided
            </summary>
            <typeparam name="TSaga">The saga instance</typeparam>
            <returns></returns>
        </member>
        <member name="P:MassTransit.EventCorrelation.DataType">
            <summary>
            The data type for the event
            </summary>
        </member>
        <member name="P:MassTransit.EventCorrelation`2.Policy">
            <summary>
            Returns the saga policy for the event correlation
            </summary>
            <value></value>
        </member>
        <member name="P:MassTransit.EventCorrelation`2.FilterFactory">
            <summary>
            The filter factory creates the filter when requested by the connector
            </summary>
        </member>
        <member name="P:MassTransit.EventCorrelation`2.MessageFilter">
            <summary>
            The message filter which extracts the correlationId from the message
            </summary>
        </member>
        <member name="T:MassTransit.EventExceptionMessageFactory`3">
            <summary>
            Returns a message from an event exception
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TException"></typeparam>
            <typeparam name="TMessage"></typeparam>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.EventExceptionMessageFactory`4">
            <summary>
            Returns a message from an event exception
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="TException"></typeparam>
            <typeparam name="T"></typeparam>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.IBehavior`1">
            <summary>
            A behavior is a chain of activities invoked by a state
            </summary>
            <typeparam name="TInstance">The state type</typeparam>
        </member>
        <member name="M:MassTransit.IBehavior`1.Execute(MassTransit.BehaviorContext{`0})">
            <summary>
            Execute the activity with the given behavior context
            </summary>
            <param name="context">The behavior context</param>
            <returns>An awaitable task</returns>
        </member>
        <member name="M:MassTransit.IBehavior`1.Execute``1(MassTransit.BehaviorContext{`0,``0})">
            <summary>
            Execute the activity with the given behavior context
            </summary>
            <param name="context">The behavior context</param>
            <returns>An awaitable task</returns>
        </member>
        <member name="M:MassTransit.IBehavior`1.Faulted``2(MassTransit.BehaviorExceptionContext{`0,``0,``1})">
            <summary>
            The exception path through the behavior allows activities to catch and handle exceptions
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TException"></typeparam>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IBehavior`1.Faulted``1(MassTransit.BehaviorExceptionContext{`0,``0})">
            <summary>
            The exception path through the behavior allows activities to catch and handle exceptions
            </summary>
            <typeparam name="TException"></typeparam>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.IBehavior`2">
            <summary>
            A behavior is a chain of activities invoked by a state
            </summary>
            <typeparam name="TSaga">The state type</typeparam>
            <typeparam name="TMessage">The data type of the behavior</typeparam>
        </member>
        <member name="M:MassTransit.IBehavior`2.Execute(MassTransit.BehaviorContext{`0,`1})">
            <summary>
            Execute the activity with the given behavior context
            </summary>
            <param name="context">The behavior context</param>
            <returns>An awaitable task</returns>
        </member>
        <member name="M:MassTransit.IBehavior`2.Faulted``1(MassTransit.BehaviorExceptionContext{`0,`1,``0})">
            <summary>
            The exception path through the behavior allows activities to catch and handle exceptions
            </summary>
            <typeparam name="TException"></typeparam>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IEventObserver`1.PreExecute(MassTransit.BehaviorContext{`0})">
            <summary>
            Called before the event context is delivered to the activities
            </summary>
            <param name="context">The event context</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IEventObserver`1.PreExecute``1(MassTransit.BehaviorContext{`0,``0})">
            <summary>
            Called before the event context is delivered to the activities
            </summary>
            <typeparam name="T">The event data type</typeparam>
            <param name="context">The event context</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IEventObserver`1.PostExecute(MassTransit.BehaviorContext{`0})">
            <summary>
            Called when the event has been processed by the activities
            </summary>
            <param name="context">The event context</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IEventObserver`1.PostExecute``1(MassTransit.BehaviorContext{`0,``0})">
            <summary>
            Called when the event has been processed by the activities
            </summary>
            <typeparam name="T">The event data type</typeparam>
            <param name="context">The event context</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IEventObserver`1.ExecuteFault(MassTransit.BehaviorContext{`0},System.Exception)">
            <summary>
            Called when the activity execution faults and is not handled by the activities
            </summary>
            <param name="context">The event context</param>
            <param name="exception">The exception that was thrown</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IEventObserver`1.ExecuteFault``1(MassTransit.BehaviorContext{`0,``0},System.Exception)">
            <summary>
            Called when the activity execution faults and is not handled by the activities
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The event context</param>
            <param name="exception">The exception that was thrown</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IStateAccessor`1.GetStateExpression(MassTransit.State[])">
            <summary>
            Converts a state expression to the instance current state property type.
            </summary>
            <param name="states"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.IStateMachineActivity`1">
            <summary>
            An activity is part of a behavior that is executed in order
            </summary>
            <typeparam name="TSaga"></typeparam>
        </member>
        <member name="M:MassTransit.IStateMachineActivity`1.Execute(MassTransit.BehaviorContext{`0},MassTransit.IBehavior{`0})">
            <summary>
            Execute the activity with the given behavior context
            </summary>
            <param name="context">The behavior context</param>
            <param name="next">The behavior that follows this activity</param>
            <returns>An awaitable task</returns>
        </member>
        <member name="M:MassTransit.IStateMachineActivity`1.Execute``1(MassTransit.BehaviorContext{`0,``0},MassTransit.IBehavior{`0,``0})">
            <summary>
            Execute the activity with the given behavior context
            </summary>
            <param name="context">The behavior context</param>
            <param name="next">The behavior that follows this activity</param>
            <returns>An awaitable task</returns>
        </member>
        <member name="M:MassTransit.IStateMachineActivity`1.Faulted``1(MassTransit.BehaviorExceptionContext{`0,``0},MassTransit.IBehavior{`0})">
            <summary>
            The exception path through the behavior allows activities to catch and handle exceptions
            </summary>
            <typeparam name="TException"></typeparam>
            <param name="context"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IStateMachineActivity`1.Faulted``2(MassTransit.BehaviorExceptionContext{`0,``0,``1},MassTransit.IBehavior{`0,``0})">
            <summary>
            The exception path through the behavior allows activities to catch and handle exceptions
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TException"></typeparam>
            <param name="context"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.IStateMachineActivity`2">
            <summary>
            An activity is part of a behavior that is executed in order
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:MassTransit.IStateMachineActivity`2.Execute(MassTransit.BehaviorContext{`0,`1},MassTransit.IBehavior{`0,`1})">
            <summary>
            Execute the activity with the given behavior context
            </summary>
            <param name="context">The behavior context</param>
            <param name="next">The behavior that follows this activity</param>
            <returns>An awaitable task</returns>
        </member>
        <member name="M:MassTransit.IStateMachineActivity`2.Faulted``1(MassTransit.BehaviorExceptionContext{`0,`1,``0},MassTransit.IBehavior{`0,`1})">
            <summary>
            The exception path through the behavior allows activities to catch and handle exceptions
            </summary>
            <typeparam name="TException"></typeparam>
            <param name="context"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IStateObserver`1.StateChanged(MassTransit.BehaviorContext{`0},MassTransit.State,MassTransit.State)">
            <summary>
            Invoked prior to changing the state of the state machine
            </summary>
            <param name="context">The instance context of the state machine</param>
            <param name="currentState">The current state (after the change)</param>
            <param name="previousState">The previous state (before the change)</param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.IVisitable">
            <summary>
            Used to visit the state machine structure, so it can be displayed, etc.
            </summary>
        </member>
        <member name="M:MassTransit.IVisitable.Accept(MassTransit.StateMachineVisitor)">
            <summary>
            A visitable site can accept the visitor and pass control to internal elements
            </summary>
            <param name="visitor"></param>
        </member>
        <member name="T:MassTransit.Request`3">
            <summary>
            A request is a state-machine based request configuration that includes
            the events and states related to the execution of a request.
            </summary>
            <typeparam name="TRequest">The request type</typeparam>
            <typeparam name="TResponse">The response type</typeparam>
            <typeparam name="TSaga"></typeparam>
        </member>
        <member name="P:MassTransit.Request`3.Name">
            <summary>
            The name of the request
            </summary>
        </member>
        <member name="P:MassTransit.Request`3.Settings">
            <summary>
            The settings that are used for the request, including the timeout
            </summary>
        </member>
        <member name="P:MassTransit.Request`3.Completed">
            <summary>
            The event that is raised when the request completes and the response is received
            </summary>
        </member>
        <member name="P:MassTransit.Request`3.Faulted">
            <summary>
            The event raised when the request faults
            </summary>
        </member>
        <member name="P:MassTransit.Request`3.TimeoutExpired">
            <summary>
            The event raised when the request times out with no response received
            </summary>
        </member>
        <member name="P:MassTransit.Request`3.Pending">
            <summary>
            The state that is transitioned to once the request is pending
            </summary>
        </member>
        <member name="M:MassTransit.Request`3.SetRequestId(`0,System.Nullable{System.Guid})">
            <summary>
            Sets the requestId on the instance using the configured property
            </summary>
            <param name="instance"></param>
            <param name="requestId"></param>
        </member>
        <member name="M:MassTransit.Request`3.GetRequestId(`0)">
            <summary>
            Gets the requestId on the instance using the configured property
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Request`3.GenerateRequestId(`0)">
            <summary>
            Generate a requestId, using either the CorrelationId of the saga, or a NewId
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Request`3.SetSendContextHeaders(MassTransit.SendContext{`1})">
            <summary>
            Set the headers on the outgoing request <see cref="T:MassTransit.SendContext`1" />
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:MassTransit.Request`4">
            <summary>
            A request is a state-machine based request configuration that includes
            the events and states related to the execution of a request.
            </summary>
            <typeparam name="TRequest">The request type</typeparam>
            <typeparam name="TResponse">The response type</typeparam>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TResponse2"></typeparam>
        </member>
        <member name="P:MassTransit.Request`4.Settings">
            <summary>
            The settings that are used for the request, including the timeout
            </summary>
        </member>
        <member name="P:MassTransit.Request`4.Completed2">
            <summary>
            The event that is raised when the request completes and the response is received
            </summary>
        </member>
        <member name="T:MassTransit.Request`5">
            <summary>
            A request is a state-machine based request configuration that includes
            the events and states related to the execution of a request.
            </summary>
            <typeparam name="TRequest">The request type</typeparam>
            <typeparam name="TResponse">The response type</typeparam>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TResponse2"></typeparam>
            <typeparam name="TResponse3"></typeparam>
        </member>
        <member name="P:MassTransit.Request`5.Settings">
            <summary>
            The settings that are used for the request, including the timeout
            </summary>
        </member>
        <member name="P:MassTransit.Request`5.Completed3">
            <summary>
            The event that is raised when the request completes and the response is received
            </summary>
        </member>
        <member name="T:MassTransit.RequestSettings`3">
            <summary>
            The request settings include the address of the request handler, as well as the timeout to use
            for requests.
            </summary>
        </member>
        <member name="P:MassTransit.RequestSettings`3.ServiceAddress">
            <summary>
            The endpoint address of the service that handles the request
            </summary>
        </member>
        <member name="P:MassTransit.RequestSettings`3.Timeout">
            <summary>
            The timeout period before the request times out
            </summary>
        </member>
        <member name="P:MassTransit.RequestSettings`3.TimeToLive">
            <summary>
            If specified, the TimeToLive is set on the outgoing request
            </summary>
        </member>
        <member name="P:MassTransit.RequestSettings`3.Completed">
            <summary>
            Configures the behavior of the Completed event, the same was Events are configured on
            the state machine.
            </summary>
        </member>
        <member name="P:MassTransit.RequestSettings`3.Faulted">
            <summary>
            Configures the behavior of the Faulted event, the same was Events are configured on
            the state machine.
            </summary>
        </member>
        <member name="P:MassTransit.RequestSettings`3.TimeoutExpired">
            <summary>
            Configures the behavior of the Timeout Expired event, the same was Events are configured on
            the state machine.
            </summary>
        </member>
        <member name="T:MassTransit.RequestSettings`4">
            <summary>
            The request settings include the address of the request handler, as well as the timeout to use
            for requests.
            </summary>
        </member>
        <member name="P:MassTransit.RequestSettings`4.Completed2">
            <summary>
            Configures the behavior of the Completed event, the same was Events are configured on
            the state machine.
            </summary>
        </member>
        <member name="T:MassTransit.RequestSettings`5">
            <summary>
            The request settings include the address of the request handler, as well as the timeout to use
            for requests.
            </summary>
        </member>
        <member name="P:MassTransit.RequestSettings`5.Completed3">
            <summary>
            Configures the behavior of the Completed event, the same was Events are configured on
            the state machine.
            </summary>
        </member>
        <member name="T:MassTransit.SagaFactoryMethod`2">
            <summary>
            Used to create the saga instance
            </summary>
            <typeparam name="TSaga">The saga type</typeparam>
            <typeparam name="TMessage">The message type</typeparam>
            <param name="context">The message consume context</param>
            <returns>A newly created saga instance</returns>
        </member>
        <member name="P:MassTransit.SagaStateMachine`1.Correlations">
            <summary>
            Returns the event correlations for the state machine
            </summary>
        </member>
        <member name="M:MassTransit.SagaStateMachine`1.IsCompleted(MassTransit.BehaviorContext{`0})">
            <summary>
            Returns true if the saga state machine instance is complete and can be removed from the repository
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.SagaStateMachineInstance">
            <summary>
            An Automatonymous state machine instance that is usable as a saga by MassTransit must implement this interface.
            It indicates to the framework the available features of the state as being a state machine instance.
            </summary>
        </member>
        <member name="T:MassTransit.Schedule`1">
            <summary>
            Holds the state of a scheduled message
            </summary>
            <typeparam name="TSaga"></typeparam>
        </member>
        <member name="P:MassTransit.Schedule`1.Name">
            <summary>
            The name of the scheduled message
            </summary>
        </member>
        <member name="M:MassTransit.Schedule`1.GetDelay(MassTransit.BehaviorContext{`0})">
            <summary>
            Returns the delay, given the instance, for the scheduled message
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Schedule`1.GetTokenId(`0)">
            <summary>
            Return the TokenId for the instance
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Schedule`1.SetTokenId(`0,System.Nullable{System.Guid})">
            <summary>
            Set the token ID on the Instance
            </summary>
            <param name="instance"></param>
            <param name="tokenId"></param>
        </member>
        <member name="T:MassTransit.Schedule`2">
            <summary>
            Holds the state of a scheduled message
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="P:MassTransit.Schedule`2.Received">
            <summary>
            This event is raised when the scheduled message is received. If a previous message
            was rescheduled, this event is filtered so that only the most recently scheduled
            message is allowed.
            </summary>
        </member>
        <member name="P:MassTransit.Schedule`2.AnyReceived">
            <summary>
            This event is raised when any message is directed at the state machine, but it is
            not filtered to the currently scheduled event. So outdated or original events may
            be raised.
            </summary>
        </member>
        <member name="T:MassTransit.ServiceAddressExceptionProvider`2">
            <summary>
            Provides an address for the request service
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TException"></typeparam>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.ServiceAddressExceptionProvider`3">
            <summary>
            Provides an address for the request service
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="TException"></typeparam>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.ServiceAddressProvider`1">
            <summary>
            Provides an address for the request service
            </summary>
            <typeparam name="TSaga"></typeparam>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.ServiceAddressProvider`2">
            <summary>
            Provides an address for the request service
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TMessage"></typeparam>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:MassTransit.State.Enter">
            <summary>
            Raised when the state is entered
            </summary>
        </member>
        <member name="P:MassTransit.State.Leave">
            <summary>
            Raised when the state is about to be left
            </summary>
        </member>
        <member name="P:MassTransit.State.BeforeEnter">
            <summary>
            Raised just before the state is about to change to a new state
            </summary>
        </member>
        <member name="P:MassTransit.State.AfterLeave">
            <summary>
            Raised just after the state has been left and a new state is selected
            </summary>
        </member>
        <member name="T:MassTransit.State`1">
            <summary>
            A state within a state machine that can be targeted with events
            </summary>
            <typeparam name="TSaga">The instance type to which the state applies</typeparam>
        </member>
        <member name="P:MassTransit.State`1.SuperState">
            <summary>
            Returns the superState of the state, if there is one
            </summary>
        </member>
        <member name="M:MassTransit.State`1.Raise``1(MassTransit.BehaviorContext{`0,``0})">
            <summary>
            Raise an event to the state, passing the instance
            </summary>
            <typeparam name="T">The event data type</typeparam>
            <param name="context">The event context</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.State`1.Bind(MassTransit.Event,MassTransit.IStateMachineActivity{`0})">
            <summary>
            Bind an activity to an event
            </summary>
            <param name="event"></param>
            <param name="activity"></param>
        </member>
        <member name="M:MassTransit.State`1.Ignore(MassTransit.Event)">
            <summary>
            Ignore the specified event in this state. Prevents an exception from being thrown if
            the event is raised during this state.
            </summary>
            <param name="event"></param>
        </member>
        <member name="M:MassTransit.State`1.Ignore``1(MassTransit.Event{``0},MassTransit.StateMachineCondition{`0,``0})">
            <summary>
            Ignore the specified event in this state if the filter condition passed. Prevents exceptions
            from being thrown if the event is raised during this state.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="event"></param>
            <param name="filter"></param>
        </member>
        <member name="M:MassTransit.State`1.AddSubstate(MassTransit.State{`0})">
            <summary>
            Adds a substate to the state
            </summary>
            <param name="subState"></param>
        </member>
        <member name="M:MassTransit.State`1.HasState(MassTransit.State{`0})">
            <summary>
            True if the specified state is included in the state
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.State`1.IsStateOf(MassTransit.State{`0})">
            <summary>
            True if the specified state is a substate of the current state
            </summary>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.StateMachine">
            <summary>
            A state machine definition
            </summary>
        </member>
        <member name="P:MassTransit.StateMachine.Name">
            <summary>
            The name of the state machine (defaults to the state machine type name)
            </summary>
        </member>
        <member name="P:MassTransit.StateMachine.Events">
            <summary>
            The events defined in the state machine
            </summary>
        </member>
        <member name="P:MassTransit.StateMachine.States">
            <summary>
            The states defined in the state machine
            </summary>
        </member>
        <member name="P:MassTransit.StateMachine.InstanceType">
            <summary>
            The instance type associated with the state machine
            </summary>
        </member>
        <member name="P:MassTransit.StateMachine.Initial">
            <summary>
            The initial state of a new state machine instance
            </summary>
        </member>
        <member name="P:MassTransit.StateMachine.Final">
            <summary>
            The final state of a state machine instance
            </summary>
        </member>
        <member name="M:MassTransit.StateMachine.GetEvent(System.String)">
            <summary>
            Returns the event requested
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.StateMachine.GetState(System.String)">
            <summary>
            Returns the state requested
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.StateMachine.NextEvents(MassTransit.State)">
            <summary>
            The valid events that can be raised during the specified state
            </summary>
            <param name="state">The state to query</param>
            <returns>An enumeration of valid events</returns>
        </member>
        <member name="M:MassTransit.StateMachine.IsCompositeEvent(MassTransit.Event)">
            <summary>
            Returns true if the event is or is used by a composite event
            </summary>
            <param name="event"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.StateMachine`1">
            <summary>
            A defined state machine that operations against the specified instance
            </summary>
            <typeparam name="TSaga"></typeparam>
        </member>
        <member name="P:MassTransit.StateMachine`1.Accessor">
            <summary>
            Exposes the current state on the given instance
            </summary>
        </member>
        <member name="M:MassTransit.StateMachine`1.GetState(System.String)">
            <summary>
            Returns the state requested bound to the instance
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.StateMachine`1.RaiseEvent(MassTransit.BehaviorContext{`0})">
            <summary>
            Raise a simple event on the state machine instance asynchronously
            </summary>
            <param name="context"></param>
            <returns>Task for the instance once completed</returns>
        </member>
        <member name="M:MassTransit.StateMachine`1.RaiseEvent``1(MassTransit.BehaviorContext{`0,``0})">
            <summary>
            Raise a data event on the state machine instance
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:MassTransit.StateMachineAsyncCondition`2">
            <summary>
            Filters activities based on the async conditional statement
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TMessage"></typeparam>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.StateMachineAsyncCondition`1">
            <summary>
            Filters activities based on the async conditional statement
            </summary>
            <typeparam name="TSaga"></typeparam>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.StateMachineAsyncExceptionCondition`2">
            <summary>
            Filters activities based on the conditional statement
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TException"></typeparam>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.StateMachineAsyncExceptionCondition`3">
            <summary>
            Filters activities based on the conditional statement
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="TException"></typeparam>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.StateMachineCondition`1">
            <summary>
            Filters activities based on the conditional statement
            </summary>
            <typeparam name="TSaga"></typeparam>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.StateMachineCondition`2">
            <summary>
            Filters activities based on the conditional statement
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TMessage"></typeparam>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.StateMachineExceptionCondition`2">
            <summary>
            Filters activities based on the conditional statement
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TException"></typeparam>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.StateMachineExceptionCondition`3">
            <summary>
            Filters activities based on the conditional statement
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TMessage"></typeparam>
            <typeparam name="TException"></typeparam>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.UnhandledEventCallback`1">
            <summary>
            Callback for an unhandled event in the state machine
            </summary>
            <typeparam name="TSaga">The state machine instance type</typeparam>
            <param name="context">The event context</param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.UnhandledEventContext`1">
            <summary>
            The context of an unhandled event in the state machine
            </summary>
            <typeparam name="TSaga"></typeparam>
        </member>
        <member name="P:MassTransit.UnhandledEventContext`1.CurrentState">
            <summary>
            The current state of the state machine
            </summary>
        </member>
        <member name="M:MassTransit.UnhandledEventContext`1.Ignore">
            <summary>
            Returns a Task that ignores the unhandled event
            </summary>
        </member>
        <member name="M:MassTransit.UnhandledEventContext`1.Throw">
            <summary>
            Returns a thrown exception task for the unhandled event
            </summary>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Visitable">
            <summary>
            Used to visit the state machine structure, so it can be displayed, etc.
            </summary>
        </member>
        <member name="T:MassTransit.InitiatedBy`1">
            <summary>
            Specifies that the message type TMessage starts a new saga.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.InitiatedByOrOrchestrates`1">
            <summary>
            Specifies that a class implementing ISaga consumes TMessage as part of the saga
            </summary>
            <typeparam name="TMessage">The type of message to consume</typeparam>
        </member>
        <member name="T:MassTransit.ISagaFactory`2">
            <summary>
            Creates a saga instance when an existing saga instance is missing
            </summary>
            <typeparam name="TSaga">The saga type</typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:MassTransit.ISagaFactory`2.Create(MassTransit.ConsumeContext{`1})">
            <summary>
            Create a new saga instance using the supplied consume context
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ISagaFactory`2.Send(MassTransit.ConsumeContext{`1},MassTransit.IPipe{MassTransit.SagaConsumeContext{`0,`1}})">
            <summary>
            Send the context through the factory, with the proper decorations
            </summary>
            <param name="context"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="P:MassTransit.ISagaPolicy`2.IsReadOnly">
            <summary>
            If true, changes should not be saved to the saga repository
            </summary>
        </member>
        <member name="M:MassTransit.ISagaPolicy`2.PreInsertInstance(MassTransit.ConsumeContext{`1},`0@)">
            <summary>
            If true, the instance returned should be used to try and insert as a new saga instance, ignoring any failures
            </summary>
            <param name="context"></param>
            <param name="instance"></param>
            <returns>True if the instance should be inserted before invoking the message logic</returns>
        </member>
        <member name="M:MassTransit.ISagaPolicy`2.Existing(MassTransit.SagaConsumeContext{`0,`1},MassTransit.IPipe{MassTransit.SagaConsumeContext{`0,`1}})">
            <summary>
            The method invoked when an existing saga instance is present
            </summary>
            <param name="context"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ISagaPolicy`2.Missing(MassTransit.ConsumeContext{`1},MassTransit.IPipe{MassTransit.SagaConsumeContext{`0,`1}})">
            <summary>
            Invoked when there is not an existing saga instance available
            </summary>
            <param name="context"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.ISagaQuery`1">
            <summary>
            A saga query is used when a LINQ expression is accepted to query
            the saga repository storage to get zero or more saga instances
            </summary>
            <typeparam name="TSaga"></typeparam>
        </member>
        <member name="P:MassTransit.ISagaQuery`1.FilterExpression">
            <summary>
            The query expression that returns true if the saga
            matches the query.
            </summary>
        </member>
        <member name="M:MassTransit.ISagaQuery`1.GetFilter">
            <summary>
            Compiles a function that can be used to programatically
            compare a saga instance to the filter expression.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MassTransit.ISagaQueryFactory`2">
            <summary>
            Used to create a saga query from the message consume context
            </summary>
            <typeparam name="TSaga"></typeparam>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="M:MassTransit.ISagaQueryFactory`2.TryCreateQuery(MassTransit.ConsumeContext{`1},MassTransit.ISagaQuery{`0}@)">
            <summary>
            Creates a saga query from the specified message context
            </summary>
            <param name="context">The message context</param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.ISagaRepository`1">
            <summary>
            A saga repository is used by the service bus to dispatch messages to sagas
            </summary>
            <typeparam name="TSaga"></typeparam>
        </member>
        <member name="M:MassTransit.ISagaRepository`1.Send``1(MassTransit.ConsumeContext{``0},MassTransit.ISagaPolicy{`0,``0},MassTransit.IPipe{MassTransit.SagaConsumeContext{`0,``0}})">
            <summary>
            Send the message to the saga repository where the context.CorrelationId has the CorrelationId
            of the saga instance.
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The message consume context</param>
            <param name="policy">The saga policy for the message</param>
            <param name="next">The saga consume pipe</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ISagaRepository`1.SendQuery``1(MassTransit.ConsumeContext{``0},MassTransit.ISagaQuery{`0},MassTransit.ISagaPolicy{`0,``0},MassTransit.IPipe{MassTransit.SagaConsumeContext{`0,``0}})">
            <summary>
            Send the message to the saga repository where the query is used to find matching saga instances,
            which are invoked concurrently.
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The saga query consume context</param>
            <param name="query"></param>
            <param name="policy">The saga policy for the message</param>
            <param name="next">The saga consume pipe</param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.ISagaVersion">
            <summary>
            For saga repositories that use an incrementing version
            </summary>
        </member>
        <member name="T:MassTransit.Orchestrates`1">
            <summary>
            Specifies that a class implementing ISaga consumes TMessage as part of the saga
            </summary>
            <typeparam name="TMessage">The type of message to consume</typeparam>
        </member>
        <member name="M:MassTransit.SchedulePublishExtensions.SchedulePublish``1(MassTransit.ConsumeContext,System.DateTime,``0,System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The consume context</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="message">The message</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SchedulePublishExtensions.SchedulePublish``1(MassTransit.ConsumeContext,System.DateTime,``0,MassTransit.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The consume context</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="message">The message</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SchedulePublishExtensions.SchedulePublish``1(MassTransit.ConsumeContext,System.DateTime,``0,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The consume context</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="message">The message</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SchedulePublishExtensions.SchedulePublish(MassTransit.ConsumeContext,System.DateTime,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sends an object as a message, using the type of the message instance.
            </summary>
            <param name="context">The consume context</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="message">The message object</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SchedulePublishExtensions.SchedulePublish(MassTransit.ConsumeContext,System.DateTime,System.Object,System.Type,System.Threading.CancellationToken)">
            <summary>
            Sends an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="context">The consume context</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="message">The message object</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SchedulePublishExtensions.SchedulePublish(MassTransit.ConsumeContext,System.DateTime,System.Object,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Sends an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="context">The consume context</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="message">The message object</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SchedulePublishExtensions.SchedulePublish(MassTransit.ConsumeContext,System.DateTime,System.Object,System.Type,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Sends an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="context">The consume context</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="message">The message object</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SchedulePublishExtensions.SchedulePublish``1(MassTransit.ConsumeContext,System.DateTime,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sends an interface message, initializing the properties of the interface using the anonymous
            object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="context">The consume context</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SchedulePublishExtensions.SchedulePublish``1(MassTransit.ConsumeContext,System.DateTime,System.Object,MassTransit.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Sends an interface message, initializing the properties of the interface using the anonymous
            object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="context">The consume context</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SchedulePublishExtensions.SchedulePublish``1(MassTransit.ConsumeContext,System.DateTime,System.Object,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Sends an interface message, initializing the properties of the interface using the anonymous
            object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="context">The consume context</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SchedulePublishExtensions.SchedulePublish``1(MassTransit.ConsumeContext,System.TimeSpan,``0,System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The consume context</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="message">The message</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SchedulePublishExtensions.SchedulePublish``1(MassTransit.ConsumeContext,System.TimeSpan,``0,MassTransit.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The consume context</param>
            <param name="message">The message</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SchedulePublishExtensions.SchedulePublish``1(MassTransit.ConsumeContext,System.TimeSpan,``0,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The consume context</param>
            <param name="message">The message</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SchedulePublishExtensions.SchedulePublish(MassTransit.ConsumeContext,System.TimeSpan,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sends an object as a message, using the type of the message instance.
            </summary>
            <param name="context">The consume context</param>
            <param name="message">The message object</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SchedulePublishExtensions.SchedulePublish(MassTransit.ConsumeContext,System.TimeSpan,System.Object,System.Type,System.Threading.CancellationToken)">
            <summary>
            Sends an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="context">The consume context</param>
            <param name="message">The message object</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SchedulePublishExtensions.SchedulePublish(MassTransit.ConsumeContext,System.TimeSpan,System.Object,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Sends an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="context">The consume context</param>
            <param name="message">The message object</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SchedulePublishExtensions.SchedulePublish(MassTransit.ConsumeContext,System.TimeSpan,System.Object,System.Type,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Sends an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="context">The consume context</param>
            <param name="message">The message object</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SchedulePublishExtensions.SchedulePublish``1(MassTransit.ConsumeContext,System.TimeSpan,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sends an interface message, initializing the properties of the interface using the anonymous
            object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="context">The consume context</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SchedulePublishExtensions.SchedulePublish``1(MassTransit.ConsumeContext,System.TimeSpan,System.Object,MassTransit.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Sends an interface message, initializing the properties of the interface using the anonymous
            object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="context">The consume context</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SchedulePublishExtensions.SchedulePublish``1(MassTransit.ConsumeContext,System.TimeSpan,System.Object,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Sends an interface message, initializing the properties of the interface using the anonymous
            object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="context">The consume context</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.CancelScheduledSendExtensions.CancelScheduledSend``1(MassTransit.IMessageScheduler,MassTransit.ScheduledMessage{``0})">
            <summary>
            Cancel a scheduled message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="scheduler">The message scheduler</param>
            <param name="message">The </param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.CancelScheduledSendExtensions.CancelScheduledSend``1(MassTransit.ConsumeContext,MassTransit.ScheduledMessage{``0})">
            <summary>
            Cancel a scheduled message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The message scheduler</param>
            <param name="message">The </param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSchedulerExtensions.ScheduleSend``1(MassTransit.ConsumeContext,System.Uri,System.DateTime,``0,System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The consume context</param>
            <param name="message">The message</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSchedulerExtensions.ScheduleSend``1(MassTransit.ConsumeContext,System.Uri,System.DateTime,``0,MassTransit.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The consume context</param>
            <param name="message">The message</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSchedulerExtensions.ScheduleSend``1(MassTransit.ConsumeContext,System.Uri,System.DateTime,``0,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The consume context</param>
            <param name="message">The message</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSchedulerExtensions.ScheduleSend(MassTransit.ConsumeContext,System.Uri,System.DateTime,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sends an object as a message, using the type of the message instance.
            </summary>
            <param name="context">The consume context</param>
            <param name="message">The message object</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSchedulerExtensions.ScheduleSend(MassTransit.ConsumeContext,System.Uri,System.DateTime,System.Object,System.Type,System.Threading.CancellationToken)">
            <summary>
            Sends an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="context">The consume context</param>
            <param name="message">The message object</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSchedulerExtensions.ScheduleSend(MassTransit.ConsumeContext,System.Uri,System.DateTime,System.Object,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Sends an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="context">The consume context</param>
            <param name="message">The message object</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSchedulerExtensions.ScheduleSend(MassTransit.ConsumeContext,System.Uri,System.DateTime,System.Object,System.Type,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Sends an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="context">The consume context</param>
            <param name="message">The message object</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSchedulerExtensions.ScheduleSend``1(MassTransit.ConsumeContext,System.Uri,System.DateTime,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sends an interface message, initializing the properties of the interface using the anonymous
            object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="context">The consume context</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSchedulerExtensions.ScheduleSend``1(MassTransit.ConsumeContext,System.Uri,System.DateTime,System.Object,MassTransit.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Sends an interface message, initializing the properties of the interface using the anonymous
            object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="context">The consume context</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSchedulerExtensions.ScheduleSend``1(MassTransit.ConsumeContext,System.Uri,System.DateTime,System.Object,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Sends an interface message, initializing the properties of the interface using the anonymous
            object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="context">The consume context</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSchedulerExtensions.ScheduleSend``1(MassTransit.ConsumeContext,System.Uri,System.TimeSpan,``0,System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The consume context</param>
            <param name="message">The message</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSchedulerExtensions.ScheduleSend``1(MassTransit.ConsumeContext,System.Uri,System.TimeSpan,``0,MassTransit.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The consume context</param>
            <param name="message">The message</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSchedulerExtensions.ScheduleSend``1(MassTransit.ConsumeContext,System.Uri,System.TimeSpan,``0,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The consume context</param>
            <param name="message">The message</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSchedulerExtensions.ScheduleSend(MassTransit.ConsumeContext,System.Uri,System.TimeSpan,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sends an object as a message, using the type of the message instance.
            </summary>
            <param name="context">The consume context</param>
            <param name="message">The message object</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSchedulerExtensions.ScheduleSend(MassTransit.ConsumeContext,System.Uri,System.TimeSpan,System.Object,System.Type,System.Threading.CancellationToken)">
            <summary>
            Sends an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="context">The consume context</param>
            <param name="message">The message object</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSchedulerExtensions.ScheduleSend(MassTransit.ConsumeContext,System.Uri,System.TimeSpan,System.Object,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Sends an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="context">The consume context</param>
            <param name="message">The message object</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSchedulerExtensions.ScheduleSend``1(MassTransit.ConsumeContext,System.Uri,System.TimeSpan,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sends an interface message, initializing the properties of the interface using the anonymous
            object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="context">The consume context</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSchedulerExtensions.ScheduleSend(MassTransit.ConsumeContext,System.Uri,System.TimeSpan,System.Object,System.Type,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Sends an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="context">The consume context</param>
            <param name="message">The message object</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSchedulerExtensions.ScheduleSend``1(MassTransit.ConsumeContext,System.Uri,System.TimeSpan,System.Object,MassTransit.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Sends an interface message, initializing the properties of the interface using the anonymous
            object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="context">The consume context</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSchedulerExtensions.ScheduleSend``1(MassTransit.ConsumeContext,System.Uri,System.TimeSpan,System.Object,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Sends an interface message, initializing the properties of the interface using the anonymous
            object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="context">The consume context</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSelfSchedulerExtensions.ScheduleSend``1(MassTransit.ConsumeContext,System.DateTime,``0,System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The consume context</param>
            <param name="message">The message</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSelfSchedulerExtensions.ScheduleSend``1(MassTransit.ConsumeContext,System.DateTime,``0,MassTransit.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The consume context</param>
            <param name="message">The message</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSelfSchedulerExtensions.ScheduleSend``1(MassTransit.ConsumeContext,System.DateTime,``0,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The consume context</param>
            <param name="message">The message</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSelfSchedulerExtensions.ScheduleSend(MassTransit.ConsumeContext,System.DateTime,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sends an object as a message, using the type of the message instance.
            </summary>
            <param name="context">The consume context</param>
            <param name="message">The message object</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSelfSchedulerExtensions.ScheduleSend(MassTransit.ConsumeContext,System.DateTime,System.Object,System.Type,System.Threading.CancellationToken)">
            <summary>
            Sends an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="context">The consume context</param>
            <param name="message">The message object</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSelfSchedulerExtensions.ScheduleSend(MassTransit.ConsumeContext,System.DateTime,System.Object,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Sends an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="context">The consume context</param>
            <param name="message">The message object</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSelfSchedulerExtensions.ScheduleSend(MassTransit.ConsumeContext,System.DateTime,System.Object,System.Type,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Sends an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="context">The consume context</param>
            <param name="message">The message object</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSelfSchedulerExtensions.ScheduleSend``1(MassTransit.ConsumeContext,System.DateTime,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sends an interface message, initializing the properties of the interface using the anonymous
            object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="context">The consume context</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSelfSchedulerExtensions.ScheduleSend``1(MassTransit.ConsumeContext,System.DateTime,System.Object,MassTransit.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Sends an interface message, initializing the properties of the interface using the anonymous
            object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="context">The consume context</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSelfSchedulerExtensions.ScheduleSend``1(MassTransit.ConsumeContext,System.DateTime,System.Object,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Sends an interface message, initializing the properties of the interface using the anonymous
            object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="context">The consume context</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSelfSchedulerExtensions.ScheduleSend``1(MassTransit.ConsumeContext,System.TimeSpan,``0,System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The consume context</param>
            <param name="message">The message</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSelfSchedulerExtensions.ScheduleSend``1(MassTransit.ConsumeContext,System.TimeSpan,``0,MassTransit.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The consume context</param>
            <param name="message">The message</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSelfSchedulerExtensions.ScheduleSend``1(MassTransit.ConsumeContext,System.TimeSpan,``0,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="context">The consume context</param>
            <param name="message">The message</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSelfSchedulerExtensions.ScheduleSend(MassTransit.ConsumeContext,System.TimeSpan,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sends an object as a message, using the type of the message instance.
            </summary>
            <param name="context">The consume context</param>
            <param name="message">The message object</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSelfSchedulerExtensions.ScheduleSend(MassTransit.ConsumeContext,System.TimeSpan,System.Object,System.Type,System.Threading.CancellationToken)">
            <summary>
            Sends an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="context">The consume context</param>
            <param name="message">The message object</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSelfSchedulerExtensions.ScheduleSend(MassTransit.ConsumeContext,System.TimeSpan,System.Object,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Sends an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="context">The consume context</param>
            <param name="message">The message object</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSelfSchedulerExtensions.ScheduleSend``1(MassTransit.ConsumeContext,System.TimeSpan,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sends an interface message, initializing the properties of the interface using the anonymous
            object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="context">The consume context</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSelfSchedulerExtensions.ScheduleSend(MassTransit.ConsumeContext,System.TimeSpan,System.Object,System.Type,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Sends an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="context">The consume context</param>
            <param name="message">The message object</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSelfSchedulerExtensions.ScheduleSend``1(MassTransit.ConsumeContext,System.TimeSpan,System.Object,MassTransit.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Sends an interface message, initializing the properties of the interface using the anonymous
            object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="context">The consume context</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.ConsumeContextSelfSchedulerExtensions.ScheduleSend``1(MassTransit.ConsumeContext,System.TimeSpan,System.Object,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Sends an interface message, initializing the properties of the interface using the anonymous
            object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="context">The consume context</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="delay">The time at which the message should be delivered to the queue</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="T:MassTransit.IMessageScheduler">
            <summary>
            A message scheduler is able to schedule a message for delivery.
            </summary>
        </member>
        <member name="M:MassTransit.IMessageScheduler.ScheduleSend``1(System.Uri,System.DateTime,``0,System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="message">The message</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.IMessageScheduler.ScheduleSend``1(System.Uri,System.DateTime,``0,MassTransit.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="message">The message</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.IMessageScheduler.ScheduleSend``1(System.Uri,System.DateTime,``0,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="message">The message</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.IMessageScheduler.ScheduleSend(System.Uri,System.DateTime,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sends an object as a message, using the type of the message instance.
            </summary>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="message">The message object</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.IMessageScheduler.ScheduleSend(System.Uri,System.DateTime,System.Object,System.Type,System.Threading.CancellationToken)">
            <summary>
            Sends an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="message">The message object</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.IMessageScheduler.ScheduleSend(System.Uri,System.DateTime,System.Object,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Sends an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="message">The message object</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.IMessageScheduler.ScheduleSend(System.Uri,System.DateTime,System.Object,System.Type,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Sends an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="message">The message object</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.IMessageScheduler.ScheduleSend``1(System.Uri,System.DateTime,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sends an interface message, initializing the properties of the interface using the anonymous
            object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.IMessageScheduler.ScheduleSend``1(System.Uri,System.DateTime,System.Object,MassTransit.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Sends an interface message, initializing the properties of the interface using the anonymous
            object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.IMessageScheduler.ScheduleSend``1(System.Uri,System.DateTime,System.Object,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Sends an interface message, initializing the properties of the interface using the anonymous
            object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.IMessageScheduler.CancelScheduledSend(System.Uri,System.Guid)">
            <summary>
            Cancel a scheduled message by TokenId
            </summary>
            <param name="destinationAddress">The destination address of the scheduled message</param>
            <param name="tokenId">The tokenId of the scheduled message</param>
        </member>
        <member name="M:MassTransit.IMessageScheduler.SchedulePublish``1(System.DateTime,``0,System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="message">The message</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.IMessageScheduler.SchedulePublish``1(System.DateTime,``0,MassTransit.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="message">The message</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.IMessageScheduler.SchedulePublish``1(System.DateTime,``0,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="message">The message</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.IMessageScheduler.SchedulePublish(System.DateTime,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sends an object as a message, using the type of the message instance.
            </summary>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="message">The message object</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.IMessageScheduler.SchedulePublish(System.DateTime,System.Object,System.Type,System.Threading.CancellationToken)">
            <summary>
            Sends an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="message">The message object</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.IMessageScheduler.SchedulePublish(System.DateTime,System.Object,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Sends an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="message">The message object</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.IMessageScheduler.SchedulePublish(System.DateTime,System.Object,System.Type,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Sends an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="message">The message object</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.IMessageScheduler.SchedulePublish``1(System.DateTime,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sends an interface message, initializing the properties of the interface using the anonymous
            object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.IMessageScheduler.SchedulePublish``1(System.DateTime,System.Object,MassTransit.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Sends an interface message, initializing the properties of the interface using the anonymous
            object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.IMessageScheduler.SchedulePublish``1(System.DateTime,System.Object,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Sends an interface message, initializing the properties of the interface using the anonymous
            object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.IMessageScheduler.CancelScheduledPublish``1(System.Guid)">
            <summary>
            Cancel a scheduled publish, using the tokenId. The message type <typeparamref name="T" /> is used to determine
            the destinationAddress.
            </summary>
            <param name="tokenId">The tokenId of the scheduled message</param>
        </member>
        <member name="M:MassTransit.IMessageScheduler.CancelScheduledPublish(System.Type,System.Guid)">
            <summary>
            Cancel a scheduled publish, using the tokenId. The <paramref name="messageType" /> is used to determine
            the destinationAddress.
            </summary>
            <param name="messageType"></param>
            <param name="tokenId">The tokenId of the scheduled message</param>
        </member>
        <member name="T:MassTransit.IRecurringMessageScheduler">
            <summary>
            A message scheduler is able to schedule a message for delivery.
            </summary>
        </member>
        <member name="M:MassTransit.IRecurringMessageScheduler.ScheduleRecurringSend``1(System.Uri,MassTransit.Scheduling.RecurringSchedule,``0,System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="schedule">The schedule for the message to be delivered</param>
            <param name="message">The message</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.IRecurringMessageScheduler.ScheduleRecurringSend``1(System.Uri,MassTransit.Scheduling.RecurringSchedule,``0,MassTransit.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="schedule">The schedule for the message to be delivered</param>
            <param name="message">The message</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.IRecurringMessageScheduler.ScheduleRecurringSend``1(System.Uri,MassTransit.Scheduling.RecurringSchedule,``0,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="schedule">The schedule for the message to be delivered</param>
            <param name="message">The message</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.IRecurringMessageScheduler.ScheduleRecurringSend(System.Uri,MassTransit.Scheduling.RecurringSchedule,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sends an object as a message, using the type of the message instance.
            </summary>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="schedule">The schedule for the message to be delivered</param>
            <param name="message">The message object</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.IRecurringMessageScheduler.ScheduleRecurringSend(System.Uri,MassTransit.Scheduling.RecurringSchedule,System.Object,System.Type,System.Threading.CancellationToken)">
            <summary>
            Sends an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="schedule">The schedule for the message to be delivered</param>
            <param name="message">The message object</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.IRecurringMessageScheduler.ScheduleRecurringSend(System.Uri,MassTransit.Scheduling.RecurringSchedule,System.Object,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Sends an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="schedule">The schedule for the message to be delivered</param>
            <param name="message">The message object</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.IRecurringMessageScheduler.ScheduleRecurringSend(System.Uri,MassTransit.Scheduling.RecurringSchedule,System.Object,System.Type,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Sends an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="schedule">The schedule for the message to be delivered</param>
            <param name="message">The message object</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.IRecurringMessageScheduler.ScheduleRecurringSend``1(System.Uri,MassTransit.Scheduling.RecurringSchedule,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sends an interface message, initializing the properties of the interface using the anonymous
            object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="schedule">The schedule for the message to be delivered</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.IRecurringMessageScheduler.ScheduleRecurringSend``1(System.Uri,MassTransit.Scheduling.RecurringSchedule,System.Object,MassTransit.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Sends an interface message, initializing the properties of the interface using the anonymous
            object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="schedule">The schedule for the message to be delivered</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.IRecurringMessageScheduler.ScheduleRecurringSend``1(System.Uri,MassTransit.Scheduling.RecurringSchedule,System.Object,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Sends an interface message, initializing the properties of the interface using the anonymous
            object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="destinationAddress">The destination address where the schedule message should be sent</param>
            <param name="schedule">The schedule for the message to be delivered</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.IRecurringMessageScheduler.CancelScheduledRecurringSend(System.String,System.String)">
            <summary>
            Cancel a scheduled message by TokenId
            </summary>
            <param name="scheduleId">The scheduleId from the recurring schedule</param>
            <param name="scheduleGroup">The scheduleGroup from the recurring schedule</param>
        </member>
        <member name="M:MassTransit.IRecurringMessageScheduler.PauseScheduledRecurringSend(System.String,System.String)">
            <summary>
            Pause a scheduled message by ScheduleId and ScheduleGroup.
            </summary>
            <param name="scheduleId">The scheduleId from the recurring schedule</param>
            <param name="scheduleGroup">The scheduleGroup from the recurring schedule</param>
        </member>
        <member name="M:MassTransit.IRecurringMessageScheduler.ResumeScheduledRecurringSend(System.String,System.String)">
            <summary>
            Resume a scheduled message by ScheduleId and ScheduleGroup.
            </summary>
            <param name="scheduleId">The scheduleId from the recurring schedule</param>
            <param name="scheduleGroup">The scheduleGroup from the recurring schedule</param>
        </member>
        <member name="M:MassTransit.IScheduleMessageProvider.ScheduleSend``1(System.Uri,System.DateTime,``0,MassTransit.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Schedule a message to be sent
            </summary>
            <param name="destinationAddress"></param>
            <param name="scheduledTime"></param>
            <param name="message"></param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IScheduleMessageProvider.CancelScheduledSend(System.Guid)">
            <summary>
            Cancel a scheduled message by TokenId
            </summary>
            <param name="tokenId">The tokenId of the scheduled message</param>
        </member>
        <member name="M:MassTransit.IScheduleMessageProvider.CancelScheduledSend(System.Uri,System.Guid)">
            <summary>
            Cancel a scheduled message by TokenId
            </summary>
            <param name="destinationAddress">The destination address of the scheduled message</param>
            <param name="tokenId">The tokenId of the scheduled message</param>
        </member>
        <member name="T:MassTransit.MessageRedeliveryContext">
            <summary>
            Used to reschedule delivery of the current message
            </summary>
        </member>
        <member name="M:MassTransit.MessageRedeliveryContext.ScheduleRedelivery(System.TimeSpan,System.Action{MassTransit.ConsumeContext,MassTransit.SendContext})">
            <summary>
            Schedule the message to be redelivered after the specified delay with given operation.
            </summary>
            <param name="delay">The minimum delay before the message will be redelivered to the queue</param>
            <param name="callback">Operation which perform during message redeliver to queue</param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.MessageSchedulerContext.ScheduleSend``1(System.DateTime,``0,System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="message">The message</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.MessageSchedulerContext.ScheduleSend``1(System.DateTime,``0,MassTransit.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="message">The message</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.MessageSchedulerContext.ScheduleSend``1(System.DateTime,``0,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Send a message
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="message">The message</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.MessageSchedulerContext.ScheduleSend(System.DateTime,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sends an object as a message, using the type of the message instance.
            </summary>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="message">The message object</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.MessageSchedulerContext.ScheduleSend(System.DateTime,System.Object,System.Type,System.Threading.CancellationToken)">
            <summary>
            Sends an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="message">The message object</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.MessageSchedulerContext.ScheduleSend(System.DateTime,System.Object,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Sends an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="message">The message object</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.MessageSchedulerContext.ScheduleSend(System.DateTime,System.Object,System.Type,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Sends an object as a message, using the message type specified. If the object cannot be cast
            to the specified message type, an exception will be thrown.
            </summary>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="message">The message object</param>
            <param name="messageType">The type of the message (use message.GetType() if desired)</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.MessageSchedulerContext.ScheduleSend``1(System.DateTime,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sends an interface message, initializing the properties of the interface using the anonymous
            object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.MessageSchedulerContext.ScheduleSend``1(System.DateTime,System.Object,MassTransit.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Sends an interface message, initializing the properties of the interface using the anonymous
            object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.MessageSchedulerContext.ScheduleSend``1(System.DateTime,System.Object,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Sends an interface message, initializing the properties of the interface using the anonymous
            object specified
            </summary>
            <typeparam name="T">The interface type to send</typeparam>
            <param name="scheduledTime">The time at which the message should be delivered to the queue</param>
            <param name="values">The property values to initialize on the interface</param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="M:MassTransit.SendEndpointExtensions.Send(MassTransit.ISendEndpoint,System.Type,System.Object,System.Threading.CancellationToken)">
            <summary>
            Send a dynamically typed message initialized by a loosely typed dictionary of values. MassTransit will
            create and populate an object instance with the properties of the <paramref name="values" /> argument.
            </summary>
            <param name="messageType">The message type to publish</param>
            <param name="values">
            The dictionary of values to become hydrated and published under the type of the interface.
            </param>
            <param name="cancellationToken"></param>
            <param name="publishEndpoint"></param>
        </member>
        <member name="M:MassTransit.SendEndpointExtensions.Send(MassTransit.ISendEndpoint,System.Type,System.Object,MassTransit.IPipe{MassTransit.SendContext},System.Threading.CancellationToken)">
            <summary>
            Send a dynamically typed message initialized by a loosely typed dictionary of values. MassTransit will
            create and populate an object instance with the properties of the <paramref name="values" /> argument.
            </summary>
            <param name="messageType">The message type to publish</param>
            <param name="values">
            The dictionary of values to become hydrated and published under the type of the interface.
            </param>
            <param name="pipe"></param>
            <param name="cancellationToken"></param>
            <param name="publishEndpoint"></param>
        </member>
        <member name="T:MassTransit.SendTuple`1">
            <summary>
            Combines a message and a pipe which can be used to send/publish the message
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MassTransit.Base64MessageBody">
            <summary>
            Converts a binary-only message body to Base64 so that it can be used with non-binary message transports.
            Only the <see cref="M:MassTransit.Base64MessageBody.GetString" /> method performs the conversion, <see cref="M:MassTransit.Base64MessageBody.GetBytes" /> and <see cref="M:MassTransit.Base64MessageBody.GetStream" />
            are pass-through methods.
            </summary>
        </member>
        <member name="M:MassTransit.IMessageDeserializer.GetMessageBody(System.String)">
            <summary>
            Returns the appropriate message body for the message deserializer, using the input type
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.IMessageSerializer">
            <summary>
            A message serializer is responsible for serializing a message. Shocking, I know.
            </summary>
        </member>
        <member name="M:MassTransit.IMessageSerializer.GetMessageBody``1(MassTransit.SendContext{``0})">
            <summary>
            Returns a message body, for the serializer, which can be used by the transport to obtain the
            serialized message in the desired format.
            </summary>
            <param name="context"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IObjectDeserializer.SerializeObject(System.Object)">
            <summary>
            Serialize the dictionary to a message body, using the underlying serializer to ensure objects are properly serialized.
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Serialization.CamelCaseDictionaryExtensions.TryGetValueCamelCase(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,System.Object@)">
            <summary>
            Converts a PascalCase key to camelCase and attempts to get the value from the dictionary
            </summary>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.Serialization.CamelCaseDictionaryExtensions.TryGetValueCamelCase(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.String,System.Object@)">
            <summary>
            Converts a PascalCase key to camelCase and attempts to get the value from the dictionary
            </summary>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IBusTopology.Publish``1">
            <summary>
            Returns the publish topology for the specified message type
            </summary>
            <typeparam name="T">The message type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IBusTopology.Send``1">
            <summary>
            Returns the send topology for the specified message type
            </summary>
            <typeparam name="T">The message type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IBusTopology.Message``1">
            <summary>
            Returns the message topology for the specified message type
            </summary>
            <typeparam name="T">The message type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IBusTopology.TryGetPublishAddress(System.Type,System.Uri@)">
            <summary>
            Returns the destination address for the specified message type, as a short address.
            </summary>
            <param name="messageType">The message type</param>
            <param name="publishAddress"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IBusTopology.TryGetPublishAddress``1(System.Uri@)">
            <summary>
            Returns the destination address for the specified message type, as a short address.
            </summary>
            <param name="publishAddress"></param>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IConsumeTopology.GetMessageTopology``1">
            <summary>
            Returns the specification for the message type
            </summary>
            <typeparam name="T">The message type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IConsumeTopology.CreateTemporaryQueueName(System.String)">
            <summary>
            Create a temporary endpoint name, using the specified tag
            </summary>
            <param name="tag"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.IEntityNameFormatter">
            <summary>
            Used to build entity names for the publish topology
            </summary>
        </member>
        <member name="M:MassTransit.IEntityNameFormatter.FormatEntityName``1">
            <summary>
            Formats the entity name for the given message type
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:MassTransit.IMessageConsumeTopology`1">
            <summary>
            The message-specific Consume topology, which may be configured or otherwise
            setup for use with the Consume specification.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="T:MassTransit.IMessageEntityNameFormatter`1">
            <summary>
            Used to build entity names for the publish topology
            <typeparam name="TMessage"></typeparam>
            </summary>
        </member>
        <member name="M:MassTransit.IMessageEntityNameFormatter`1.FormatEntityName">
            <summary>
            Formats the entity name for the given message
            </summary>
            <returns></returns>
        </member>
        <member name="T:MassTransit.IMessagePublishTopology`1">
            <summary>
            The message-specific publish topology, which may be configured or otherwise
            setup for use with the publish specification.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="P:MassTransit.IMessagePublishTopology.Exclude">
            <summary>
            True if the message type should be excluded from the broker topology
            </summary>
        </member>
        <member name="M:MassTransit.IMessagePublishTopology.TryGetPublishAddress(System.Uri,System.Uri@)">
            <summary>
            Returns the publish address for the message, using the topology rules. This cannot use
            a PublishContext because the transport isn't available yet.
            </summary>
            <param name="baseAddress">The host base address, used to build out the exchange address</param>
            <param name="publishAddress">The address where the publish endpoint should send the message</param>
            <returns>true if the address was available, otherwise false</returns>
        </member>
        <member name="T:MassTransit.IMessageSendTopology`1">
            <summary>
            The message-specific send topology, which may be configured or otherwise
            setup for use with the send specification.
            </summary>
            <typeparam name="TMessage"></typeparam>
        </member>
        <member name="P:MassTransit.IMessageTopology`1.EntityNameFormatter">
            <summary>
            The entity name formatter for this message type
            </summary>
        </member>
        <member name="P:MassTransit.IMessageTopology`1.EntityName">
            <summary>
            The formatted entity name for this message type
            </summary>
        </member>
        <member name="P:MassTransit.IMessageTopology.EntityNameFormatter">
            <summary>
            The entity name formatter used to format message names
            </summary>
        </member>
        <member name="M:MassTransit.IMessageTopology.GetMessageTopology``1">
            <summary>
            Returns the message topology for the specified message type
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IPublishTopology.GetMessageTopology``1">
            <summary>
            Returns the specification for the message type
            </summary>
            <typeparam name="T">The message type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IPublishTopology.GetMessageTopology(System.Type)">
            <summary>
            Returns the specification for the message type
            </summary>
            <returns></returns>
        </member>
        <member name="M:MassTransit.IPublishTopology.TryGetPublishAddress(System.Type,System.Uri,System.Uri@)">
            <summary>
            Returns the publish address for the message, using the topology rules. This cannot use
            a PublishContext because the transport isn't available yet.
            </summary>
            <param name="messageType">The message type</param>
            <param name="baseAddress">The host base address, used to build out the exchange address</param>
            <param name="publishAddress">The address where the publish endpoint should send the message</param>
            <returns>true if the address was available, otherwise false</returns>
        </member>
        <member name="M:MassTransit.ISendTopology.GetMessageTopology``1">
            <summary>
            Returns the specification for the message type
            </summary>
            <typeparam name="T">The message type</typeparam>
            <returns></returns>
        </member>
        <member name="M:MassTransit.MessageEntityNameFormatter`1.FormatEntityName">
            <summary>
            Not sure it ever makes sense to pass the actual message, but many, someday.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MassTransit.MessageUrnEntityNameFormatter">
            <summary>
            This is the simplest thing, it uses the built-in URN for a message type
            as the entity name, which can include illegal characters for most message
            brokers. It's nice for in-memory though, which doesn't give a hoot about the
            string.
            </summary>
        </member>
        <member name="T:MassTransit.Transports.DictionaryHeaderProvider">
            <summary>
            A simple in-memory header collection for use with the in memory transport
            </summary>
        </member>
        <member name="M:MassTransit.Transports.EndpointAddressExtensions.GetEndpointName(System.Uri)">
            <summary>
            Returns the endpoint name (the last part of the URI, without the query string or preceding path)
            from the address
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="P:MassTransit.Transports.IConsumePipe.Connected">
            <summary>
            Task is completed once a connection has been made to the consume pipe (any type of consumer, response handler, etc.
            </summary>
        </member>
        <member name="T:MassTransit.Transports.IDeadLetterTransport">
            <summary>
            If present, can be used to move the <see cref="T:MassTransit.ReceiveContext" /> to the dead letter queue
            </summary>
        </member>
        <member name="M:MassTransit.Transports.IDeadLetterTransport.Send(MassTransit.ReceiveContext,System.String)">
            <summary>
            Writes the message to the dead letter queue, adding the reason as a transport header
            </summary>
            <param name="context"></param>
            <param name="reason"></param>
            <returns></returns>
        </member>
        <member name="T:MassTransit.Transports.IErrorTransport">
            <summary>
            If present, can be used to move the <see cref="T:MassTransit.ReceiveContext" /> to the error queue
            </summary>
        </member>
        <member name="T:MassTransit.Transports.IHeaderProvider">
            <summary>
            Used to read a header from a transport message
            </summary>
        </member>
        <member name="T:MassTransit.Transports.IMessageNameFormatter">
            <summary>
            Used to format a message type into a MessageName, which can be used as a valid
            queue name on the transport
            </summary>
        </member>
        <member name="P:MassTransit.Transports.IReceiveEndpointDependency.Ready">
            <summary>
            The task which is completed once the receive endpoint is ready
            </summary>
        </member>
        <member name="P:MassTransit.Transports.IReceiveEndpointDependent.Completed">
            <summary>
            The task which is completed once the receive endpoint is completed
            </summary>
        </member>
        <member name="P:MassTransit.Transports.IReceivePipe.Connected">
            <summary>
            Task is completed once a connection has been made to the consume pipe (any type of consumer, response handler, etc.
            </summary>
        </member>
        <member name="M:MassTransit.Transports.ISendTransport.Send``1(``0,MassTransit.IPipe{MassTransit.SendContext{``0}},System.Threading.CancellationToken)">
            <summary>
            Send a message to the transport. The transport creates the OldSendContext, and calls back to
            allow the context to be modified to customize the message delivery.
            The transport specifies the defaults for the message as configured, and then allows the
            caller to modify the send context to include the required settings (durable, mandatory, etc.).
            </summary>
            <typeparam name="T">The message type</typeparam>
            <param name="message"></param>
            <param name="pipe">The pipe invoked when sending a message, to do extra stuff</param>
            <param name="cancellationToken">Cancel the send operation (if possible)</param>
            <returns>The task which is completed once the Send is acknowledged by the broker</returns>
        </member>
        <member name="T:MassTransit.Transports.MessageName">
            <summary>
            Class encapsulating naming strategies for exchanges corresponding
            to message types.
            </summary>
        </member>
        <member name="T:MassTransit.Transports.PublishEndpoint">
            <summary>
            The publish endpoint delivers messages to the topic/exchange/whatever based upon the publish topology of the broker, by message type.
            </summary>
        </member>
        <member name="T:MassTransit.Util.Connectable`1">
            <summary>
            Maintains a collection of connections of the generic type
            </summary>
            <typeparam name="T">The connectable type</typeparam>
        </member>
        <member name="P:MassTransit.Util.Connectable`1.Count">
            <summary>
            The number of connections
            </summary>
        </member>
        <member name="M:MassTransit.Util.Connectable`1.Connect(`0)">
            <summary>
            Connect a connectable type
            </summary>
            <param name="connection">The connection to add</param>
            <returns>The connection handle</returns>
        </member>
        <member name="M:MassTransit.Util.Connectable`1.ForEachAsync(System.Func{`0,System.Threading.Tasks.Task})">
            <summary>
            Enumerate the connections invoking the callback for each connection
            </summary>
            <param name="callback">The callback</param>
            <returns>An awaitable Task for the operation</returns>
        </member>
        <member name="T:MassTransit.Util.EmptyConnectHandle">
            <summary>
            A do-nothing connect handle, simply to satisfy
            </summary>
        </member>
        <member name="P:MassTransit.Util.RequestRateAlgorithm.RequestCount">
            <summary>
            The number of concurrent requests that should be performed based upon current response volume
            </summary>
        </member>
        <member name="P:MassTransit.Util.RequestRateAlgorithm.ResultLimit">
            <summary>
            The number of results that should be requested for each request
            </summary>
        </member>
        <member name="P:MassTransit.Util.RequestRateAlgorithm.ActiveRequestCount">
            <summary>
            The current active request count
            </summary>
        </member>
        <member name="P:MassTransit.Util.RequestRateAlgorithm.MaxActiveRequestCount">
            <summary>
            The maximum number of active requests that were made concurrently
            </summary>
        </member>
        <member name="M:MassTransit.Util.RequestRateAlgorithm.Run(MassTransit.Util.RequestRateAlgorithm.RequestCallback,System.Threading.CancellationToken)">
            <summary>
            Run a series of requests, up the limits, as a single pass
            </summary>
            <param name="requestCallback"></param>
            <param name="cancellationToken"></param>
        </member>
        <member name="M:MassTransit.Util.RequestRateAlgorithm.Run``1(MassTransit.Util.RequestRateAlgorithm.RequestCallback{``0},MassTransit.Util.RequestRateAlgorithm.ResultCallback{``0},System.Threading.CancellationToken)">
            <summary>
            Run a series of requests, up the limits, as a single pass
            </summary>
            <param name="requestCallback"></param>
            <param name="resultCallback"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MassTransit.Util.RequestRateAlgorithm.Run``2(MassTransit.Util.RequestRateAlgorithm.RequestCallback{``0},MassTransit.Util.RequestRateAlgorithm.ResultCallback{``0},MassTransit.Util.RequestRateAlgorithm.GroupCallback{``0,``1},MassTransit.Util.RequestRateAlgorithm.OrderCallback{``0},System.Threading.CancellationToken)">
            <summary>
            Run a series of requests, up the limits, as a single pass
            </summary>
            <param name="requestCallback"></param>
            <param name="resultCallback"></param>
            <param name="groupCallback"></param>
            <param name="orderCallback"></param>
            <param name="cancellationToken"></param>
            <typeparam name="T"></typeparam>
            <typeparam name="TKey"></typeparam>
        </member>
        <member name="P:MassTransit.Util.RequestRateAlgorithmOptions.PrefetchCount">
            <summary>
            The number of messages to keep in the pipeline at any given time
            </summary>
        </member>
        <member name="P:MassTransit.Util.RequestRateAlgorithmOptions.ConcurrentResultLimit">
            <summary>
            The number of messages to dispatch concurrently
            </summary>
        </member>
        <member name="P:MassTransit.Util.RequestRateAlgorithmOptions.RequestResultLimit">
            <summary>
            The maximum number of results that can be retrieved per request
            </summary>
        </member>
        <member name="P:MassTransit.Util.RequestRateAlgorithmOptions.RequestRateLimit">
            <summary>
            The maximum number of requests within the given request rate interval
            </summary>
        </member>
        <member name="P:MassTransit.Util.RequestRateAlgorithmOptions.RequestRateInterval">
            <summary>
            The interval at which the request rate limit is reset
            </summary>
        </member>
    </members>
</doc>
